<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="D995BE573C1192E159EE0286450A5F78" CONNECTOR="AAAD0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_FRM" TYPE="PROG" VERSION="1.0">
 <DIRECTORY DEVCLASS="ZAPLINK-FRAMEWORK-CORE" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VARCL="X" SUBC="I" APPL="S" VERN="000070" RMAND="220" RLOAD="E" UCCHECK="X"/>
  <SOURCE>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZAPLINK_FRM
*&amp;---------------------------------------------------------------------*
*/---------------------get_current_screen_value-----------------------\
FORM get_current_screen_value  USING    l_screen_field
                                        l_screen_number
                               CHANGING l_screen_value.

  DATA it_dynpfields TYPE STANDARD TABLE OF dynpread.
  DATA wa_dynpfields TYPE dynpread.


  wa_dynpfields-fieldname = l_screen_field.
  APPEND wa_dynpfields TO it_dynpfields.


  CALL FUNCTION &apos;DYNP_VALUES_READ&apos;
    EXPORTING
      dyname                         = sy-cprog
      dynumb                         = l_screen_number
      translate_to_upper             = &apos;X&apos;
*     REQUEST                        = &apos; &apos;
*     PERFORM_CONVERSION_EXITS       = &apos; &apos;
*     PERFORM_INPUT_CONVERSION       = &apos; &apos;
*     DETERMINE_LOOP_INDEX           = &apos; &apos;
    TABLES
      dynpfields                     = it_dynpfields
    EXCEPTIONS
      invalid_abapworkarea           = 1
      invalid_dynprofield            = 2
      invalid_dynproname             = 3
      invalid_dynpronummer           = 4
      invalid_request                = 5
      no_fielddescription            = 6
      invalid_parameter              = 7
      undefind_error                 = 8
      double_conversion              = 9
      stepl_not_found                = 10
      OTHERS                         = 11
            .
  IF sy-subrc &lt;&gt; 0.
*  MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*  WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.
    READ TABLE it_dynpfields INTO wa_dynpfields
      WITH KEY fieldname = l_screen_field.
    IF sy-subrc = 0.
      l_screen_value = wa_dynpfields-fieldvalue.
    ENDIF.
  ENDIF.


ENDFORM.                    &quot; get_current_screen_value
*/---------------------writeMessage-----------------------\
FORM writemessage USING value(p_type) TYPE sy-msgty
                        value(p_msg).
  CASE p_type.
    WHEN &apos;E&apos; OR &apos;A&apos; OR &apos;X&apos;.
      WRITE / icon_red_light AS ICON.
    WHEN &apos;W&apos;.
      WRITE / icon_yellow_light AS ICON.
    WHEN &apos;S&apos;.
      WRITE / icon_green_light AS ICON.
    WHEN OTHERS.
      WRITE / icon_light_out AS ICON. &quot; ICON_ARROW_RIGHT
  ENDCASE.

  WRITE p_msg.
ENDFORM.                    &quot;WriteMessage
*&amp;---------------------------------------------------------------------*
*&amp;      Form  DSP_RESULT_UNINSTALL
*&amp;---------------------------------------------------------------------*
FORM dsp_result_uninstall USING name TYPE td_name.
  DATA msg    TYPE string.
  DATA t_comp TYPE t_comp.
  DATA _type  TYPE t_obj_type.
  DATA _name  TYPE t_obj_type.
  DATA _cx    TYPE t_exception.
  DATA _msg_col TYPE t_msg_col.

  WRITE: / &apos;Object list for Container &apos;, name. SKIP.
  IF objlist IS BOUND.
    objlist-&gt;display_progress = abap_false.
    objlist-&gt;init_iter( ).
    t_comp = objlist-&gt;get_next( ).
  ENDIF.
  IF NOT t_comp IS BOUND.
    PERFORM writemessage USING &apos;W&apos; &apos;You have an empty Container&apos;.
    EXIT.
  ENDIF.

  WHILE t_comp IS BOUND.
    _type = t_comp-&gt;get_type( ).
    _name = t_comp-&gt;get_name( ).

    IF t_comp-&gt;connector_exists( ) = zaplink_gui=&gt;exists-not_exists.
      CONCATENATE _type &apos;-&apos; _name &apos;no plugin&apos;(npi)
          INTO msg SEPARATED BY space.
      PERFORM writemessage USING &apos;E&apos; msg.
    ELSEIF objlist-&gt;is_selected( t_comp ) = abap_false.
      CONCATENATE &apos;Uninstall&apos;(u01) &apos;:&apos; _type &apos;-&apos; _name &apos;not requested&apos;(nre)
          INTO msg SEPARATED BY space.
      PERFORM writemessage USING &apos;I&apos; msg.
    ELSEIF t_comp-&gt;exists( ) = zaplink_gui=&gt;exists-not_exists.
      CONCATENATE &apos;Uninstall&apos;(u01) &apos;:&apos; _type &apos;-&apos; _name &apos;SUCCEED&apos;(suc)
          INTO msg SEPARATED BY space.
      PERFORM writemessage USING &apos;S&apos; msg.
    ELSE.
      CONCATENATE &apos;Uninstall&apos;(u01) &apos;:&apos; _type &apos;-&apos; _name &apos;FAILED&apos;(fai)
          INTO msg SEPARATED BY space.
      PERFORM writemessage USING &apos;E&apos; msg.
      _cx ?= t_comp-&gt;get_exception( ).
      IF _cx IS BOUND.
        _cx-&gt;write( ).
      ELSE.
        _msg_col ?= t_comp-&gt;get_msg_coll( ).
        IF _msg_col IS BOUND.
          _msg_col-&gt;write( ).
        ENDIF.
      ENDIF.
    ENDIF.

    t_comp = objlist-&gt;get_next( ).
  ENDWHILE.

ENDFORM.                    &quot; DSP_RESULT_UNINSTALL
*&amp;---------------------------------------------------------------------*
*&amp;      Form  DSP_RESULT_DISPLAY
*&amp;---------------------------------------------------------------------*
FORM dsp_result_display USING name TYPE td_name
                           objlist TYPE t_objlist
                            offset TYPE string.
  DATA msg    TYPE string.
  DATA t_comp TYPE t_comp.
  DATA _type  TYPE t_obj_type.
  DATA _name  TYPE t_obj_name.
  DATA _cx    TYPE t_exception.
  DATA _msg_col TYPE t_msg_col.
  DATA _subc  TYPE t_objlist.
  DATA _offset TYPE string.
  CONSTANTS s_inc TYPE string VALUE `  `.

  IF NOT name IS INITIAL.
    WRITE: / &apos;Object list for Container &apos;, name. SKIP.
  ENDIF.
  IF objlist IS BOUND.
    objlist-&gt;display_progress = abap_false.
    objlist-&gt;init_iter( ).
    t_comp = objlist-&gt;get_next( ).
  ENDIF.
  IF NOT name IS INITIAL AND NOT t_comp IS BOUND.
    PERFORM writemessage USING &apos;W&apos; &apos;You have an empty Container&apos;.
    EXIT.
  ENDIF.

  CONCATENATE offset s_inc INTO _offset.

  WHILE t_comp IS BOUND.
    _type = t_comp-&gt;get_type( ).
    _name = t_comp-&gt;get_name( ).

    IF t_comp-&gt;connector_exists( ) = zaplink_gui=&gt;exists-not_exists.
      CONCATENATE offset _type &apos;-&apos; _name &apos;no plugin&apos;(npi)
          INTO msg SEPARATED BY space.
      PERFORM writemessage USING &apos;E&apos; msg.
    ELSEIF objlist-&gt;is_selected( t_comp ) = abap_false.
      CONCATENATE offset _type &apos;-&apos; _name &apos;not requested&apos;(nre)
          INTO msg SEPARATED BY space.
      PERFORM writemessage USING &apos;I&apos; msg.
    ELSE.

      _cx ?= t_comp-&gt;get_exception( ).
      _msg_col ?= t_comp-&gt;get_msg_coll( ).
      IF _msg_col IS BOUND.
        IF _msg_col-&gt;has_messages_of_msgt( &apos;E&apos; ) = abap_false .
          CLEAR _msg_col.
        ENDIF.
      ENDIF.
      IF _cx IS BOUND OR _msg_col IS BOUND.
        CONCATENATE offset _type &apos;-&apos; _name &apos;FAILED&apos;(fai)
            INTO msg SEPARATED BY space.
        PERFORM writemessage USING &apos;E&apos; msg.
        IF _cx IS BOUND.
          _cx-&gt;write( ).
        ELSE.
          IF _msg_col IS BOUND.
            _msg_col-&gt;write( ).
          ENDIF.
        ENDIF.
      ELSE.
        CONCATENATE offset _type &apos;-&apos; _name &apos;SUCCEED&apos;(suc)
            INTO msg SEPARATED BY space.
        PERFORM writemessage USING &apos;S&apos; msg.
      ENDIF.

      _msg_col ?= t_comp-&gt;get_msg_coll( ).
      IF _msg_col IS BOUND.
        _msg_col-&gt;write( ).
      ENDIF.

    ENDIF.

    _subc = t_comp-&gt;get_subcomponents( ).
    IF _subc IS BOUND.
      PERFORM dsp_result_display USING space _subc _offset.
    ENDIF.

    t_comp = objlist-&gt;get_next( ).
  ENDWHILE.

ENDFORM.                    &quot; DSP_RESULT_DISPLAY
*&amp;---------------------------------------------------------------------*
*&amp;      Form  create
*&amp;---------------------------------------------------------------------*
FORM create .
  d_name = c_name.
  TRY.
      CALL METHOD zaplink_gui=&gt;create
        EXPORTING
          name = d_name.
    CATCH zaplink_cx INTO o_exception.
      stemp = o_exception-&gt;get_text( ).
      PERFORM writemessage USING &apos;E&apos; stemp.
      EXIT.
  ENDTRY.
  PERFORM writemessage USING &apos;S&apos; &apos;Container created&apos;(ncs).
ENDFORM.                    &quot; create
*&amp;---------------------------------------------------------------------*
*&amp;      Form  add
*&amp;---------------------------------------------------------------------*
FORM add .
  d_filename = p_file.
  obj_type = co_type.
  obj_name = co_name.
  TRY.
      CALL METHOD zaplink_gui=&gt;add_object
        EXPORTING
          objtype = obj_type
          name    = obj_name
          file    = d_filename.
    CATCH zaplink_cx INTO o_exception.
      stemp = o_exception-&gt;get_text( ).
      PERFORM writemessage USING &apos;E&apos; stemp.
      EXIT.
  ENDTRY.
ENDFORM.                    &quot; add
*&amp;---------------------------------------------------------------------*
*&amp;      Form  import
*&amp;---------------------------------------------------------------------*
FORM import .
  DATA o_dir  TYPE REF TO zaplink_opt_directory.
  DATA o_devc TYPE REF TO zaplink_opt_devclass.
  DATA o_tr   TYPE REF TO zaplink_opt_transport_request.

  o_dir = zaplink_gui=&gt;o_options-&gt;get_directory( ).
  o_devc = o_dir-&gt;get_devclass( ).
  IF NOT devc_no IS INITIAL.
    o_devc-&gt;set_substitutionkind( zaplink_opt_devclass=&gt;substitutionkinds-no_overwrite ).
  ELSEIF NOT devc_uc IS INITIAL.
    o_devc-&gt;set_substitutionkind( zaplink_opt_devclass=&gt;substitutionkinds-use_container ).
  ELSEIF NOT devc_ke IS INITIAL.
    o_devc-&gt;set_substitutionkind( zaplink_opt_devclass=&gt;substitutionkinds-keep_existing ).
  ELSEIF NOT devc_lo IS INITIAL.
    o_devc-&gt;set_substitutionkind( zaplink_opt_devclass=&gt;substitutionkinds-local ).
  ELSEIF NOT devc_f IS INITIAL.
    o_devc-&gt;set_devclass( devclass ).
    o_devc-&gt;set_substitutionkind( zaplink_opt_devclass=&gt;substitutionkinds-fixed ).
  ENDIF.

  o_tr = o_dir-&gt;get_transport_request( ).
  IF NOT tr_us IS INITIAL.
    o_tr-&gt;set_substitutionkind( zaplink_opt_transport_request=&gt;substitutionkinds-user ).
  ELSEIF NOT tr_uc IS INITIAL.
    o_tr-&gt;set_substitutionkind( zaplink_opt_transport_request=&gt;substitutionkinds-same_as_container ).
  ELSEIF NOT tr_in IS INITIAL.
    o_tr-&gt;set_substitutionkind( zaplink_opt_transport_request=&gt;substitutionkinds-input ).
  ELSEIF NOT tr_fi IS INITIAL.
    o_tr-&gt;set_transport_request( tr ).
    o_tr-&gt;set_substitutionkind( zaplink_opt_transport_request=&gt;substitutionkinds-fixed ).
  ENDIF.

  d_filename = p_file.
  TRY.
      CALL METHOD zaplink_gui=&gt;import
        EXPORTING
          file         = d_filename
        IMPORTING
          name         = d_name
*        CHANGING
          list       = objlist.
    CATCH zaplink_cx INTO o_exception.
      stemp = o_exception-&gt;get_text( ).
      PERFORM writemessage USING &apos;E&apos; stemp.
      EXIT.
  ENDTRY.

  PERFORM dsp_result_display USING d_name objlist space.
ENDFORM.                    &quot; import
*&amp;---------------------------------------------------------------------*
*&amp;      Form  display
*&amp;---------------------------------------------------------------------*
FORM display .
  d_filename = p_file.
  TRY.
      objlist = zaplink_gui=&gt;get_objlist( file = d_filename ).
*    CATCH zaplink_cx INTO old_exception.
*      stemp = o_exception-&gt;get_text( ).
*      PERFORM writemessage USING &apos;E&apos; stemp.
*      EXIT.
    CATCH zaplink_cx INTO o_exception.
      o_exception-&gt;write( ).
      EXIT.
  ENDTRY.
  objlist-&gt;display( ).
*  PERFORM dsp_result_display USING space objlist space.
ENDFORM.                    &quot; display
*&amp;---------------------------------------------------------------------*
*&amp;      Form  uninstall
*&amp;---------------------------------------------------------------------*
FORM uninstall .
  d_filename = p_file.
  TRY.
      CALL METHOD zaplink_gui=&gt;uninstall
        EXPORTING
          file = d_filename
        IMPORTING
          name = d_name
        CHANGING
          list = objlist.
    CATCH zaplink_cx INTO o_exception.
  ENDTRY.
  PERFORM dsp_result_uninstall USING d_name.
ENDFORM.                    &quot; uninstall
*&amp;---------------------------------------------------------------------*
*&amp;      Form  add_package
*&amp;---------------------------------------------------------------------*
FORM add_package .
  DATA:
    r_package TYPE zaplink_gui=&gt;tr_packages,
    _wa LIKE LINE OF r_package.
  DATA _keys TYPE zaplink_gui=&gt;tt_compkeys.

  IF package  IS INITIAL.
    MESSAGE s208(00) WITH &apos;package required&apos;.
    EXIT.
  ENDIF.

  _wa-sign = &apos;I&apos;. _wa-option = &apos;EQ&apos;.
  _wa-low = package. APPEND _wa TO r_package.

  _keys = zaplink_gui=&gt;get_keys_from_package( r_package ).
  CREATE OBJECT objlist.
  objlist-&gt;add_keys( _keys ).
  objlist-&gt;select_default( zaplink_list=&gt;sel_actions-export ).
  objlist-&gt;change_selection( ).

  d_filename = p_file.
  TRY.
      CALL METHOD zaplink_gui=&gt;export
        EXPORTING
          file    = d_filename
        CHANGING
          objlist = objlist.
    CATCH zaplink_cx INTO o_exception.
      stemp = o_exception-&gt;get_text( ).
      PERFORM writemessage USING &apos;E&apos; stemp.
      EXIT.
  ENDTRY.

  PERFORM dsp_result_display USING space objlist space.

ENDFORM.                    &quot; add_package
*&amp;---------------------------------------------------------------------*
*&amp;      Form  add_tr
*&amp;---------------------------------------------------------------------*
FORM add_tr .
  DATA:
    r_tr TYPE zaplink_gui=&gt;tr_tr.
  DATA _keys TYPE zaplink_gui=&gt;tt_compkeys.

  IF p_tr[] IS INITIAL.
    MESSAGE s208(00) WITH &apos;Transport Request required&apos;.
    EXIT.
  ENDIF.

  r_tr = p_tr[].

  _keys = zaplink_gui=&gt;get_keys_from_tr( r_tr ).
  CREATE OBJECT objlist.
  objlist-&gt;add_keys( _keys ).
  objlist-&gt;select_default( zaplink_list=&gt;sel_actions-export ).
  objlist-&gt;change_selection( ).

  d_filename = p_file.
  TRY.
      CALL METHOD zaplink_gui=&gt;export
        EXPORTING
          file    = d_filename
        CHANGING
          objlist = objlist.
    CATCH zaplink_cx INTO o_exception.
      stemp = o_exception-&gt;get_text( ).
      PERFORM writemessage USING &apos;E&apos; stemp.
      EXIT.
  ENDTRY.

  PERFORM dsp_result_display USING space objlist space.

ENDFORM.                    &quot; add_tr</SOURCE>
  <TEXTSPOOL>
   <ITEM ID="R">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Include ZAPLINK_FRM" LENGTH="19 "/>
    </TEXTS>
   </ITEM>
  </TEXTSPOOL>
 </RAW>
</ZL_OBJECT>
