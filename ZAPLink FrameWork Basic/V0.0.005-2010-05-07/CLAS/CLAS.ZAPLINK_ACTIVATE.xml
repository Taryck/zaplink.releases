<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="9DA4D2732E2A0573F8FFE04672C390A0" CODE_SIGNATURE="0901324BA318645B52E0CA1702633982" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_ACTIVATE" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-FRAMEWORK-CORE-EXT" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="Activate SAP Link"/>
   </TEXTS>
  </A0_MAINDATA>
  <ALIASES>
   <ITEM CMPNAME="TT_COMPKEYS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_COMPKEYS"/>
  </ALIASES>
  <ATTRIBUTS>
   <ITEM CMPNAME="IT_ITEMS" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="TT_ITEMS"/>
   <ITEM CMPNAME="IT_OBJ_LIST" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="TT_OBJLIST">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Objects list"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <INTERFACES>
   <ITEM REFCLSNAME="ZAPLINK_DATATYPES" EXPOSURE="2" STATE="1" RELTYPE="1"/>
  </INTERFACES>
  <LOCAL>
   <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* IMPLEMENTATION OR PRIVATE METHOD&apos;S SIGNATURE</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* LOCAL HELPER CLASSES</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* IN THE IMPLEMENTATION PART OF THE CLASS</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="ACTIVATE" EXPOSURE="2" STATE="1" EDITORDER="2 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Activate objects"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="OBJ_LIST" CMPTYPE="1" EDITORDER="1 " PARDECLTYP="3" TYPTYPE="1" TYPE="TT_COMPKEYS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Objects list not activate"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA:
    lb_actdone TYPE xflag,
    lc_before  TYPE i,
    lc_after   TYPE i,
    it_items   TYPE tt_items,
    it_progs   TYPE tt_objlist,
    it_mainp   TYPE tt_mainprogs,
    _mp        LIKE LINE OF it_mainp,
    dummy_tab  TYPE tt_items,
    it_objlist TYPE tt_objlist,
    it_ddic    TYPE tt_objlist,
    it_det_obj TYPE tt_det_obj.
  FIELD-SYMBOLS:
    &lt;mainp&gt; LIKE LINE OF it_mainp,
    &lt;item&gt;  LIKE LINE OF it_items,
    &lt;obj&gt;   LIKE LINE OF it_obj_list.

*  add_obj_to_wa( ).

  CALL METHOD split_list
    EXPORTING
      obj_list  = it_obj_list
    IMPORTING
      ddic      = it_ddic
      prog_list = it_progs.

* Try mass activation first (usefull for non DDIC objects)
  activate_ddic( CHANGING it_list = it_ddic ).
  activate_nonddic( CHANGING it_list = it_progs ).
  COMMIT WORK AND WAIT.

* do the loop
  DO.
    CLEAR lb_actdone.

*Active DDIC
    IF NOT it_ddic IS INITIAL.
      lc_before = LINES( it_ddic ).
      activate_ddic( CHANGING it_list = it_ddic ).
      lc_after = LINES( it_ddic ).
      IF lc_after &lt; lc_before.
        lb_actdone = abap_true.
        COMMIT WORK AND WAIT.
      ENDIF.
    ENDIF.

*Active NON DDIC
    IF NOT it_progs IS INITIAL.
      lc_before = LINES( it_progs ).
      activate_nonddic( EXPORTING one_by_one = &apos;X&apos;
                         CHANGING    it_list = it_progs ).
      lc_after = LINES( it_progs ).
      IF lc_after &gt;= lc_before.
        activate_nonddic( CHANGING    it_list = it_progs ).    &quot; Try mass activation
        lc_after = LINES( it_progs ).
      ENDIF.
      IF lc_after &lt; lc_before.
        lb_actdone = abap_true.
        COMMIT WORK AND WAIT.
      ENDIF.
    ENDIF.

    IF lb_actdone IS INITIAL. EXIT. ENDIF.
  ENDDO.

  APPEND LINES OF it_ddic TO it_objlist.
  APPEND LINES OF it_progs TO it_objlist.
  obj_list = objlist_2_compkeys( it_objlist ).
** Switch into activation and generation
*  CALL FUNCTION &apos;RS_WORKING_OBJECTS_ACTIVATE&apos;
*    EXPORTING
**     SUPPRESS_SYNTAX_CHECK        =
*      suppress_generation          = &apos;X&apos;
**     P_WB_MANAGER                 =
**     SUPPRESS_INSERT              =
*     activate_ddic_objects        = &apos;X&apos;
**     WITH_POPUP                   = &apos; &apos;
*    TABLES
*      OBJECTS                      = it_det_obj
*    EXCEPTIONS
*      excecution_error             = 1
*      cancelled                    = 2
*      insert_into_corr_error       = 3
*      OTHERS                       = 4
*            .
*  IF sy-subrc &lt;&gt; 0.
**    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
**            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.
*
*  it_det_obj = get_inactive_objects( it_progs ).
*
*  CALL FUNCTION &apos;RS_WORKING_OBJECTS_ACTIVATE&apos;
*    EXPORTING
**     SUPPRESS_SYNTAX_CHECK        =
*      suppress_generation          = &apos;X&apos;
**     P_WB_MANAGER                 =
*      SUPPRESS_INSERT              = &apos;X&apos;
**     ACTIVATE_DDIC_OBJECTS        = &apos; &apos;
**     WITH_POPUP                   = &apos; &apos;
*    TABLES
*      OBJECTS                      = it_det_obj
*    EXCEPTIONS
*      excecution_error             = 1
*      cancelled                    = 2
*      insert_into_corr_error       = 3
*      OTHERS                       = 4
*            .
*  IF sy-subrc &lt;&gt; 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*
*  it_items = conv_list( it_progs ).
*
** FROM LSEWORKINGAREAF01
**  PERFORM get_main_programs USING &apos;X&apos; with_popup .
*  DATA: l_progs TYPE rsnewleng-programm,
*        l_main TYPE STANDARD TABLE OF rsnewleng-programm WITH NON-UNIQUE DEFAULT KEY,
*        l_index TYPE i.
*  FIELD-SYMBOLS:
*    &lt;pname&gt; LIKE LINE OF l_main.
*
** Selektierte für ABAP setzen
*  CALL FUNCTION &apos;RS_WORKING_AREA_PREPARE&apos;
*    EXPORTING
*      suppress_init = &apos;X&apos;
*    EXCEPTIONS
*      OTHERS        = 1.
*
** FROM LSEWORKINGAREAF01 (366)
*  REFRESH it_mainp.
*  CLEAR it_mainp.
*  LOOP AT it_items ASSIGNING &lt;item&gt;.
*
*    CASE &lt;item&gt;-object.
*      WHEN &apos;CPRI&apos; OR &apos;CPRO&apos; OR &apos;CPUB&apos; OR &apos;CREP&apos; OR &apos;METH&apos; OR &apos;INTF&apos;
*           OR &apos;CINC&apos; OR &apos;CLAS&apos;.
**       Geht schneller die Klasse zu bestimmen
*        _mp-include = &lt;item&gt;-obj_name.
*        &lt;item&gt;-obj_name = &lt;item&gt;-obj_name(30).
*        TRANSLATE &lt;item&gt;-obj_name USING &apos;= &apos;.
*        _mp-master = &lt;item&gt;-obj_name.
*        _mp-object = &lt;item&gt;-object.
*        APPEND _mp TO it_mainp.
*        CONTINUE.
*      WHEN &apos;WAPD&apos; OR &apos;WAPA&apos;.
**       BSP-Applikation
*        _mp-include = &lt;item&gt;-obj_name.
*        _mp-master  = &lt;item&gt;-obj_name.
*        _mp-object  = &lt;item&gt;-object.
*        APPEND _mp TO it_mainp.
*        CONTINUE.
*      WHEN &apos;WAPP&apos;.
**       BSP-Seite
*        _mp-include = &lt;item&gt;-obj_name+30.
*        _mp-master  = &lt;item&gt;-obj_name(30).
*        _mp-object  = &lt;item&gt;-object.
*        APPEND _mp TO it_mainp.
*        CONTINUE.
*      WHEN &apos;WDYN&apos;.
**       Web Dynpro-Applikation
*        _mp-include = &lt;item&gt;-obj_name.
*        _mp-master  = &lt;item&gt;-obj_name.
*        _mp-object  = &lt;item&gt;-object.
*        APPEND _mp TO it_mainp.
*        CONTINUE.
*      WHEN &apos;WDYD&apos; OR &apos;WDYV&apos; OR &apos;WDYC&apos;.
**       Web Dynpro
*        _mp-include = &lt;item&gt;-obj_name+30.
*        _mp-master  = &lt;item&gt;-obj_name(30).
*        _mp-object  = &lt;item&gt;-object.
*        APPEND _mp TO it_mainp.
*        CONTINUE.
*
*      WHEN &apos;ENHO&apos; OR &apos;ENHC&apos; OR &apos;ENHS&apos; OR &apos;ENSC&apos;.
**       Enhancement Objects
*        _mp-include = &lt;item&gt;-obj_name.
*        _mp-master  = &lt;item&gt;-obj_name.
*        _mp-object  = &lt;item&gt;-object.
*        APPEND _mp TO it_mainp.
*        CONTINUE.
*
*      WHEN &apos;SFBF&apos; OR &apos;SFSW&apos; OR &apos;SFBS&apos; OR &apos;SF01&apos;.
**       Switch Framework
*        _mp-include = &lt;item&gt;-obj_name.
*        _mp-master  = &lt;item&gt;-obj_name.
*        _mp-object  = &lt;item&gt;-object.
*        APPEND _mp TO it_mainp.
*        CONTINUE.
*
*      WHEN &apos;WEBI&apos; OR &apos;WEBS&apos;.
**       Webservices
*        _mp-include = &lt;item&gt;-obj_name.
*        _mp-master  = &lt;item&gt;-obj_name.
*        _mp-object  = &lt;item&gt;-object.
*        APPEND _mp TO it_mainp.
*        CONTINUE.
*      WHEN &apos;SFPF&apos; OR &apos;SFPI&apos;.
**       Formulare
*        _mp-include = &lt;item&gt;-obj_name.
*        _mp-master  = &lt;item&gt;-obj_name.
*        _mp-object  = &lt;item&gt;-object.
*        APPEND _mp TO it_mainp.
*        CONTINUE.
*      WHEN OTHERS.
*        PERFORM convert_object_for_abap IN PROGRAM saplseworkingarea
*                                          TABLES dummy_tab
*                                        CHANGING &lt;item&gt;.
*    ENDCASE.
*    CHECK &lt;item&gt;-object = &apos;REPS&apos;.
*    CHECK &lt;item&gt;-obj_name(1) &lt;&gt; &apos;&lt;&apos; AND &lt;item&gt;-obj_name(1) &lt;&gt; &apos;&gt;&apos;.
*    l_progs = &lt;item&gt;-obj_name.
**   Type-Pools
*    IF &lt;item&gt;-obj_name(3) = &apos;%_C&apos;.
*      _mp-include = &lt;item&gt;-obj_name.
*      _mp-master = &lt;item&gt;-obj_name.
*      _mp-object = &lt;item&gt;-object.
*      APPEND _mp TO it_mainp.
*      CONTINUE.
*    ENDIF.
**   PG030801 wenn Rahmenprogramm zu REPS schon bekannt, kein Dialog
*    IF &lt;item&gt;-object = &apos;REPS&apos;
*    AND &lt;item&gt;-main_item_object = &apos;PROG&apos;
*    AND &lt;item&gt;-main_item NE space.
*      _mp-include = &lt;item&gt;-obj_name.
*      _mp-master = &lt;item&gt;-main_item.
*      _mp-object = &lt;item&gt;-object.
*      APPEND _mp TO it_mainp.
*    ELSE.
**     Rahmenprogramme per Dialog bestimmen
*      CALL FUNCTION &apos;RS_GET_MAINPROGRAMS&apos;
*         EXPORTING
*              fulltab      = &apos;X&apos;
**             dialog_required = &apos;X&apos;
*              dialog       = &apos; &apos; &quot;with_dialog  &quot;  &apos;X&apos;
*              name         = l_progs
*         IMPORTING
*              tindex       = l_index
**              number_of_mainprograms = l_number
*         TABLES
*              mainprograms = l_main
*         EXCEPTIONS
*              cancelled    = 1
*              OTHERS       = 2.
*      IF sy-subrc = 1.
**        g_cancel_flag = &apos;X&apos;.
**        work_items[] = l_items[].
**        working_area[] = l_work[].
**        EXIT.
*      ENDIF.
*      IF l_index &lt;&gt; 0.
*        READ TABLE l_main INDEX l_index ASSIGNING &lt;pname&gt;.
*        IF sy-subrc = 0.
*          _mp-include = &lt;item&gt;-obj_name.
*          _mp-master = &lt;pname&gt;.
*          _mp-object = &lt;item&gt;-object.
*          APPEND _mp TO it_mainp.
*        ENDIF.
*      ELSE.
*        LOOP AT l_main ASSIGNING &lt;pname&gt;.
*          _mp-include = &lt;item&gt;-obj_name.
*          _mp-master = &lt;pname&gt;.
*          _mp-object = &lt;item&gt;-object.
*          APPEND _mp TO it_mainp.
*        ENDLOOP.
*      ENDIF.
*    ENDIF.
*  ENDLOOP.
*
*  CALL METHOD activate_objects
*    EXPORTING
*      programs = it_mainp
*      items    = it_items.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="ACTIVATE_DDIC" EXPOSURE="1" STATE="1" EDITORDER="5 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Activate DDIC"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="IT_LIST" CMPTYPE="1" EDITORDER="1 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TT_OBJLIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Objects list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA:
    it_debug TYPE STANDARD TABLE OF ddmsactrc WITH NON-UNIQUE DEFAULT KEY.
  FIELD-SYMBOLS:
    &lt;wa&gt; LIKE LINE OF it_debug.

*Active DDIC
  CALL FUNCTION &apos;SEO_BUFFER_REFRESH&apos;
   EXPORTING
*     CIFKEY        =
*     VERSION       = SEOC_VERSION_INACTIVE
      force         = &apos;X&apos;.
  CALL FUNCTION &apos;SEO_BUFFER_REFRESH&apos;
   EXPORTING
*     CIFKEY        =
      version       = 1
      force         = &apos;X&apos;.

*  CALL FUNCTION &apos;RS_DD_WORKLIST_ACTIVATE&apos; in UPDATE TASK
*    EXPORTING
*      p_generate_active_obj = &apos;X&apos;
*      i_suppress_dialog     = &apos;X&apos;
*    TABLES
*      t_worklist            = it_list
*      t_act_obj             = it_debug.
  CALL FUNCTION &apos;RS_DD_WORKLIST_ACTIVATE&apos;
    EXPORTING
      p_generate_active_obj = &apos;X&apos;
      i_suppress_dialog     = &apos;X&apos;
    TABLES
      t_worklist            = it_list
      t_act_obj             = it_debug
    EXCEPTIONS
      not_all_activated     = 1
      error_occured         = 2
      locked                = 3
      OTHERS                = 4.
  IF sy-subrc &lt;= 1.
    LOOP AT it_debug ASSIGNING &lt;wa&gt;.
      DELETE it_list
          WHERE pgmid = &lt;wa&gt;-pgmid
            AND object = &lt;wa&gt;-type
            AND obj_name = &lt;wa&gt;-name.
    ENDLOOP.
  ENDIF.
  COMMIT WORK AND WAIT.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="ACTIVATE_DDIC_V2" EXPOSURE="1" STATE="1" EDITORDER="3 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Activate DDIC V2"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="IT_LIST" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TT_OBJLIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Objects list"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="ONE_BY_ONE" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="XFLAG" PAROPTIONL="X">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Activate objects one by one"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA:
    _wb_manager TYPE REF TO  if_wb_manager,
    it_obj TYPE tt_det_obj,
    it_det_obj TYPE tt_det_obj.
  FIELD-SYMBOLS:
    &lt;disable_popup&gt; TYPE data,        &quot; DATA: xcode LIKE rsnewleng-tcode,
    &lt;obj&gt; LIKE LINE OF it_det_obj.

*Active NON DDIC
*  ASSIGN (&apos;(SAPLSEWORKINGAREA)xcode&apos;) TO &lt;disable_popup&gt;.
*  IF sy-subrc = 0.
*    &lt;disable_popup&gt; = &apos;CHEC&apos;. &quot; LSEWORKINGAREAFCK from CHECKLIST_EVALUATE line 2134
*  ENDIF.
*  it_det_obj = get_inactive_objects( it_list ).
*  count = LINES( it_det_obj ).
*  IF one_by_one IS INITIAL.
**    it_det_obj = conv_list( it_list ).
  it_det_obj = get_inactive_objects( it_list ).
  CALL FUNCTION &apos;RS_WORKING_OBJECTS_ACTIVATE&apos;
    EXPORTING
*     SUPPRESS_SYNTAX_CHECK        =
*     SUPPRESS_GENERATION          =
*     P_WB_MANAGER                 =
*     SUPPRESS_INSERT              =
      activate_ddic_objects        = &apos;X&apos;
*     WITH_POPUP                   = &apos; &apos;
*     CWB_MODE                     =
    TABLES
      OBJECTS                      = it_det_obj
    EXCEPTIONS
      excecution_error             = 1
      cancelled                    = 2
      insert_into_corr_error       = 3
      OTHERS                       = 4
            .
  IF sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CALL FUNCTION &apos;RS_MASS_ACTIVATION&apos;
    EXPORTING
      p_wb_manager = _wb_manager
    TABLES
      OBJECTS      = it_det_obj.
*  ELSE.
*    it_det_obj = conv_list( it_list ).
*    LOOP AT it_det_obj ASSIGNING &lt;obj&gt;.
*      CLEAR it_obj.
*      APPEND &lt;obj&gt; TO it_obj.
*      CALL FUNCTION &apos;RS_MASS_ACTIVATION&apos;
*        EXPORTING
*          p_wb_manager = _wb_manager
*        TABLES
*          OBJECTS      = it_obj.
*    ENDLOOP.
*  ENDIF.
  check_inactive_objects( CHANGING obj_list = it_list ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="ACTIVATE_NONDDIC" EXPOSURE="1" STATE="1" EDITORDER="4 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Activate NONDDIC"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="IT_LIST" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TT_OBJLIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Objects list"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="ONE_BY_ONE" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="XFLAG" PAROPTIONL="X">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Activate objects one by one"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA:
    _wb_manager TYPE REF TO  if_wb_manager,
    it_obj TYPE tt_det_obj,
    it_det_obj TYPE tt_det_obj.
  FIELD-SYMBOLS:
    &lt;disable_popup&gt; TYPE data,        &quot; DATA: xcode LIKE rsnewleng-tcode,
    &lt;obj&gt; LIKE LINE OF it_det_obj.

*Active NON DDIC
  ASSIGN (&apos;(SAPLSEWORKINGAREA)xcode&apos;) TO &lt;disable_popup&gt;.
  IF sy-subrc = 0.
    &lt;disable_popup&gt; = &apos;CHEC&apos;. &quot; LSEWORKINGAREAFCK from CHECKLIST_EVALUATE line 2134
  ENDIF.
*  it_det_obj = get_inactive_objects( it_list ).
*  count = LINES( it_det_obj ).
  IF one_by_one IS INITIAL.
    it_det_obj = conv_list( it_list ).
*    it_det_obj = get_inactive_objects( it_list ).
    CALL FUNCTION &apos;RS_MASS_ACTIVATION&apos;
      EXPORTING
        p_wb_manager = _wb_manager
      TABLES
        OBJECTS      = it_det_obj.
  ELSE.
    it_det_obj = conv_list( it_list ).
    LOOP AT it_det_obj ASSIGNING &lt;obj&gt;.
      CLEAR it_obj.
      APPEND &lt;obj&gt; TO it_obj.
      CALL FUNCTION &apos;RS_MASS_ACTIVATION&apos;
        EXPORTING
          p_wb_manager = _wb_manager
        TABLES
          OBJECTS      = it_obj.
    ENDLOOP.
  ENDIF.
  check_inactive_objects( CHANGING obj_list = it_list ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="ACTIVATE_OBJECTS" EXPOSURE="1" STATE="1" EDITORDER="2 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Activate Objects (not DDIC)"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="ITEMS" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_ITEMS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Detailled list of object in Working area"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="PROGRAMS" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_MAINPROGS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="List of main programs"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  FIELD-SYMBOLS:
    &lt;it&gt; LIKE LINE OF it_items,
    &lt;mp&gt; LIKE LINE OF programs.

* Code from LSEWORKINGAREAFGE (form generate_active_object)
  DATA: l_w_area TYPE tt_items,
        l_w_items TYPE tt_items,
        l_master TYPE rsnewleng-programm,
        BEGIN OF l_dynp_id,
          prog TYPE progname,
          dnum TYPE dynpronr,
        END OF l_dynp_id,
        message(240) TYPE c,
        l_page TYPE seu_objkey,
        l_imp_name TYPE exit_imp,
        l_navigate TYPE sy-calld,
        l_subrc TYPE sy-subrc,
        l_clskey TYPE seoclskey,
        l_wapd_class TYPE seoclskey-clsname
                   VALUE &apos;CL_O2_API_APPLICATION&apos;,
        l_sfpf_class TYPE seoclskey-clsname
                   VALUE &apos;CL_FP_WB_HELPER&apos;,
        l_appl TYPE o2applname,
        l_obj_name TYPE e071-obj_name,
        l_exception TYPE REF TO cx_root,
        l_message_text TYPE string.

  LOOP AT programs ASSIGNING &lt;mp&gt;.
    IF &lt;mp&gt;-master &lt;&gt; l_master.
      l_master = &lt;mp&gt;-master.
      CHECK &lt;mp&gt;-error IS INITIAL.
      CHECK &lt;mp&gt;-include(1) &lt;&gt; &apos;&lt;&apos; AND
            &lt;mp&gt;-include(1) &lt;&gt; &apos;&gt;&apos;.
      CASE &lt;mp&gt;-object.
        WHEN &apos;REPS&apos;.
*          data: l_with_dialog type c.
*          if g_no_dialog is initial.
*            l_with_dialog = &apos;X&apos;.
*          endif.
          CALL FUNCTION &apos;REPS_OBJECT_GENERATE&apos;
            EXPORTING
              i_program        = l_master
*              i_with_dialog    = l_with_dialog
            IMPORTING
              o_gen_message    = message
              o_gen_subrc      = l_subrc
              o_navigate       = l_navigate
*              o_cancel         = g_cancel_flag
            EXCEPTIONS
              syntax_error     = 1
              generation_error = 2
              OTHERS           = 3.
          IF l_subrc &lt;&gt; 0 OR sy-subrc &lt;&gt; 0.
*            PERFORM dequeue_objects.
*            IF l_subrc &gt;= 8.
** Hier hat ein Roll-Back stattgefunden und hoffentlich nur hier!!!***JR
*              CALL FUNCTION &apos;RS_WORKING_AREA_INIT&apos;
*                EXPORTING
*                  force_initialisation = &apos;X&apos;.
*            ENDIF.
*            IF NOT l_navigate IS INITIAL.
*              PERFORM navigate_to_object.
*            ENDIF.
*            IF l_subrc &gt;= 8.
*              MESSAGE e826(eu) RAISING execution_error.
*            ENDIF.
          ENDIF.
        WHEN &apos;CREP&apos; OR &apos;CPUB&apos; OR &apos;CPRI&apos; OR &apos;CPRO&apos; OR &apos;METH&apos;
             OR &apos;CINC&apos; OR &apos;CLAS&apos;.
          l_clskey = l_master.
          CALL FUNCTION &apos;SEO_CLASS_GENERATE_LOAD&apos;
            EXPORTING
              clskey             = l_clskey
            EXCEPTIONS
              syntax_error       = 1
              generation_failure = 2
              OTHERS             = 3.
          IF sy-subrc &lt;&gt; 0.
*            IF NOT sy-msgid IS INITIAL.
*              g_cancel_flag = &apos;3&apos;.
*              MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*            ENDIF.
          ENDIF.
        WHEN &apos;INTF&apos;.
          l_clskey = l_master.
          CALL FUNCTION &apos;SEO_INTERFACE_GENERATE_LOAD&apos;
            EXPORTING
              intkey             = l_clskey
            EXCEPTIONS
              syntax_error       = 1
              generation_failure = 2
              OTHERS             = 3.
          IF sy-subrc &lt;&gt; 0.
*            IF NOT sy-msgid IS INITIAL.
*              g_cancel_flag = &apos;3&apos;.
*              MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*            ENDIF.
          ENDIF.
        WHEN &apos;WAPD&apos; OR &apos;WAPA&apos;.
** O2-HTML-Seiten
          l_appl = &lt;it&gt;-obj_name.
          CALL METHOD (l_wapd_class)=&gt;generate_application
            EXPORTING
              p_application = l_appl
            EXCEPTIONS
              OTHERS        = 1.
          IF sy-subrc &lt;&gt; 0.
*            IF NOT sy-msgid IS INITIAL.
*              g_cancel_flag = &apos;3&apos;.
*              MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*            ENDIF.
          ENDIF.
        WHEN &apos;WDYN&apos; OR &apos;WDYD&apos; OR &apos;WDYV&apos; OR &apos;WDYC&apos;.
          l_obj_name = l_master.
          CALL FUNCTION &apos;WDY_WB_GENERATE&apos;
            EXPORTING
              p_object_name        = l_obj_name
              p_suppress_index_upd = &apos; &apos;
            EXCEPTIONS
              not_existing         = 1
              error_occured        = 2
              syntax_error         = 3
              OTHERS               = 4.
          IF sy-subrc &lt;&gt; 0.
*            PERFORM dequeue_objects.
*            IF NOT sy-msgid IS INITIAL.
*              g_cancel_flag = &apos;3&apos;.
*              MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*            ENDIF.
          ENDIF.

** Enhancement Objects:
        WHEN &apos;ENHO&apos; OR &apos;ENHC&apos; OR &apos;ENHS&apos; OR&apos;ENSC&apos;.
          l_obj_name = l_master.
          CALL FUNCTION &apos;ENH_WB_GENERATE&apos;
            EXPORTING
              p_object_name        = l_obj_name
              p_obj_type           = &lt;mp&gt;-object
              p_suppress_index_upd = &apos; &apos;
            EXCEPTIONS
              not_existing         = 1
              error_occured        = 2
              syntax_error         = 3
              OTHERS               = 4.
          IF sy-subrc &lt;&gt; 0.
*            PERFORM dequeue_objects.
*            IF NOT sy-msgid IS INITIAL.
*              g_cancel_flag = &apos;3&apos;.
*              MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*            ENDIF.
          ENDIF.


** Switch Framework:
        WHEN &apos;SFBF&apos; OR &apos;SFSW&apos; OR &apos;SFBS&apos; OR &apos;SF01&apos;.
          l_obj_name = l_master.
          CALL FUNCTION &apos;SFW_WB_GENERATE&apos;
            EXPORTING
              p_object_name        = l_obj_name
              p_obj_type           = &lt;mp&gt;-object
              p_suppress_index_upd = &apos; &apos;
            EXCEPTIONS
              not_existing         = 1
              error_occured        = 2
              syntax_error         = 3
              OTHERS               = 4.
          IF sy-subrc &lt;&gt; 0.
*            PERFORM dequeue_objects.
*            IF NOT sy-msgid IS INITIAL.
*              MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*            ENDIF.
          ENDIF.



        WHEN &apos;SFPI&apos;.
** Formularinterface
          l_obj_name = &lt;it&gt;-obj_name.
          TRY.
              CALL METHOD (l_sfpf_class)=&gt;interface_generate
                EXPORTING
                  i_name = l_obj_name.
            CATCH cx_fp_api_usage
                  cx_fp_api_repository
                  cx_fp_api_internal INTO l_exception.
              CLEAR l_message_text.
              l_message_text = l_exception-&gt;get_text( ).
*              IF NOT l_message_text IS INITIAL.
*                g_cancel_flag = &apos;3&apos;.
*                MESSAGE l_message_text TYPE &apos;E&apos;.
*              ENDIF.
          ENDTRY.
        WHEN &apos;SFPF&apos;.
** Formulare
          l_obj_name = &lt;it&gt;-obj_name.
          TRY.
              CALL METHOD (l_sfpf_class)=&gt;form_generate
                EXPORTING
                  i_name = l_obj_name.
            CATCH cx_fp_api_usage
                  cx_fp_api_repository
                  cx_fp_api_internal INTO l_exception.
              CLEAR l_message_text.
              l_message_text = l_exception-&gt;get_text( ).
*              IF NOT l_message_text IS INITIAL.
*                g_cancel_flag = &apos;3&apos;.
*                MESSAGE l_message_text TYPE &apos;E&apos;.
*              ENDIF.
          ENDTRY.
      ENDCASE.
    ENDIF.
  ENDLOOP.
  LOOP AT items ASSIGNING &lt;it&gt;.
    CASE &lt;it&gt;-object.
      WHEN &apos;DYNP&apos;.
        l_dynp_id = &lt;it&gt;-obj_name.
        CALL FUNCTION &apos;RS_SCRP_SERVICE&apos;
             EXPORTING
                  dynnr           = l_dynp_id-dnum
                  function        = swbm_c_op_activate
                  progname        = l_dynp_id-prog
                  suppress_checks = &apos; &apos;
*               p_wb_checklist  = l_checklist
             IMPORTING
                  error_subrc     = l_subrc
             EXCEPTIONS
                  illegal_value   = 1
                  not_exists      = 2
                  cancelled       = 3
                  OTHERS          = 4.
        IF sy-subrc &lt;&gt; 0 OR l_subrc &lt;&gt; 0 .
*          g_cancel_flag = &apos;X&apos;.
*          IF NOT sy-msgid IS INITIAL.
*            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
*                    RAISING execution_error.
*          ENDIF.
        ENDIF.
      WHEN &apos;CUAD&apos;.
        l_obj_name = &lt;it&gt;-obj_name.
        CALL FUNCTION &apos;CUAD_OBJECT_GENERATE&apos;
          EXPORTING
            object_name       = l_obj_name
          EXCEPTIONS
            generation_failed = 1
            OTHERS            = 2.
        IF sy-subrc &lt;&gt; 0.
*          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
*                  RAISING execution_error.
        ENDIF.
      WHEN &apos;WAPP&apos;.
        l_page = &lt;it&gt;-obj_name.
        CALL FUNCTION &apos;O2_GENERATE_PAGE&apos;
          EXPORTING
            p_composite_name = l_page
          EXCEPTIONS
            not_found        = 1
            error_occured    = 2
            OTHERS           = 3.
        IF sy-subrc &lt;&gt; 0.
*          g_cancel_flag = &apos;3&apos;.
*          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.
      WHEN &apos;SXCI&apos;.
        l_imp_name =  &lt;it&gt;-obj_name.
        CALL FUNCTION &apos;SXO_IMPL_ACTIVE&apos;
          EXPORTING
            imp_name                  = l_imp_name
          EXCEPTIONS
            badi_not_existing         = 1
            imp_not_existing          = 2
            already_active            = 3
            data_inconsistency        = 4
            activation_not_admissable = 5
            action_canceled           = 6
            access_failure            = 7
            OTHERS                    = 8.
        IF sy-subrc &lt;&gt; 0.
*          g_cancel_flag = &apos;3&apos;.
*          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.
    ENDCASE.
  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="ADD_OBJ_TO_WA" EXPOSURE="1" STATE="1" EDITORDER="6 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Add objects to Work area"/>
    </TEXTS>
    <SOURCE>`
  FIELD-SYMBOLS &lt;wa&gt;   LIKE LINE OF it_obj_list.

  LOOP AT it_obj_list ASSIGNING &lt;wa&gt;.
    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
      EXPORTING
        object                  = &lt;wa&gt;-object
        obj_name                = &lt;wa&gt;-obj_name
*       DELETED_FLAG            = &apos; &apos;
*     IMPORTING
*       OBJECT_INSERTED         =
      EXCEPTIONS
        wrong_object_name       = 1
        OTHERS                  = 2
              .
    IF sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CHECK_INACTIVE_OBJECTS" EXPOSURE="2" STATE="1" EDITORDER="4 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get inactive objects"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="OBJ_LIST" CMPTYPE="1" EDITORDER="1 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TT_OBJLIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Objects list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA my_obj LIKE obj_list.
  DATA inact TYPE tt_items.
  FIELD-SYMBOLS &lt;obj&gt; LIKE LINE OF obj_list.

  LOOP AT obj_list ASSIGNING &lt;obj&gt;.
    REFRESH: my_obj, inact.   APPEND &lt;obj&gt; TO my_obj.
* Get all inactive Objects of List
    CALL FUNCTION &apos;RS_INACTIVE_OBJECTS_WARNING&apos;
      EXPORTING
        suppress_protocol               = &apos;X&apos;
*     WITH_PROGRAM_INCLUDES           = &apos; &apos;
*     SUPPRESS_DICTIONARY_CHECK       = &apos; &apos;
      TABLES
        p_e071                          = my_obj
*     P_XMSG                          =
        p_dwinactiv                     = inact.
*     USERNAME                        =
    IF inact IS INITIAL.    DELETE obj_list.    ENDIF.
  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="COMPKEYS_2_OBJLIST" EXPOSURE="1" STATE="1" EDITORDER="8 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Convert List from Compkeys to Objlist"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="KEYS" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_COMPKEYS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component List"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TT_OBJLIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Objects list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA          s_obj LIKE LINE OF result.
  FIELD-SYMBOLS &lt;k&gt;   LIKE LINE OF keys.
  LOOP AT keys ASSIGNING &lt;k&gt;.   CLEAR s_obj.  s_obj-object = &lt;k&gt;-type.    s_obj-obj_name = &lt;k&gt;-name.  APPEND s_obj TO result.   ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDTYPE="2">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CONSTRUCTOR"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="OBJ_LIST" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_COMPKEYS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Objects list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  it_obj_list = compkeys_2_objlist( obj_list ).
  SORT it_obj_list BY object obj_name.
  DELETE ADJACENT DUPLICATES FROM it_obj_list COMPARING object obj_name.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONV_LIST" EXPOSURE="1" STATE="1" EDITORDER="7 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Convert List format"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="ITEM_LIST" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TT_ITEMS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Detailled list of object in Working area"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJ_LIST" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_OBJLIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Objects list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA _item LIKE LINE OF item_list.
  FIELD-SYMBOLS &lt;obj&gt;   LIKE LINE OF obj_list.
  LOOP AT obj_list ASSIGNING &lt;obj&gt;.   MOVE-CORRESPONDING &lt;obj&gt; TO _item.    APPEND _item TO item_list.    ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_INACTIVE_OBJECTS" EXPOSURE="2" STATE="1" EDITORDER="3 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get inactive objects"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="INACT" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TT_DET_OBJ"/>
     <ITEM SCONAME="OBJ_LIST" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_OBJLIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Objects list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
* Get all inactive Objects of List
  CALL FUNCTION &apos;RS_INACTIVE_OBJECTS_WARNING&apos;
    EXPORTING
      SUPPRESS_PROTOCOL               = &apos;X&apos;
*     WITH_PROGRAM_INCLUDES           = &apos; &apos;
*     SUPPRESS_DICTIONARY_CHECK       = &apos; &apos;
    TABLES
      P_E071                          = OBJ_LIST
*     P_XMSG                          =
      P_DWINACTIV                     = INACT.
*     USERNAME                        =</SOURCE>
   </ITEM>
   <ITEM CMPNAME="OBJLIST_2_COMPKEYS" EXPOSURE="1" STATE="1" EDITORDER="9 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Convert List from Objlist to Compkeys"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="KEYS" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_OBJLIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Objects list"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TT_COMPKEYS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component List"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA          s_obj LIKE LINE OF result.
  FIELD-SYMBOLS &lt;k&gt;   LIKE LINE OF keys.
  LOOP AT keys ASSIGNING &lt;k&gt;.   CLEAR s_obj.  s_obj-type = &lt;k&gt;-object.    s_obj-name = &lt;k&gt;-obj_name.    APPEND s_obj TO result.   ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SPLIT_LIST" EXPOSURE="1" STATE="1" EDITORDER="1 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Split list into DDIC and objects"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DDIC" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TT_OBJLIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Objects list"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJ_LIST" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_OBJLIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Objects list"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="PROG_LIST" CMPTYPE="1" EDITORDER="3 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TT_OBJLIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Objects list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  FIELD-SYMBOLS &lt;obj&gt;   LIKE LINE OF obj_list.
  LOOP AT obj_list ASSIGNING &lt;obj&gt;.

    IF &lt;obj&gt;-object = &apos;DTEL&apos; OR
       &lt;obj&gt;-object = &apos;VIEW&apos; OR
       &lt;obj&gt;-object = &apos;DOMA&apos; OR
       &lt;obj&gt;-object = &apos;TTYP&apos; OR
       &lt;obj&gt;-object = &apos;INDX&apos; OR
       &lt;obj&gt;-object = &apos;XINX&apos; OR
       &lt;obj&gt;-object = &apos;SHLP&apos; OR
       &lt;obj&gt;-object = &apos;ENQU&apos; OR
       &lt;obj&gt;-object = &apos;MCOB&apos; OR
       &lt;obj&gt;-object = &apos;TABL&apos; OR
       &lt;obj&gt;-object = &apos;SQLT&apos; OR
       &lt;obj&gt;-object = &apos;STRU&apos;.
      APPEND &lt;obj&gt; TO ddic.
    ELSE.
      APPEND &lt;obj&gt; TO prog_list.
    ENDIF.
  ENDLOOP.</SOURCE>
   </ITEM>
  </METHODS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEWOR" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SWBM" EXPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TT_DET_OBJ" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4">tt_det_obj TYPE STANDARD TABLE OF dwinactiv WITH NON-UNIQUE DEFAULT KEY</ITEM>
   <ITEM CMPNAME="TT_ITEMS" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="4">
    tt_items TYPE STANDARD TABLE OF sewor_working_area WITH NON-UNIQUE DEFAULT KEY
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Detailled list of object in Working area"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_MAINPROGS" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="4">
    tt_mainprogs TYPE STANDARD TABLE OF t_mainprog WITH NON-UNIQUE DEFAULT KEY
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="List of main programs"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_OBJLIST" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4">
    TT_OBJLIST type STANDARD TABLE OF E071 with NON-UNIQUE DEFAULT KEY
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Objects list"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="T_MAINPROG" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="4">
    BEGIN OF t_mainprog,
      master TYPE d010inc-master,
      include TYPE d010inc-include,
      object TYPE e071-object,
      error(1) TYPE c,
      switch_state(1) TYPE c,
    END OF t_mainprog
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Line of mainprogram"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
