<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="A1E504E5EA1B6BDEEB29E520EA72BF3F" CODE_SIGNATURE="2516DA3FEECE85BB74B6D3F9F5649278" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_OBJECT" TYPE="CLAS" VERSION="1.01">
 <DEPENDENCIES>
  <ITEM TYPE="CLAS" NAME="ZAPLINK_CONNECTOR_"/>
 </DEPENDENCIES>
 <DIRECTORY DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X" MSG_ID="ZAPLINK_OBJECT">
   <INHERITANCE REFCLSNAME="ZAPLINK_CONNECTOR_" STATE="1"/>
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="ZAPLink Class &amp; Interface connector">
     <DOCUMENTATION TDFRELES="700" TDLRELES="700" TDLINESIZE="072">U1&amp;FUNCTIONALITY&amp;
ASConnector for :
AS,,- CLAS : ABAP Object classes
AS,,- INTF : ABAP Object interfaces
U1&amp;RELATIONS&amp;
ASIs part of ZAP Link Framework as Official Connector.
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AShttps://code.google.com/p/zaplink/wiki/Connector
U1History
ASVersion 1.00 :
AS,,Full handle of class and interface ABAP Object
ASVersion 1.01 :
AS,,Documentation Sgment removed.
AS,,Introducing : Screen &amp; Menu data</DOCUMENTATION>
    </ITEM>
   </TEXTS>
  </A0_MAINDATA>
  <ATTRIBUTS>
   <ITEM CMPNAME="BALLOG_SUBOBJECT" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;CNX_OBJECT&apos;" TYPTYPE="1" TYPE="BALSUBOBJ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Application Log: Subobject"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_UUID" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;39AC0A4B07A5A05AE1000000AC120173&apos;" TYPTYPE="1" TYPE="TD_CONNUUID">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="UUID for connector Object"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_VER" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;1.01&apos;" TYPTYPE="1" TYPE="TD_CONNVER">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Connector Version"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <FRIENDS>
   <ITEM REFCLSNAME="ZAPLINK_OBJECT_DATA" STATE="1"/>
  </FRIENDS>
  <LOCAL>
   <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* IMPLEMENTATION OR PRIVATE METHOD&apos;S SIGNATURE

*TYPE-POOLS: seoo, seos, seot.
*INCLUDE lseokd01.</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* LOCAL HELPER CLASSES

*INCLUDE lseokp01.</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* IN THE IMPLEMENTATION PART OF THE CLASS

INCLUDE zaplink_macros.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CHECK_CLAS_SECTIONS" EXPOSURE="1" STATE="1" EDITORDER="6 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Regenerate Class sections if needed"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CLASS" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="T_FM_DATA">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Class Data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA pubsec_source TYPE seo_section_source.
  DATA prosec_source TYPE seo_section_source.
  DATA prisec_source TYPE seo_section_source.
  DATA code          TYPE tt_abaprawsource.
  DATA classkey      TYPE seoclskey.

  classkey-clsname = class-class-clsname.

  CALL FUNCTION &apos;SEO_CLASS_GENERATE_SECTIONS&apos;
    EXPORTING
      clskey                               = classkey
      public                               = seox_true
      protected                            = seox_true
      private                              = seox_true
*      SUPPRESS_CORR                        = SEOX_FALSE
      return_generated_sections_only       = seox_true
*      TYPEINFO                             =
*      LINE_SIZE                            = 255
*      SUPPRESS_INDEX_UPDATE                = SEOX_FALSE
    IMPORTING
      pubsec_source                        = pubsec_source
      prosec_source                        = prosec_source
      prisec_source                        = prisec_source
    EXCEPTIONS
      not_existing                         = 1
      model_only                           = 2
      public_sec_not_generated             = 3
      protected_sec_not_generated          = 4
      private_sec_not_generated            = 5
      public_sec_not_initialised           = 6
      protected_sec_not_initialised        = 7
      private_sec_not_initialised          = 8
      _internal_class_not_existing         = 9
      OTHERS                               = 10.
  IF sy-subrc &lt;&gt; 0.
    o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_CLASS_GENERATE_SECTIONS&apos;
                                                subrc = sy-subrc
                                            classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
    application_log-&gt;add_symsg( ).
    RAISE EXCEPTION o_mycx.
  ENDIF.

  code = get_prog_rawsource( class-includes-pubsec ).
  IF pubsec_source = code.
    CLEAR pubsec_source.
  ELSE.
    SET EXTENDED CHECK OFF.
    IF 1 = 2. MESSAGE w003 WITH text-pub classkey. ENDIF.
    SET EXTENDED CHECK ON.
    CALL METHOD application_log-&gt;add_warning
      EXPORTING
*            id_msgid     =
        id_msgno     = &apos;003&apos;
          id_msgv1     = &apos;Public section&apos;(pub)
        id_msgv2     = classkey.
*            id_msgv3     =
*            id_msgv4     =
*            id_detlevel  =
*            id_probclass =
  ENDIF.
  code = get_prog_rawsource( class-includes-prosec ).
  IF prosec_source = code.
    CLEAR prosec_source.
  ELSE.
    SET EXTENDED CHECK OFF.
    IF 1 = 2. MESSAGE w003 WITH text-pro classkey. ENDIF.
    SET EXTENDED CHECK ON.
    CALL METHOD application_log-&gt;add_warning
      EXPORTING
*        id_msgid     =
        id_msgno     = &apos;003&apos;
        id_msgv1     = &apos;Protected section&apos;(pro)
        id_msgv2     = classkey.
*        id_msgv3     =
*        id_msgv4     =
*        id_detlevel  =
*        id_probclass =
  ENDIF.
  code = get_prog_rawsource( class-includes-prisec ).
  IF prisec_source = code.
    CLEAR prisec_source.
  ELSE.
    SET EXTENDED CHECK OFF.
    IF 1 = 2. MESSAGE w003 WITH text-pri classkey. ENDIF.
    SET EXTENDED CHECK ON.
    CALL METHOD application_log-&gt;add_warning
      EXPORTING
*        id_msgid     =
        id_msgno     = &apos;003&apos;
        id_msgv1     = &apos;Private section&apos;(pri)
        id_msgv2     = classkey.
*        id_msgv3     =
*        id_msgv4     =
*        id_detlevel  =
*        id_probclass =
  ENDIF.
  IF NOT pubsec_source IS INITIAL OR NOT prosec_source IS INITIAL OR NOT prisec_source IS INITIAL.
    CALL FUNCTION &apos;SEO_CLASS_GENERATE_SECTIONS&apos;
      EXPORTING
        clskey                               = classkey
        public                               = seox_true
        protected                            = seox_true
        private                              = seox_true
*         SUPPRESS_CORR                        = SEOX_FALSE
*         return_generated_sections_only       = seox_false
*         TYPEINFO                             =
*         LINE_SIZE                            = 255
*         SUPPRESS_INDEX_UPDATE                = SEOX_FALSE
*        IMPORTING
*          pubsec_source                        = pubsec_source
*          prosec_source                        = prosec_source
*          prisec_source                        = prisec_source
      EXCEPTIONS
        not_existing                         = 1
        model_only                           = 2
        public_sec_not_generated             = 3
        protected_sec_not_generated          = 4
        private_sec_not_generated            = 5
        public_sec_not_initialised           = 6
        protected_sec_not_initialised        = 7
        private_sec_not_initialised          = 8
        _internal_class_not_existing         = 9
        OTHERS                               = 10.
    IF sy-subrc &lt;&gt; 0.
      o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_CLASS_GENERATE_SECTIONS&apos;
                                                  subrc = sy-subrc
                                              classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
      application_log-&gt;add_symsg( ).
      RAISE EXCEPTION o_mycx.
    ENDIF.
* Already a commi inside
*    CALL FUNCTION &apos;SEO_CLIF_SAVE_ALL&apos;
*      EXPORTING
*        cifkey                              = classkey
**       NO_SECTIONS                         = SEOX_FALSE
*        SECTIONS_ONLY                       = SEOX_true
**       SUPPRESS_CORR                       = SEOX_FALSE
**       SUPPRESS_REFACTORING_ENTRIES        = SEOX_FALSE
**       SUPPRESS_METHOD_GENERATION          = SEOX_FALSE
**       SUPPRESS_PUBSEC_GENERATION          = SEOX_FALSE
**       SUPPRESS_PROSEC_GENERATION          = SEOX_FALSE
**       SUPPRESS_PRISEC_GENERATION          = SEOX_FALSE
**       SUPPRESS_DOCU_DELETE                = SEOX_FALSE
**       SUPPRESS_MODIFICATION_SUPPORT       = SEOX_FALSE
**       DISABLE_MODIFICATION_SUPPORT        = SEOX_FALSE
**       GENERATE_IF_METHODS_INITIAL         = SEOX_FALSE
**       LINE_SIZE                           = 255
**       SUPPRESS_COMMIT                     = SEOX_FALSE
**       NOTEASS_MODE                        = SEOX_FALSE
**       SUPPRESS_INDEX_UPDATE               = SEOX_FALSE
**     IMPORTING
**       ERROR_OCCURRED                      =
**       PUBLIC_SAVED                        =
**       PRIVATE_SAVED                       =
**       PROTECTED_SAVED                     =
**     CHANGING
**       CORRNR                              =
**       DEVCLASS                            =
**       GENFLAG                             =
*      EXCEPTIONS
*        NOT_EXISTING                        = 1
*        NOTHING_TO_DO                       = 2
*        ACCESS_ERROR                        = 3
*        DB_ERROR                            = 4
*        ERROR_IN_CODE_GENERATION            = 5
*        OTHERS                              = 6.
*    IF sy-subrc &lt;&gt; 0.
*      o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_CLIF_SAVE_ALL&apos;
*                                                  subrc = sy-subrc
*                                              classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
*      application_log-&gt;add_symsg( ).
*      RAISE EXCEPTION o_mycx.
*    ENDIF.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CHECK_INTF_SECTION" EXPOSURE="1" STATE="1" EDITORDER="7 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Regenerate Interface section if needed"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="INTERFACE" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="T_FM_DATA">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Class Data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA pubsec_source TYPE seo_section_source.
  DATA code          TYPE tt_abaprawsource.
  DATA intkey        TYPE seoclskey.

  intkey-clsname = interface-interface-clsname.
  CALL FUNCTION &apos;SEO_INTERFACE_GENERATE_SECTION&apos;
    EXPORTING
      intkey                               = intkey
      return_generated_sections_only       = seox_true
*     TYPEINFO                             =
*     LINE_SIZE                            = 255
*     SUPPRESS_INDEX_UPDATE                = SEOX_FALSE
    IMPORTING
      interface_source                     = pubsec_source
    EXCEPTIONS
      not_existing                         = 1
      model_only                           = 2
      interf_section_not_generated         = 3
      interf_section_not_initialised       = 4
      OTHERS                               = 5.
  IF sy-subrc &lt;&gt; 0.
    o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_INTERFACE_GENERATE_SECTION&apos;
                                                subrc = sy-subrc
                                            classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
    application_log-&gt;add_symsg( ).
    RAISE EXCEPTION o_mycx.
  ENDIF.

  code = get_prog_rawsource( interface-includes-intfsec ).
  IF pubsec_source = code.
    CLEAR pubsec_source.
  ELSE.
    SET EXTENDED CHECK OFF.
    IF 1 = 2. MESSAGE w003 WITH text-pub intkey. ENDIF.
    SET EXTENDED CHECK ON.
    CALL METHOD application_log-&gt;add_warning
      EXPORTING
*        id_msgid     =
        id_msgno     = &apos;003&apos;
        id_msgv1     = &apos;Public section&apos;(pub)
        id_msgv2     = intkey.
*        id_msgv3     =
*            id_msgv4     =
*            id_detlevel  =
*            id_probclass =
  ENDIF.
  IF NOT pubsec_source IS INITIAL.
    CALL FUNCTION &apos;SEO_INTERFACE_GENERATE_SECTION&apos;
      EXPORTING
        intkey                               = intkey
        return_generated_sections_only       = seox_false
*      TYPEINFO                             =
*      LINE_SIZE                            = 255
*      SUPPRESS_INDEX_UPDATE                = SEOX_FALSE
*    IMPORTING
*      interface_source                     = pubsec_source
      EXCEPTIONS
        not_existing                         = 1
        model_only                           = 2
        interf_section_not_generated         = 3
        interf_section_not_initialised       = 4
        OTHERS                               = 5.
    IF sy-subrc &lt;&gt; 0.
      o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_INTERFACE_GENERATE_SECTION&apos;
                                                  subrc = sy-subrc
                                              classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
      application_log-&gt;add_symsg( ).
      RAISE EXCEPTION o_mycx.
    ENDIF.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="3 " MTDTYPE="2">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
  DATA type LIKE LINE OF supported_types.

  CALL METHOD super-&gt;constructor.
  mac_create_log application_log ballog_subobject space.
  application_log-&gt;msgid = &apos;ZAPLINK_OBJECT&apos;.
  type-type = zaplink_object_data=&gt;object_types-class.       INSERT type INTO TABLE supported_types.
  type-type = zaplink_object_data=&gt;object_types-interface.    INSERT type INTO TABLE supported_types.

  uuid = _uuid.
  version = _ver.
  CALL FUNCTION &apos;SEO_BUFFER_INIT&apos;.        &quot; Init buffers</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXPORT_FROM_SAP_CLASS" EXPOSURE="1" STATE="1" EDITORDER="3 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Export Class from SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJECT" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_CLASS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Class data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA obj_mask   TYPE doku_obj.
  DATA docu_key   TYPE zaplink_object_data=&gt;ts_doc_key.
  DATA classkey   TYPE seoclskey.
  DATA _d         TYPE t_fm_data.

  TRY.
      CHECK component-&gt;get_type( ) = zaplink_object_data=&gt;object_types-class.

      classkey-clsname = component-&gt;get_name( ).
      CALL FUNCTION &apos;SEO_BUFFER_REFRESH&apos;.
      CALL FUNCTION &apos;SEO_CLASS_GET&apos;
        EXPORTING
          clskey       = classkey
        IMPORTING
          class        = _d-class
        EXCEPTIONS
          not_existing = 1
          deleted      = 2
          is_interface = 3
          model_only   = 4
          OTHERS       = 5.
      IF sy-subrc &lt;&gt; 0.
        o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_CLASS_GET&apos;
                                                    subrc = sy-subrc
                                                classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
        application_log-&gt;add_symsg( ).
        RAISE EXCEPTION o_mycx.
      ENDIF.

      load_clas( EXPORTING classkey = classkey
                        CHANGING _d = _d ).

* Includes
      _d-includes = get_includes( _d-class-clsname ).

* Issue 71 : Code signature different due to slight change in sections
      check_clas_sections( _d ).
* Issue 71 : Code signature different due to implicite type-pool declaration within public, protected or private section
* From SEO_CLIF_SAVE_ALL
** Clean-up unused implicite type pool usages (MS 20060921)
*      DATA type_pool_usage_cleaner TYPE REF TO lcl_type_pool_usage_cleaner.
*      TRY.
*          type_pool_usage_cleaner = lcl_type_pool_usage_cleaner=&gt;create( classkey ).
*          type_pool_usage_cleaner-&gt;clean_up( ).
*        CATCH lcx_internal_error.                       &quot;#EC NO_HANDLER
**     No handler needed here =&gt; default behavior
*      ENDTRY.

*      DELETE _d-typeusages WHERE version &lt;&gt; _d-class-version.   &quot; Remove type usage of the wrong version
* Type-pools declaration might be present within method&apos;s declaration section (auto added by SAP when needed).
* Have to detect it, add type pool to type pool list and delete type pool declaration
      DATA code      TYPE tt_abaprawsource.
      DATA new_code  TYPE tt_abaprawsource.
      DATA t_typegrp TYPE seot_typepusages_r.
      DATA s_tgroup  LIKE LINE OF t_typegrp.
      DATA d_flag    TYPE abap_bool.
      DATA s_grp_key TYPE seotpukey.

      code = get_prog_rawsource( _d-includes-pubsec ).
      search_type_pool( EXPORTING sourcecode = code
                                         typepools = _d-typeusages
                                            public = abap_true
                          IMPORTING new_sourcecode = new_code
                                     new_typepools = t_typegrp ).
      IF NOT new_code IS INITIAL.
        set_prog_rawsource( program = _d-includes-pubsec
                                raw = new_code ).
        d_flag = abap_true.
      ENDIF.
      IF NOT t_typegrp IS INITIAL.
        SORT t_typegrp BY typegroup.  DELETE ADJACENT DUPLICATES FROM t_typegrp COMPARING typegroup.
        LOOP AT t_typegrp INTO s_tgroup.
          s_tgroup-clsname = _d-class-clsname.
          s_tgroup-version = _d-class-version.
          READ TABLE _d-typeusages TRANSPORTING NO FIELDS WITH KEY typegroup = s_tgroup-typegroup.
          IF sy-subrc = 0.
            MOVE-CORRESPONDING s_tgroup TO s_grp_key.
            CALL FUNCTION &apos;SEO_TYPEPUSAGE_DELETE_W_DEPS&apos;
              EXPORTING
                tplkey        = s_grp_key
                save          = seox_false
              EXCEPTIONS
                not_existing  = 1
                is_clsdeferrd = 2
                is_intdeferrd = 3
                not_deleted   = 4
                db_error      = 5
                OTHERS        = 6.
            IF sy-subrc &lt;&gt; 0.
              o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_TYPEPUSAGE_DELETE_W_DEPS&apos;
                                                          subrc = sy-subrc
                                                      classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
              application_log-&gt;add_symsg( ).
              RAISE EXCEPTION o_mycx.
            ENDIF.
          ENDIF.
          CALL FUNCTION &apos;SEO_TYPEPUSAGE_CREATE_F_DATA&apos;
            EXPORTING
              save                    = seox_false
*              NOT_AFFECT_PUBLIC       = SEOX_FALSE
            CHANGING
              typepusage              = s_tgroup
            EXCEPTIONS
              existing                = 1
              is_clsdeferrd           = 2
              is_intdeferrd           = 3
              not_created             = 4
              db_error                = 5
              OTHERS                  = 6.
          IF sy-subrc &lt;&gt; 0.
            o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_TYPEPUSAGE_CREATE_F_DATA&apos;
                                                        subrc = sy-subrc
                                                    classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
            application_log-&gt;add_symsg( ).
            RAISE EXCEPTION o_mycx.
          ENDIF.
          INSERT s_tgroup INTO TABLE _d-typeusages.
          SET EXTENDED CHECK OFF.
          IF 1 = 2. MESSAGE w002 WITH s_tgroup-typegroup _d-class-clsname text-pub. ENDIF.
          SET EXTENDED CHECK ON.
          CALL METHOD application_log-&gt;add_warning
            EXPORTING
*              id_msgid     =
              id_msgno     = &apos;002&apos;
              id_msgv1     = s_tgroup-typegroup
              id_msgv2     = _d-class-clsname
              id_msgv3     = &apos;Public section&apos;(pub)
*              id_msgv4     =
*              id_detlevel  =
*              id_probclass =
              .
          d_flag = abap_true.
        ENDLOOP.
      ENDIF.

      code = get_prog_rawsource( _d-includes-prosec ).
      search_type_pool( EXPORTING sourcecode = code
                                   typepools = _d-typeusages
                    IMPORTING new_sourcecode = new_code
                               new_typepools = t_typegrp ).
      IF NOT new_code IS INITIAL.
        set_prog_rawsource( program = _d-includes-prosec
                                raw = new_code ).
        d_flag = abap_true.
      ENDIF.
      IF NOT t_typegrp IS INITIAL.
        SORT t_typegrp BY typegroup.  DELETE ADJACENT DUPLICATES FROM t_typegrp COMPARING typegroup.
        LOOP AT t_typegrp INTO s_tgroup.
          s_tgroup-clsname = _d-class-clsname.
          s_tgroup-version = _d-class-version.
          READ TABLE _d-typeusages TRANSPORTING NO FIELDS WITH KEY typegroup = s_tgroup-typegroup.
          IF sy-subrc = 0.
            MOVE-CORRESPONDING s_tgroup TO s_grp_key.
            CALL FUNCTION &apos;SEO_TYPEPUSAGE_DELETE_W_DEPS&apos;
              EXPORTING
                tplkey        = s_grp_key
                save          = seox_false
              EXCEPTIONS
                not_existing  = 1
                is_clsdeferrd = 2
                is_intdeferrd = 3
                not_deleted   = 4
                db_error      = 5
                OTHERS        = 6.
            IF sy-subrc &lt;&gt; 0.
              o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_TYPEPUSAGE_DELETE_W_DEPS&apos;
                                                          subrc = sy-subrc
                                                      classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
              application_log-&gt;add_symsg( ).
              RAISE EXCEPTION o_mycx.
            ENDIF.
          ENDIF.
          CALL FUNCTION &apos;SEO_TYPEPUSAGE_CREATE_F_DATA&apos;
            EXPORTING
              save                    = seox_false
*              NOT_AFFECT_PUBLIC       = SEOX_FALSE
            CHANGING
              typepusage              = s_tgroup
            EXCEPTIONS
              existing                = 1
              is_clsdeferrd           = 2
              is_intdeferrd           = 3
              not_created             = 4
              db_error                = 5
              OTHERS                  = 6.
          IF sy-subrc &lt;&gt; 0.
            o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_TYPEPUSAGE_CREATE_F_DATA&apos;
                                                        subrc = sy-subrc
                                                    classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
            application_log-&gt;add_symsg( ).
            RAISE EXCEPTION o_mycx.
          ENDIF.
          INSERT s_tgroup INTO TABLE _d-typeusages.
          SET EXTENDED CHECK OFF.
          IF 1 = 2. MESSAGE w002 WITH s_tgroup-typegroup _d-class-clsname text-pro. ENDIF.
          SET EXTENDED CHECK ON.
          CALL METHOD application_log-&gt;add_warning
            EXPORTING
*              id_msgid     =
              id_msgno     = &apos;002&apos;
              id_msgv1     = s_tgroup-typegroup
              id_msgv2     = _d-class-clsname
              id_msgv3     = &apos;Protected section&apos;(pro)
*              id_msgv4     =
*              id_detlevel  =
*              id_probclass =
              .
          d_flag = abap_true.
        ENDLOOP.
      ENDIF.
      code = get_prog_rawsource( _d-includes-prisec ).
      search_type_pool( EXPORTING sourcecode = code
                                   typepools = _d-typeusages
                    IMPORTING new_sourcecode = new_code
                               new_typepools = t_typegrp ).
      IF NOT new_code IS INITIAL.
        set_prog_rawsource( program = _d-includes-prisec
                                raw = new_code ).
        d_flag = abap_true.
      ENDIF.
      IF NOT t_typegrp IS INITIAL.
        SORT t_typegrp BY typegroup.  DELETE ADJACENT DUPLICATES FROM t_typegrp COMPARING typegroup.
        LOOP AT t_typegrp INTO s_tgroup.
          s_tgroup-clsname = _d-class-clsname.
          s_tgroup-version = _d-class-version.
          READ TABLE _d-typeusages TRANSPORTING NO FIELDS WITH KEY typegroup = s_tgroup-typegroup.
          IF sy-subrc = 0.
            MOVE-CORRESPONDING s_tgroup TO s_grp_key.
            CALL FUNCTION &apos;SEO_TYPEPUSAGE_DELETE_W_DEPS&apos;
              EXPORTING
                tplkey        = s_grp_key
                save          = seox_false
              EXCEPTIONS
                not_existing  = 1
                is_clsdeferrd = 2
                is_intdeferrd = 3
                not_deleted   = 4
                db_error      = 5
                OTHERS        = 6.
            IF sy-subrc &lt;&gt; 0.
              o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_TYPEPUSAGE_DELETE_W_DEPS&apos;
                                                          subrc = sy-subrc
                                                      classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
              application_log-&gt;add_symsg( ).
              RAISE EXCEPTION o_mycx.
            ENDIF.
          ENDIF.
          CALL FUNCTION &apos;SEO_TYPEPUSAGE_CREATE_F_DATA&apos;
            EXPORTING
              save                    = seox_false
*              NOT_AFFECT_PUBLIC       = SEOX_FALSE
            CHANGING
              typepusage              = s_tgroup
            EXCEPTIONS
              existing                = 1
              is_clsdeferrd           = 2
              is_intdeferrd           = 3
              not_created             = 4
              db_error                = 5
              OTHERS                  = 6.
          IF sy-subrc &lt;&gt; 0.
            o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_TYPEPUSAGE_CREATE_F_DATA&apos;
                                                        subrc = sy-subrc
                                                    classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
            application_log-&gt;add_symsg( ).
            RAISE EXCEPTION o_mycx.
          ENDIF.
          INSERT s_tgroup INTO TABLE _d-typeusages.
          SET EXTENDED CHECK OFF.
          IF 1 = 2. MESSAGE w002 WITH s_tgroup-typegroup _d-class-clsname text-pri. ENDIF.
          SET EXTENDED CHECK ON.
          CALL METHOD application_log-&gt;add_warning
            EXPORTING
*              id_msgid     =
              id_msgno     = &apos;002&apos;
              id_msgv1     = s_tgroup-typegroup
              id_msgv2     = _d-class-clsname
              id_msgv3     = &apos;Private section&apos;(pri)
*              id_msgv4     =
*              id_detlevel  =
*              id_probclass =
              .
          d_flag = abap_true.
        ENDLOOP.
      ENDIF.
      IF NOT d_flag IS INITIAL.
        CALL FUNCTION &apos;SEO_CLIF_SAVE_ALL&apos;
          EXPORTING
            cifkey                              = classkey
*           NO_SECTIONS                         = SEOX_FALSE
*           SECTIONS_ONLY                       = SEOX_FALSE
*           SUPPRESS_CORR                       = SEOX_FALSE
*           SUPPRESS_REFACTORING_ENTRIES        = SEOX_FALSE
*           SUPPRESS_METHOD_GENERATION          = SEOX_FALSE
*           SUPPRESS_PUBSEC_GENERATION          = SEOX_FALSE
*           SUPPRESS_PROSEC_GENERATION          = SEOX_FALSE
*           SUPPRESS_PRISEC_GENERATION          = SEOX_FALSE
*           SUPPRESS_DOCU_DELETE                = SEOX_FALSE
*           SUPPRESS_MODIFICATION_SUPPORT       = SEOX_FALSE
*           DISABLE_MODIFICATION_SUPPORT        = SEOX_FALSE
*           GENERATE_IF_METHODS_INITIAL         = SEOX_FALSE
*           LINE_SIZE                           = 255
*           SUPPRESS_COMMIT                     = SEOX_FALSE
*           NOTEASS_MODE                        = SEOX_FALSE
*           SUPPRESS_INDEX_UPDATE               = SEOX_FALSE
*         IMPORTING
*           ERROR_OCCURRED                      =
*           PUBLIC_SAVED                        =
*           PRIVATE_SAVED                       =
*           PROTECTED_SAVED                     =
*         CHANGING
*           CORRNR                              =
*           DEVCLASS                            =
*           GENFLAG                             =
          EXCEPTIONS
            not_existing                        = 1
            nothing_to_do                       = 2
            access_error                        = 3
            db_error                            = 4
            error_in_code_generation            = 5
            OTHERS                              = 6.
        IF sy-subrc &lt;&gt; 0.
          o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_CLIF_SAVE_ALL&apos;
                                                      subrc = sy-subrc
                                                  classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
          application_log-&gt;add_symsg( ).
          RAISE EXCEPTION o_mycx.
        ENDIF.
        load_clas( EXPORTING classkey = classkey
                          CHANGING _d = _d ).
      ENDIF.
* End of Issue 71

* Documentations
      docu_key-name = component-&gt;get_name( ).
      docu_key-other = &apos;*&apos;.
      obj_mask = docu_key.

      _d-documentation = zaplink_documentation=&gt;get( ids = zaplink_object_data=&gt;r_doc_ids-class
                                                  object = obj_mask ).

      CREATE OBJECT object.
      object-&gt;complete_data( CHANGING fm_data = _d ).
      _d-dynpros = get_dynpros( _d-includes-classpool ).    &quot; Issue 8
      _d-menupainter = get_menus( _d-includes-classpool ).  &quot; Issue 9
      _d-textspool = get_prog_textpool( _d-includes-classpool ). &quot; Issue 1
      object-&gt;from_data( _d ).
      object-&gt;_code_signature = get_class_signature( classkey ).

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXPORT_FROM_SAP_INTERFACE" EXPOSURE="1" STATE="1" EDITORDER="4 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Export Interface from SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJECT" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_INTERFACE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Class data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA obj_mask       TYPE doku_obj.
  DATA docu_key       TYPE zaplink_object_data=&gt;ts_doc_key.
  DATA classkey TYPE seoclskey.
  DATA _d       TYPE t_fm_data.

  TRY.

      CHECK component-&gt;get_type( ) = zaplink_object_data=&gt;object_types-interface.

      classkey-clsname = component-&gt;get_name( ).
      CALL FUNCTION &apos;SEO_INTERFACE_TYPEINFO_GET&apos;
        EXPORTING
          intkey                        = classkey
*     VERSION                       = SEOC_VERSION_INACTIVE
*     STATE                         = &apos;1&apos;
          with_master_language          = seox_true
          with_enhancements             = seox_true
*     READ_ACTIVE_ENHA              = SEOX_FALSE
        IMPORTING
          interface                     = _d-interface
          attributes                    = _d-attributes
          methods                       = _d-methods
          events                        = _d-events
          PARAMETERS                    = _d-parameters
          exceps                        = _d-exceps
          comprisings                   = _d-comprisings
          typepusages                   = _d-typeusages
          clsdeferrds                   = _d-clsdeferrds
          intdeferrds                   = _d-intdeferrds
          explore_comprisings           = _d-explore_comprisings
          aliases                       = _d-aliases
          types                         = _d-types
          enhancement_methods           = _d-enhancement_methods
          enhancement_attributes        = _d-enhancement_attributes
          enhancement_events            = _d-enhancement_events
          enhancement_comprisings       = _d-enhancement_comprisings
        EXCEPTIONS
          not_existing                  = 1
          is_class                      = 2
          model_only                    = 3
          OTHERS                        = 4.
      IF sy-subrc &lt;&gt; 0.
        o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_INTERFACE_TYPEINFO_GET&apos;
                                                    subrc = sy-subrc
                                                classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
        application_log-&gt;add_symsg( ).
        RAISE EXCEPTION o_mycx.
      ENDIF.

* Includes
      _d-includes = get_includes( _d-interface-clsname ).

* Issue 71 : Code signature different due to slight change in sections
      check_intf_section( _d ).

* Documentations
      docu_key-name = component-&gt;get_name( ).
      docu_key-other = &apos;*&apos;.
      obj_mask = docu_key.

      _d-documentation = zaplink_documentation=&gt;get( ids = zaplink_object_data=&gt;r_doc_ids-interface
                                                  object = obj_mask ).

      CREATE OBJECT object.
      object-&gt;complete_data( CHANGING fm_data = _d ).
      object-&gt;from_data( _d ).
      object-&gt;_code_signature = get_interface_signature( classkey ).


    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_CLASS_GLOBALSOURCE" EXPOSURE="2" STATE="1" EDITORDER="5 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Provide Global source of a class"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CLASS_NAME" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Key structure of a class"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_SOURCECODE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ABAP Source Code"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="NOT_A_CLASS" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="The specified object is not a Class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA t_upcode    TYPE td_sourcecode.
  DATA _line       LIKE LINE OF t_upcode.
  DATA d_class     TYPE  vseoclass.
  DATA t_attrs     TYPE  seoo_attributes_r.
  FIELD-SYMBOLS:
    &lt;t&gt; LIKE LINE OF result,
    &lt;a&gt; LIKE LINE OF t_attrs.

  CALL FUNCTION &apos;SEO_CLASS_GET&apos;
    EXPORTING
      clskey       = class_name
      version      = seoc_version_inactive
      state        = &apos;0&apos;
    IMPORTING
      class        = d_class
    EXCEPTIONS
      not_existing = 1
      deleted      = 2
      is_interface = 3
      model_only   = 4
      OTHERS       = 5.
  IF sy-subrc &lt;&gt; 0.
    RAISE not_a_class.
  ENDIF.
  result = get_class_globalsource_( class_name ).
  zaplink_tools=&gt;pretty_printer( CHANGING table = result ).
  IF d_class-category = &apos;40&apos;.  &quot; 40	Exception Class
* Issue 71 : Exception class SOTR GUID
    CALL FUNCTION &apos;SEO_CLASS_TYPEINFO_GET&apos;
      EXPORTING
        clskey                              = class_name
*       VERSION                             = SEOC_VERSION_INACTIVE
*       STATE                               = &apos;1&apos;
*       WITH_DESCRIPTIONS                   = SEOX_TRUE
*       RESOLVE_EVENTHANDLER_TYPEINFO       = SEOX_FALSE
*       WITH_MASTER_LANGUAGE                = SEOX_FALSE
*       WITH_ENHANCEMENTS                   = SEOX_FALSE
*       READ_ACTIVE_ENHA                    = SEOX_FALSE
      IMPORTING
*       CLASS                               =
        attributes                          = t_attrs
*       METHODS                             =
*       EVENTS                              =
*       TYPES                               =
*       PARAMETERS                          =
*       EXCEPS                              =
*       IMPLEMENTINGS                       =
*       INHERITANCE                         =
*       REDEFINITIONS                       =
*       IMPL_DETAILS                        =
*       FRIENDSHIPS                         =
*       TYPEPUSAGES                         =
*       CLSDEFERRDS                         =
*       INTDEFERRDS                         =
*       EXPLORE_INHERITANCE                 =
*       EXPLORE_IMPLEMENTINGS               =
*       ALIASES                             =
*       ENHANCEMENT_METHODS                 =
*       ENHANCEMENT_ATTRIBUTES              =
*       ENHANCEMENT_EVENTS                  =
*       ENHANCEMENT_IMPLEMENTINGS           =
      EXCEPTIONS
        not_existing                        = 1
        is_interface                        = 2
        model_only                          = 3
        OTHERS                              = 4.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
    DELETE t_attrs
           WHERE   exposure &lt;&gt; 2    &quot; Public
              OR attdecltyp &lt;&gt; 2    &quot; Cosntant
              OR NOT type CP &apos;SOTR_CONC&apos;.
    LOOP AT t_attrs ASSIGNING &lt;a&gt;.
      REPLACE ALL OCCURRENCES OF &lt;a&gt;-attvalue IN TABLE result WITH space.   &quot; Issue 71, remove SOTR GUID values when calculating code signature
    ENDLOOP.
  ENDIF.
*  Issue 71 : dot at the end.
  LOOP AT result ASSIGNING &lt;t&gt;.
    REPLACE FIRST OCCURRENCE OF REGEX &apos;\.$&apos; IN &lt;t&gt; WITH &apos; .&apos;.   &quot; change &apos;.&apos; to &apos; .&apos;
  ENDLOOP.
  zaplink_tools=&gt;condense_abap_source( CHANGING table = result ).
  t_upcode = result.
  zaplink_tools=&gt;conv_table_2upcase( CHANGING table = t_upcode ).

*Remove text before CLASS Zxxx DEFINITION
  CONCATENATE &apos;CLASS&apos; class_name &apos;DEFINITION&apos; INTO _line SEPARATED BY space.
  READ TABLE t_upcode TRANSPORTING NO FIELDS  FROM _line.
  CHECK sy-subrc = 0.
  SUBTRACT 1 FROM sy-tabix.   CHECK sy-tabix &gt;= 1.    DELETE result TO sy-tabix.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_CLASS_GLOBALSOURCE_" STATE="1" EDITORDER="1 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Provide Global source of a class copy of CL_OO_SOURCE"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CLASS_NAME" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Key structure of a class"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_SOURCECODE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ABAP Source Code"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
*  DATA d_size TYPE i.
*  FIELD-SYMBOLS &lt;line&gt; TYPE string.
* Copy of CL_OO_SOURCE-&gt;CONSTRUCTOR
  DATA cpool TYPE seo_section_source.
  DATA pubsec TYPE seo_section_source.
  DATA prisec TYPE seo_section_source.
  DATA prosec TYPE seo_section_source.
  DATA cl TYPE seo_section_source.
  DATA ccdef TYPE seop_source_string.
  DATA ccimp TYPE seop_source_string.
  DATA ccmac TYPE seop_source_string.

  DATA incname TYPE program.
  DATA pubsec_incname TYPE program.
  DATA prisec_incname TYPE program.
  DATA prosec_incname TYPE program.
  DATA cl_incname TYPE program.
  DATA ccdef_incname TYPE program.
  DATA ccimp_incname TYPE program.
  DATA ccmac_incname TYPE program.

  DATA meth_inc TYPE seop_method_w_include.
  DATA meth_incs TYPE seop_methods_w_include.
  DATA source_tmp TYPE seop_source_string.

  FIELD-SYMBOLS &lt;source_line&gt; TYPE seo_section_source_line.

  incname = cl_oo_classname_service=&gt;get_classpool_name( class_name-clsname ).
  cpool = get_prog_rawsource( incname ).                                          &quot; Issue 73
*  READ REPORT incname INTO cpool STATE &apos;I&apos;.
*  IF sy-subrc &lt;&gt; 0.
*    READ REPORT incname INTO cpool STATE &apos;A&apos;.
*  ENDIF.

  pubsec_incname = cl_oo_classname_service=&gt;get_pubsec_name( class_name-clsname ).
  pubsec = get_prog_rawsource( pubsec_incname ).                                  &quot; Issue 73
*  READ REPORT pubsec_incname INTO pubsec STATE &apos;I&apos;.
*  IF sy-subrc &lt;&gt; 0.
*    READ REPORT pubsec_incname INTO pubsec STATE &apos;A&apos;.
*  ENDIF.

  prosec_incname = cl_oo_classname_service=&gt;get_prosec_name( class_name-clsname ).
  prosec = get_prog_rawsource( prosec_incname ).                                  &quot; Issue 73
*  READ REPORT prosec_incname INTO prosec STATE &apos;I&apos;.
*  IF sy-subrc &lt;&gt; 0.
*    READ REPORT prosec_incname INTO prosec STATE &apos;A&apos;.
*  ENDIF.

  prisec_incname = cl_oo_classname_service=&gt;get_prisec_name( class_name-clsname ).
  prisec = get_prog_rawsource( prisec_incname ).                                  &quot; Issue 73
*  READ REPORT prisec_incname INTO prisec STATE &apos;I&apos;.
*  IF sy-subrc &lt;&gt; 0.
*    READ REPORT prisec_incname INTO prisec STATE &apos;A&apos;.
*  ENDIF.

  cl_incname = cl_oo_classname_service=&gt;get_cl_name( class_name-clsname ).
  cl = get_prog_rawsource( cl_incname ).                                          &quot; Issue 73
*  READ REPORT cl_incname INTO cl STATE &apos;I&apos;.
*  IF sy-subrc &lt;&gt; 0.
*    READ REPORT cl_incname INTO cl STATE &apos;A&apos;.
*  ENDIF.

  ccdef_incname = cl_oo_classname_service=&gt;get_ccdef_name( class_name-clsname ).
  ccdef = get_prog_rawsource( ccdef_incname ).                                    &quot; Issue 73
*  READ REPORT ccdef_incname INTO ccdef STATE &apos;I&apos;.
*  IF sy-subrc &lt;&gt; 0.
*    READ REPORT ccdef_incname INTO ccdef STATE &apos;A&apos;.
*  ENDIF.

  ccimp_incname = cl_oo_classname_service=&gt;get_ccimp_name( class_name-clsname ).
  ccimp = get_prog_rawsource( ccimp_incname ).                                    &quot; Issue 73
*  READ REPORT ccimp_incname INTO ccimp STATE &apos;I&apos;.
*  IF sy-subrc &lt;&gt; 0.
*    READ REPORT ccimp_incname INTO ccimp STATE &apos;A&apos;.
*  ENDIF.

  ccmac_incname = cl_oo_classname_service=&gt;get_ccmac_name( class_name-clsname ).
  ccmac = get_prog_rawsource( ccmac_incname ).                                    &quot; Issue 73
*  READ REPORT ccmac_incname INTO ccmac STATE &apos;I&apos;.
*  IF sy-subrc &lt;&gt; 0.
*    READ REPORT ccmac_incname INTO ccmac STATE &apos;A&apos;.
*  ENDIF.

  meth_incs = cl_oo_classname_service=&gt;get_all_method_includes( class_name-clsname ).

* Issue 68 : Methods are in historical order on the development system and in alphabetic order on a fresh install system
  SORT meth_incs BY cpdkey.         &quot; Issue 68 : Force alphabetic order
* End of change in Copy of CL_OO_SOURCE-&gt;CONSTRUCTOR

  LOOP AT cpool ASSIGNING &lt;source_line&gt;.
    IF &lt;source_line&gt; CS pubsec_incname.
      APPEND LINES OF pubsec TO result.
    ELSEIF &lt;source_line&gt; CS prosec_incname.
      APPEND LINES OF prosec TO result.
    ELSEIF &lt;source_line&gt; CS prisec_incname.
      APPEND LINES OF prisec TO result.
    ELSEIF &lt;source_line&gt; CS cl_incname.
      APPEND LINES OF cl TO result.
    ELSEIF &lt;source_line&gt; CS ccdef_incname.
      APPEND LINES OF ccdef TO result.
    ELSEIF &lt;source_line&gt; CS ccimp_incname.
      APPEND LINES OF ccimp TO result.
    ELSEIF &lt;source_line&gt; CS ccmac_incname.
      APPEND LINES OF ccmac TO result.
    ELSEIF &lt;source_line&gt; CS &apos;include methods&apos;.
      LOOP AT meth_incs INTO meth_inc.
        source_tmp = get_prog_rawsource( meth_inc-incname ).                     &quot; Issue 73
*        READ REPORT meth_inc-incname INTO source_tmp STATE &apos;I&apos;.
*        IF sy-subrc &lt;&gt; 0.
*          READ REPORT meth_inc-incname INTO source_tmp STATE &apos;A&apos;.
*        ENDIF.
*        IF sy-subrc = 0.
        IF NOT source_tmp IS INITIAL.
          APPEND LINES OF source_tmp TO result.
        ENDIF.
      ENDLOOP.
    ELSE.
      APPEND &lt;source_line&gt; TO result.
    ENDIF .
  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_CLASS_SIGNATURE" EXPOSURE="2" STATE="1" EDITORDER="2 " MTDDECLTYP="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get Source code Signature of class">
      <DOCUMENTATION TDFRELES="700" TDLINESIZE="072">U1&amp;FUNCTIONALITY&amp;
ASRetrieve MD5 Hash from ABAP Class source code. After removing :
B1Blank lines
B1Comment lines
U1&amp;PRECONDITION&amp;
AS
U1&amp;RESULT&amp;
AS
U1&amp;PARAMETERS&amp;
AS
U1&amp;EXCEPTIONS&amp;
AS
U1&amp;HINTS&amp;
AS</DOCUMENTATION>
     </ITEM>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CLASS_NAME" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Key structure of a class"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="ZAPLINK_DATATYPES~TD_CHECKSUM">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Source Code Signature (Checksum)"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA d_type    TYPE td_comptype.
  DATA t_code    TYPE td_sourcecode.
  DATA d_src     TYPE string.

  t_code = get_class_globalsource( class_name ).
  d_src = zaplink_tools=&gt;table_2_string( t_code ).
  d_src = zaplink_tools=&gt;clean_abap_string( d_src ).
  result = zaplink_tools=&gt;calculate_md5_hash( d_src ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_INCLUDES" EXPOSURE="2" STATE="1" EDITORDER="6 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get report includes names from class name"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CLSNAME" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Object Type Name"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="INCLUDES" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="ZAPLINK_OBJECT_DATA=&gt;TS_INCLUDES">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="List of Class&apos;s include with ABAP Code"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  data d_CIFKEY  TYPE SEOCLSKEY.
  DATA d_clstype TYPE seoclstype.

  d_cifkey-clsname = clsname.
  CALL FUNCTION &apos;SEO_CLIF_GET&apos;
    EXPORTING
      cifkey             = d_cifkey
*     VERSION            = SEOC_VERSION_INACTIVE
*     STATE              = &apos;0&apos;
    IMPORTING
      clstype            = d_clstype
*     CLASS              =
*     INTERFACE          =
    EXCEPTIONS
      not_existing       = 1
      deleted            = 2
      model_only         = 3
      OTHERS             = 4.
  IF sy-subrc = 0.
    IF d_clstype EQ 0.
      includes-classpool = cl_oo_classname_service=&gt;get_classpool_name( clsname ).
      includes-pubsec    = cl_oo_classname_service=&gt;get_pubsec_name( clsname ).
      includes-prosec    = cl_oo_classname_service=&gt;get_prosec_name( clsname ).
      includes-prisec    = cl_oo_classname_service=&gt;get_prisec_name( clsname ).
      includes-cl        = cl_oo_classname_service=&gt;get_cl_name( clsname ).
      includes-ccdef     = cl_oo_classname_service=&gt;get_ccdef_name( clsname ).
      includes-ccimp     = cl_oo_classname_service=&gt;get_ccimp_name( clsname ).
      includes-ccmac     = cl_oo_classname_service=&gt;get_ccmac_name( clsname ).
      CALL METHOD cl_oo_classname_service=&gt;get_all_method_includes
        EXPORTING
          clsname            = clsname
        RECEIVING
          result             = includes-methods
        EXCEPTIONS
          class_not_existing = 0
          OTHERS             = 0.   &quot; Ignore exception : Class may not exits
    ELSEIF d_clstype EQ 1.
      includes-interfacepool = cl_oo_classname_service=&gt;get_interfacepool_name( clsname ).
      includes-intfsec       = cl_oo_classname_service=&gt;get_intfsec_name( clsname ).
    ENDIF.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_INTERFACE_GLOBALSOURCE" EXPOSURE="2" STATE="1" EDITORDER="4 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Provide Global source of a interface"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="INTERFACE_NAME" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Key structure of a class"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_SOURCECODE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ABAP Source Code"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="FAILED" LANGU="E" EDITORDER="2 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Other system errors"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="NOT_A_CLASS" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="The specified object is not a Class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA d_prog     TYPE program.
  DATA t_upcode   TYPE td_sourcecode.
  DATA _line      LIKE LINE OF t_upcode.

  d_prog = cl_oo_classname_service=&gt;get_intfsec_name( interface_name-clsname ).

  READ REPORT d_prog INTO result.
  zaplink_tools=&gt;pretty_printer( CHANGING table = result ).
  zaplink_tools=&gt;condense_abap_source( CHANGING table = result ).
  t_upcode = result.    zaplink_tools=&gt;conv_table_2upcase( CHANGING table = t_upcode ).

*Remove text before CLASS Zxxx DEFINITION
  CONCATENATE &apos;INTERFACE&apos; interface_name INTO _line SEPARATED BY space.
  READ TABLE t_upcode TRANSPORTING NO FIELDS  FROM _line.
  CHECK sy-subrc = 0.
  SUBTRACT 1 FROM sy-tabix.   CHECK sy-tabix &gt;= 1.   DELETE result TO sy-tabix.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_INTERFACE_SIGNATURE" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDDECLTYP="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get Source code Signature of interface">
      <DOCUMENTATION TDFRELES="700" TDLINESIZE="072">U1&amp;FUNCTIONALITY&amp;
ASRetrieve MD5 Hash from ABAP Class source code. After removing :
B1Blank lines
B1Comment lines
U1&amp;PRECONDITION&amp;
AS
U1&amp;RESULT&amp;
AS
U1&amp;PARAMETERS&amp;
AS
U1&amp;EXCEPTIONS&amp;
AS
U1&amp;HINTS&amp;
AS</DOCUMENTATION>
     </ITEM>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="INTERFACE_NAME" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Key structure of a class"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="ZAPLINK_DATATYPES~TD_CHECKSUM">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Source Code Signature (Checksum)"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA d_type    TYPE td_comptype.
  DATA t_code    TYPE td_sourcecode.
  DATA d_src     TYPE string.

  t_code = get_interface_globalsource( interface_name ).
  d_src = zaplink_tools=&gt;table_2_string( t_code ).
  d_src = zaplink_tools=&gt;clean_abap_string( d_src ).
  result = zaplink_tools=&gt;calculate_md5_hash( d_src ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IMPORT_TO_SAP_CLASS" EXPOSURE="1" STATE="1" EDITORDER="2 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Import Class into SAP system"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENTS" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Components"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_DATA" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_CLASS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Class data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA _d               TYPE t_fm_data.
  DATA i_korrnr         TYPE trkorr.              &quot;#EC NEEDED for debug
  DATA _component       TYPE to_component.
  DATA _name            TYPE td_compname.

  TRY.

      _d = o_data-&gt;to_data( ).

* Exceptions texts
      IF NOT _d-exceptions_texts IS INITIAL.
        zaplink_clas_data=&gt;update_concept( EXPORTING msg_col = application_log
                                           CHANGING  fm_data = _d ).
      ENDIF.

      CALL FUNCTION &apos;SEO_CLASS_CREATE_COMPLETE&apos;
       EXPORTING
*     corrnr                             = e_corrnr
*     devclass                           = &apos;$TMP&apos;                &quot;devclass
*     version                            = e_version
*     genflag                            = e_genflag
*     authority_check                    = e_authority_check
         overwrite                          = &apos;X&apos;                   &quot;overwrite
*   SUPPRESS_METHOD_GENERATION         = e_suppress_meth_gen
*   SUPPRESS_REFACTORING_SUPPORT       = e_suppress_refac_gen
         method_sources                     = _d-method_sources    &quot; Methods source
         locals_def                         = _d-locals_def        &quot; LOCAL_TYPES
         locals_imp                         = _d-locals_imp        &quot; LOCAL_IMP
         locals_mac                         = _d-locals_mac        &quot; MACROS
*   SUPPRESS_INDEX_UPDATE              = e_suppress_ind_update
       IMPORTING
         korrnr                             = i_korrnr
       TABLES
         class_descriptions                 = _d-class_desc
         component_descriptions             = _d-component_desc
         subcomponent_descriptions          = _d-subcomponent_desc
       CHANGING
         class                              = _d-class
         inheritance                        = _d-inheritance
         redefinitions                      = _d-redefinitions
         implementings                      = _d-implementings
         impl_details                       = _d-impl_details
         attributes                         = _d-attributes
         methods                            = _d-methods
         events                             = _d-events
         types                              = _d-types
*   TYPE_SOURCE                        = ch_type_source &quot;???
         PARAMETERS                         = _d-parameters
         exceps                             = _d-exceps
         aliases                            = _d-aliases
         typepusages                        = _d-typeusages
         clsdeferrds                        = _d-clsdeferrds
         intdeferrds                        = _d-intdeferrds
         friendships                        = _d-friendships
       EXCEPTIONS
         existing                           = 1
         is_interface                       = 2
         db_error                           = 3
         component_error                    = 4
         no_access                          = 5
         other                              = 6
         OTHERS                             = 7.
      CASE sy-subrc.
        WHEN 0.
** i guess if we made it this far, we will assume success
** successful install
        WHEN OTHERS.
          o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_CLASS_CREATE_COMPLETE&apos;
                                                      subrc = sy-subrc
                                                  classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
          application_log-&gt;add_symsg( ).
          RAISE EXCEPTION o_mycx.
      ENDCASE.

      _d-includes = get_includes( _d-class-clsname ).
      set_dynpros( program = _d-includes-classpool          &quot; Issue 8
                   dynpros = _d-dynpros ).
      set_menus( program = _d-includes-classpool            &quot; Issue 9
                   menus = _d-menupainter ).
      set_prog_textpool( program = _d-includes-classpool    &quot; Issue 1
                        textpool = _d-textspool ).

      zaplink_documentation=&gt;set( _d-documentation ).

      CREATE OBJECT _component.
      _component-&gt;set_type( zaplink_object_data=&gt;object_types-class ).
      _name = _d-class-clsname.
      _component-&gt;set_name( _name ).
      CREATE OBJECT components.
      components-&gt;add( _component ).

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IMPORT_TO_SAP_INTERFACE" EXPOSURE="1" STATE="1" EDITORDER="5 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Import Interface into SAP system"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENTS" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Components"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_DATA" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_INTERFACE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Interface data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA _d           TYPE t_fm_data.
  DATA i_korrnr     TYPE trkorr.                  &quot;#EC NEEDED for debug
  DATA _component   TYPE to_component.
  DATA _name        TYPE td_compname.

  TRY.

      _d = o_data-&gt;to_data( ).

      CALL FUNCTION &apos;SEO_INTERFACE_CREATE_COMPLETE&apos;
        EXPORTING
*     CORRNR                             =
*     devclass                           = &apos;$TMP&apos;
*     VERSION                            = SEOC_VERSION_INACTIVE
*     GENFLAG                            = &apos; &apos;
*     AUTHORITY_CHECK                    = SEOX_TRUE
          overwrite                          = seox_true
*     SUPPRESS_REFACTORING_SUPPORT       = SEOX_TRUE
        IMPORTING
          korrnr                             = i_korrnr
        TABLES
          class_descriptions                 = _d-class_desc
          component_descriptions             = _d-component_desc
          subcomponent_descriptions          = _d-subcomponent_desc
        CHANGING
          interface                          = _d-interface
          comprisings                        = _d-comprisings
          attributes                         = _d-attributes
          methods                            = _d-methods
          events                             = _d-events
          PARAMETERS                         = _d-parameters
          exceps                             = _d-exceps
          aliases                            = _d-aliases
          typepusages                        = _d-typeusages
          clsdeferrds                        = _d-clsdeferrds
          intdeferrds                        = _d-intdeferrds
          types                              = _d-types
        EXCEPTIONS
          existing                           = 1
          is_class                           = 2
          db_error                           = 3
          component_error                    = 4
          no_access                          = 5
          other                              = 6
          OTHERS                             = 7.
      CASE sy-subrc.
        WHEN &apos;0&apos;.
** i guess if we made it this far, we will assume success
** successful install
        WHEN OTHERS.
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING textid = zaplink_cx_connector=&gt;system_error.
      ENDCASE.

* Patch SAP do not create type alias.
      DATA  intkey TYPE seoclskey.
      DATA  type   TYPE vseotype.
      FIELD-SYMBOLS &lt;alias&gt; LIKE LINE OF _d-aliases.

      LOOP AT _d-aliases ASSIGNING &lt;alias&gt;
              WHERE cmptype = seoo_cmptype_type.
        MOVE-CORRESPONDING &lt;alias&gt; TO type.
        type-alias = seox_true.
        type-state = seoc_state_implemented.
        CALL FUNCTION &apos;SEO_TYPE_CREATE_F_DATA&apos;
          EXPORTING
            save   = seox_false
          CHANGING
            type   = type
          EXCEPTIONS
            OTHERS = 1.
        IF sy-subrc &lt;&gt; 0.
          CALL METHOD application_log-&gt;add_symsg
            EXPORTING
              id_msgty = &apos;W&apos;.
        ENDIF.
      ENDLOOP.
      MOVE-CORRESPONDING _d-interface TO intkey.
      CALL FUNCTION &apos;SEO_CLIF_SAVE_ALL&apos;
        EXPORTING
          cifkey                        = intkey
          suppress_refactoring_entries  = seox_true
          suppress_modification_support = seox_true
*    CHANGING
*      corrnr                        = corrnr
*      devclass                      = devclass
*      genflag                       = genflag
        EXCEPTIONS
          db_error                      = 1
          OTHERS                        = 2.
      IF sy-subrc &lt;&gt; 0.
        CALL METHOD application_log-&gt;add_symsg
          EXPORTING
            id_msgty = &apos;W&apos;.
      ENDIF.

      zaplink_documentation=&gt;set( o_data-&gt;documentation ).

      CREATE OBJECT _component.
      _component-&gt;set_type( zaplink_object_data=&gt;object_types-interface ).
      _name = _d-interface-clsname.
      _component-&gt;set_name( _name ).
      CREATE OBJECT components.
      components-&gt;add( _component ).

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="LOAD_CLAS" STATE="1" EDITORDER="2 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Load Class from SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CLASSKEY" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Key structure of a class"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="_D" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="T_FM_DATA"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  CALL FUNCTION &apos;SEO_CLASS_TYPEINFO_GET&apos;
    EXPORTING
      clskey                              = classkey
      version                             = _d-class-version
      state                               = _d-class-state
*     WITH_DESCRIPTIONS                   = SEOX_TRUE
      resolve_eventhandler_typeinfo       = seox_true
      with_master_language                = seox_true
      with_enhancements                   = seox_true
*     READ_ACTIVE_ENHA                    = SEOX_FALSE
    IMPORTING
      class                               = _d-class
      attributes                          = _d-attributes
      methods                             = _d-methods
      events                              = _d-events
      types                               = _d-types
      PARAMETERS                          = _d-parameters
      exceps                              = _d-exceps
      implementings                       = _d-implementings
      inheritance                         = _d-inheritance
      redefinitions                       = _d-redefinitions
      impl_details                        = _d-impl_details
      friendships                         = _d-friendships
      typepusages                         = _d-typeusages
      clsdeferrds                         = _d-clsdeferrds
      intdeferrds                         = _d-intdeferrds
      explore_inheritance                 = _d-explore_inheritance
      explore_implementings               = _d-explore_implementings
      aliases                             = _d-aliases
      enhancement_methods                 = _d-enhancement_methods
      enhancement_attributes              = _d-enhancement_attributes
      enhancement_events                  = _d-enhancement_events
      enhancement_implementings           = _d-enhancement_implementings
    EXCEPTIONS
      not_existing                        = 1
      is_interface                        = 2
      model_only                          = 3
      OTHERS                              = 4.
  IF sy-subrc &lt;&gt; 0.
    o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_CLASS_TYPEINFO_GET&apos;
                                                subrc = sy-subrc
                                            classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
    application_log-&gt;add_symsg( ).
    RAISE EXCEPTION o_mycx.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SEARCH_TYPE_POOL" EXPOSURE="1" STATE="1" EDITORDER="1 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Search for included type pools"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NEW_SOURCECODE" CMPTYPE="1" EDITORDER="4 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TT_ABAPRAWSOURCE"/>
     <ITEM SCONAME="NEW_TYPEPOOLS" CMPTYPE="1" EDITORDER="5 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOT_TYPEPUSAGES_R"/>
     <ITEM SCONAME="PUBLIC" CMPTYPE="1" EDITORDER="3 " PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PAROPTIONL="X"/>
     <ITEM SCONAME="SOURCECODE" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_ABAPRAWSOURCE"/>
     <ITEM SCONAME="TYPEPOOLS" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="SEOT_TYPEPUSAGES_R"/>
    </PARAMETERS>
    <SOURCE>`
  DATA d_tabix TYPE sy-tabix.
  DATA t_tokens TYPE STANDARD TABLE OF stokes.
  DATA t_statments TYPE STANDARD TABLE OF sstmnt.
  DATA s_tp     LIKE LINE OF new_typepools.
  DATA d_flag TYPE abap_bool.
  FIELD-SYMBOLS:
    &lt;s&gt; LIKE LINE OF new_sourcecode,
    &lt;t&gt; LIKE LINE OF t_tokens,
    &lt;n&gt; LIKE LINE OF t_tokens.

  CHECK NOT sourcecode IS INITIAL.
  new_sourcecode = sourcecode.

  SCAN ABAP-SOURCE sourcecode
                   TOKENS INTO t_tokens
                   STATEMENTS INTO t_statments.

  LOOP AT t_tokens ASSIGNING &lt;t&gt;
    WHERE str CP &apos;TYPE-POOLS&apos;.
    d_tabix = sy-tabix + 1.
    READ TABLE t_tokens ASSIGNING &lt;n&gt; INDEX d_tabix.
    CHECK sy-subrc = 0.
    CHECK &lt;n&gt;-row = &lt;t&gt;-row.    &quot; TYPE-POOLS ABAP.
    READ TABLE typepools TRANSPORTING NO FIELDS
         WITH KEY typegroup = &lt;n&gt;-str
                   explicit = abap_true.
    CHECK sy-subrc &lt;&gt; 0 OR public IS INITIAL.
    IF sy-subrc &lt;&gt; 0.
* Type pool doesn&apos;t exist in class definition but is declared in the middle of sections
      CLEAR s_tp.
      s_tp-typegroup = &lt;n&gt;-str.
      s_tp-tputype = 0.     &quot; Type group use                (TYPE-POOLS tp)
      s_tp-explicit = abap_true.
      s_tp-implicit = abap_false.
      APPEND s_tp TO new_typepools.
    ENDIF.
* Line has to be commented
    READ TABLE new_sourcecode ASSIGNING &lt;s&gt; INDEX &lt;n&gt;-row.
    CONCATENATE &apos;*&apos; &lt;s&gt; &apos;&quot;Auto commented by ZAPLINK_OBJECT connector and added as Explicit type group&apos;(cmt) INTO &lt;s&gt;.
    d_flag = abap_true.
  ENDLOOP.

  IF d_flag IS INITIAL. CLEAR new_sourcecode. ENDIF.</SOURCE>
   </ITEM>
  </METHODS>
  <REDEFINITIONS>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~ANONYMIZE">
    <SOURCE>`
  DATA _o_class       TYPE to_class.
  DATA _o_interface   TYPE to_interface.

  TRY.
      super-&gt;zaplink_cnx_ext_cleaner~anonymize( object ).
    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.

  CASE object-&gt;type.
    WHEN zaplink_object_data=&gt;object_types-class.
      _o_class ?= object-&gt;raw.
      _o_class-&gt;anonymize( ).
    WHEN zaplink_object_data=&gt;object_types-interface.
      _o_interface ?= object-&gt;raw.
      _o_interface-&gt;anonymize( ).
    WHEN OTHERS.
  ENDCASE.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~UNANONYMIZE">
    <SOURCE>`
  DATA _o_class       TYPE to_class.
  DATA _o_interface   TYPE to_interface.

  TRY.
      super-&gt;zaplink_cnx_ext_cleaner~unanonymize( object ).
    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.

  CASE object-&gt;type.
    WHEN zaplink_object_data=&gt;object_types-class.
      _o_class ?= object-&gt;raw.
      _o_class-&gt;unanonymize( ).
    WHEN zaplink_object_data=&gt;object_types-interface.
      _o_interface ?= object-&gt;raw.
      _o_interface-&gt;unanonymize( ).
    WHEN OTHERS.
  ENDCASE.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CNX_EXT_CODE_SIGNATURE~GET_SIGNATURE">
    <SOURCE>`
  DATA clskey TYPE seoclskey.
  DATA d_type TYPE td_comptype.

  TRY.
    d_type = component-&gt;get_type( ).
    CASE d_type.
      WHEN zaplink_object_data=&gt;object_types-class.
        clskey-clsname = component-&gt;get_name( ).
        result = get_class_signature( clskey ).
      WHEN zaplink_object_data=&gt;object_types-interface.
        clskey-clsname = component-&gt;get_name( ).
        result = get_interface_signature( clskey ).
      WHEN OTHERS.
        mac_raise_type_not_supported &apos;ZAPLINK_OBJECT&apos; d_type.
    ENDCASE.
    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~CREATE_NEW_RAW">
    <SOURCE>`
  DATA o_clas TYPE to_class.
  DATA o_intf TYPE to_interface.

  CREATE OBJECT object.
  CASE type.
    WHEN zaplink_object_data=&gt;object_types-class.
      CREATE OBJECT o_clas.
      object-&gt;raw = o_clas.
*      create object object type TO_CLASS.
    WHEN zaplink_object_data=&gt;object_types-interface.
      CREATE OBJECT o_intf.
      object-&gt;raw = o_intf.
*      create object object type TO_CLASS.
    WHEN OTHERS.
      CLEAR object.
      mac_raise_type_not_supported &apos;ZAPLINK_OBJECT&apos; type.
  ENDCASE.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~DELETE_FROM_SAP">
    <SOURCE>`
  DATA clskey TYPE seoclskey.
  DATA d_type TYPE td_comptype.

  TRY.
    d_type = component-&gt;get_type( ).
    CASE d_type.
      WHEN zaplink_object_data=&gt;object_types-class.
        clskey-clsname = component-&gt;get_name( ).
        CALL FUNCTION &apos;SEO_CLASS_DELETE_W_DEPS&apos;
          EXPORTING
            clskey       = clskey
          EXCEPTIONS
            not_existing = 1
            is_interface = 2
            not_deleted  = 3
            db_error     = 4
            OTHERS       = 5.
        IF sy-subrc &lt;&gt; 0.
          CASE sy-subrc.
            WHEN 1.
              RAISE EXCEPTION TYPE zaplink_cx_connector
                EXPORTING textid = zaplink_cx_connector=&gt;not_found.
            WHEN OTHERS.
              RAISE EXCEPTION TYPE zaplink_cx_connector
                EXPORTING textid = zaplink_cx_connector=&gt;system_error.
          ENDCASE.
        ENDIF.
      WHEN zaplink_object_data=&gt;object_types-interface.
        clskey-clsname = component-&gt;get_name( ).
* Not working
*      CALL FUNCTION &apos;SEO_INTERFACE_DELETE_W_DEPS&apos;
*        EXPORTING
*          intkey       = clskey
*          save         = seox_true
*        EXCEPTIONS
*          not_existing = 1
*          is_class     = 2
*          not_deleted  = 3
*          db_error     = 4
*          OTHERS       = 5.
        CALL FUNCTION &apos;SEO_INTERFACE_DELETE_COMPLETE&apos;
          EXPORTING
            intkey                     = clskey
*         GENFLAG                    = &apos; &apos;
            authority_check            = seox_true
            suppress_docu_delete       = seox_true
*         SUPPRESS_COMMIT            = SEOX_FALSE
*       CHANGING
*         CORRNR                     =
          EXCEPTIONS
            not_existing               = 1
            is_class                   = 2
            db_error                   = 3
            no_access                  = 4
            other                      = 5
            OTHERS                     = 6
                  .
        IF sy-subrc &lt;&gt; 0.
          CASE sy-subrc.
            WHEN 1.
              RAISE EXCEPTION TYPE zaplink_cx_connector
                EXPORTING textid = zaplink_cx_connector=&gt;not_found.
            WHEN OTHERS.
              RAISE EXCEPTION TYPE zaplink_cx_connector
                EXPORTING textid = zaplink_cx_connector=&gt;system_error.
          ENDCASE.
        ENDIF.
      WHEN OTHERS.
        mac_raise_type_not_supported &apos;ZAPLINK_OBJECT&apos; d_type.
    ENDCASE.

    mac_def_catch zaplink_cx_connector.
  ENDTRY.
  result = abap_true.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~DO_EXISTS">
    <SOURCE>`
  DATA clskey TYPE seoclskey.
  DATA d_type TYPE td_comptype.

  TRY.
    d_type = component-&gt;get_type( ).
    CASE d_type.
      WHEN zaplink_object_data=&gt;object_types-class.
        clskey-clsname = component-&gt;get_name( ).

        CALL FUNCTION &apos;SEO_CLASS_EXISTENCE_CHECK&apos;
          EXPORTING
            clskey        = clskey
*        IMPORTING
*          not_active    = not_active
          EXCEPTIONS
            not_specified = 1
            not_existing  = 2
            is_interface  = 3
            no_text       = 4
            inconsistent  = 5
            OTHERS        = 6.

        IF sy-subrc = 0.
          exists = &apos;X&apos;.
        ENDIF.
      WHEN zaplink_object_data=&gt;object_types-interface.
        clskey-clsname = component-&gt;get_name( ).

        CALL FUNCTION &apos;SEO_INTERFACE_EXISTENCE_CHECK&apos;
          EXPORTING
            intkey              = clskey
*       IMPORTING
*         NOT_ACTIVE          =
         EXCEPTIONS
           not_specified       = 1
           not_existing        = 2
           is_class            = 3
           no_text             = 4
           inconsistent        = 5
           OTHERS              = 6.

        IF sy-subrc = 0.
          exists = &apos;X&apos;.
        ENDIF.
      WHEN OTHERS.
        mac_raise_type_not_supported &apos;ZAPLINK_OBJECT&apos; d_type.
    ENDCASE.

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~IS_SUPPORTED_VERSION">
    <SOURCE>`
  result = abap_false.
  if version = _ver OR version = &apos;1.0&apos;.   &quot; version 1.01 is downward compatible with version 1.0
    result = abap_true.
  endif.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~READ_FROM_SAP">
    <SOURCE>`
  DATA o_clas TYPE to_class.
  DATA o_intf TYPE to_interface.
  DATA d_type TYPE td_comptype.

  TRY.

    CREATE OBJECT object.
    object-&gt;set_component( component ).
    d_type = component-&gt;get_type( ).
    CASE d_type.
      WHEN zaplink_object_data=&gt;object_types-class.
        TRY.
            o_clas = export_from_sap_class( component ).
          CATCH zaplink_cx_connector INTO o_mycx.
            IF NOT o_mycx-&gt;messages IS BOUND.
              o_mycx-&gt;messages = application_log.
              o_mycx-&gt;update( ).
            ENDIF.
            RAISE EXCEPTION o_mycx.
        ENDTRY.
        CLEAR o_clas-&gt;a0_maindata-clsname.
        object-&gt;raw = o_clas.
      WHEN zaplink_object_data=&gt;object_types-interface.
        TRY.
            o_intf = export_from_sap_interface( component ).
          CATCH zaplink_cx_connector INTO o_mycx.
            IF NOT o_mycx-&gt;messages IS BOUND.
              o_mycx-&gt;messages = application_log.
              o_mycx-&gt;update( ).
            ENDIF.
            RAISE EXCEPTION o_mycx.
        ENDTRY.
        CLEAR o_intf-&gt;a0_maindata-clsname.
        object-&gt;raw = o_intf.
      WHEN OTHERS.
        CLEAR object.
        mac_raise_type_not_supported &apos;ZAPLINK_OBJECT&apos; d_type.
    ENDCASE.
    object-&gt;update_connector_data( me ).                    &quot; Issue 66
    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~WRITE_TO_SAP">
    <SOURCE>`
  DATA _o_class       TYPE to_class.
  DATA _o_interface   TYPE to_interface.

  TRY.
    CASE object-&gt;type.
      WHEN zaplink_object_data=&gt;object_types-class.
        _o_class ?= object-&gt;raw.
        _o_class-&gt;a0_maindata-clsname = object-&gt;name.
        TRY.
            components = import_to_sap_class( _o_class ).
          CATCH zaplink_cx_connector INTO o_mycx.
            IF NOT o_mycx-&gt;messages IS BOUND.
              o_mycx-&gt;messages = application_log.
              o_mycx-&gt;update( ).
            ENDIF.
            RAISE EXCEPTION o_mycx.
        ENDTRY.
      WHEN zaplink_object_data=&gt;object_types-interface.
        _o_interface ?= object-&gt;raw.
        _o_interface-&gt;a0_maindata-clsname = object-&gt;name.
        TRY.
            components = import_to_sap_interface( _o_interface ).
          CATCH zaplink_cx_connector INTO o_mycx.
            IF NOT o_mycx-&gt;messages IS BOUND.
              o_mycx-&gt;messages = application_log.
              o_mycx-&gt;update( ).
            ENDIF.
            RAISE EXCEPTION o_mycx.
        ENDTRY.
      WHEN OTHERS.
        mac_raise_type_not_supported &apos;ZAPLINK_OBJECT&apos; object-&gt;type.
    ENDCASE.

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
  </REDEFINITIONS>
  <TEXTSPOOL>
   <ITEM ID="I" KEY="PRI">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Private section" LENGTH="40 "/>
    </TEXTS>
   </ITEM>
   <ITEM ID="I" KEY="PRO">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Protected section" LENGTH="40 "/>
    </TEXTS>
   </ITEM>
   <ITEM ID="I" KEY="PUB">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Public section" LENGTH="40 "/>
    </TEXTS>
   </ITEM>
  </TEXTSPOOL>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOF" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOK" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOP" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOR" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOS" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOT" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOX" EXPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TD_SOURCECODE" EXPOSURE="2" STATE="1" TYPTYPE="1" TYPE="SEOP_SOURCE_STRING">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ABAP Source Code"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_CLASS" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="3" TYPE="ZAPLINK_CLAS_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Class data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_INTERFACE" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZAPLINK_INTF_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Interface data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_BAPI_DATA" STATE="1" EDITORDER="1 " TYPTYPE="4">
    BEGIN OF ts_bapi_data,
    class                       TYPE  vseoclass,
    attributes                  TYPE  seoo_attributes_r,
    methods                     TYPE  seoo_methods_r,
    events                      TYPE  seoo_events_r,
    types                       TYPE  seoo_types_r,
    parameters                  TYPE  seos_parameters_r,
    exceps                      TYPE  seos_exceptions_r,
    implementings               TYPE  seor_implementings_r,
    inheritance                 TYPE  vseoextend,
    redefinitions               TYPE  seor_redefinitions_r,
    impl_details                TYPE  seor_redefinitions_r,
    friendships                 TYPE  seof_friendships_r,
    typepusages                 TYPE  seot_typepusages_r,
    clsdeferrds                 TYPE  seot_clsdeferrds_r,
    intdeferrds                 TYPE  seot_intdeferrds_r,
    explore_inheritance         TYPE  seok_cls_typeinfos,
    explore_implementings       TYPE  seok_int_typeinfos,
    aliases                     TYPE  seoo_aliases_r,
    enhancement_methods         TYPE  enhmeth_tabheader,
    enhancement_attributes      TYPE  enhclasstabattrib,
    enhancement_events          TYPE  enhclasstabevent,
    enhancement_implementings   TYPE enhclasstabimplementing,
  END OF ts_bapi_data
`
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="All Data for BAPI call of class creation"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_CLAS_ATTR" STATE="1" EDITORDER="2 " TYPTYPE="4">
    BEGIN OF ts_clas_attr.
  INCLUDE TYPE ts_base_attributs AS base.
  TYPES:
    END OF ts_clas_attr
`
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Root attributs for CLAS"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="T_FM_DATA" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="ZAPLINK_OBJECT_DATA=&gt;T_FM_DATA"/>
  </TYPES>
 </RAW>
</ZL_OBJECT>
