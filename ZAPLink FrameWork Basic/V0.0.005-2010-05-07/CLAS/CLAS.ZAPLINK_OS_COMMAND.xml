<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="87B2FAE8DB5E0254DA86278C47B3AB0B" CODE_SIGNATURE="4A5D4F59588065E27F6991EB5A235DAA" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_OS_COMMAND" TYPE="CLAS" VERSION="1.01">
 <DEPENDENCIES>
  <ITEM TYPE="CLAS" NAME="ZAPLINK_CONNECTOR_"/>
 </DEPENDENCIES>
 <DIRECTORY DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <INHERITANCE REFCLSNAME="ZAPLINK_CONNECTOR_" STATE="1"/>
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="Data for Class">
     <DOCUMENTATION TDFRELES="700" TDLRELES="700" TDLINESIZE="072">U1&amp;FUNCTIONALITY&amp;
ASConnector for :
AS,,- EXCC : External OS Command
U1&amp;RELATIONS&amp;
ASIs part of ZAP Link Framework as Official Connector.
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AShttps://code.google.com/p/zaplink/wiki/Connector</DOCUMENTATION>
    </ITEM>
   </TEXTS>
  </A0_MAINDATA>
  <ATTRIBUTS>
   <ITEM CMPNAME="BALLOG_SUBOBJECT" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;CNX_OS_COMMAND&apos;" TYPTYPE="1" TYPE="BALSUBOBJ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Application Log: Subobject"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="C_MSG_ID" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;NA&apos;" TYPTYPE="1" TYPE="TD_DOC_ID">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Document class for message"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="FIELD_SEPARATOR" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;~&apos;" TYPTYPE="1" TYPE="ABAP_CHAR1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="field Separator in component key"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="R_DOC_ID" STATE="1" EDITORDER="2 " ATTDECLTYP="1" TYPTYPE="1" TYPE="TR_DOCID">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Documentation Object"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="ST_OS_CMD" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;EXCC&apos;" TYPTYPE="1" TYPE="TD_COMPTYPE">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Transport category : ABAP Object"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_UUID" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;DF0813D1BA8C0EF1BEAE000C291B645B&apos;" TYPTYPE="1" TYPE="TD_CONNUUID">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="UUID for connector Message class"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_VER" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;1.0&apos;" TYPTYPE="1" TYPE="TD_CONNVER">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Connector Version"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <LOCAL>
   <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* IMPLEMENTATION OR PRIVATE METHOD&apos;S SIGNATURE</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* LOCAL HELPER CLASSES</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* IN THE IMPLEMENTATION PART OF THE CLASS

INCLUDE zaplink_macros.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="2 " MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
*table TDCLT
*DOKCLASS DOKTITEL
*NA       Message
  DATA _id LIKE LINE OF r_doc_id.

  _id-sign = &apos;I&apos;. _id-option = &apos;EQ&apos;.
  _id-low = C_MSG_ID. APPEND _id TO r_doc_id.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="COMP_TO_KEY" EXPOSURE="2" STATE="1" EDITORDER="3 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Component name to OS Command key"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_COMPNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component name"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TS_OS_CMD_KEY">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="OS Command Key"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
SPLIT data AT field_separator INTO result-name result-opsystem.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDTYPE="2">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
DATA type LIKE LINE OF supported_types.

  CALL METHOD super-&gt;constructor.
  mac_create_log application_log ballog_subobject space.
  type-type = st_os_cmd. INSERT type INTO TABLE supported_types.

  uuid = _uuid.
  version = _ver.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="KEY_TO_COMP" EXPOSURE="2" STATE="1" EDITORDER="4 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="OS Command key to Component name"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" CMPTYPE="1" EDITORDER="1 " TYPTYPE="1" TYPE="TS_OS_CMD_KEY">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="OS Command Key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_COMPNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component name"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
CONCATENATE data-name field_separator data-opsystem INTO result.</SOURCE>
   </ITEM>
  </METHODS>
  <REDEFINITIONS>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~CREATE_NEW_RAW">
    <SOURCE>`
  DATA o_data TYPE to_data.

  CREATE OBJECT object.
  CASE type.
    WHEN st_os_cmd.
      CREATE OBJECT o_data.
      object-&gt;raw ?= o_data.
    WHEN OTHERS.
      CLEAR object.
      mac_raise_type_not_supported &apos;ZAPLINK_OS_COMMAND&apos; type.
  ENDCASE.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~DELETE_FROM_SAP">
    <SOURCE>`
  DATA d_name TYPE td_compname.
  DATA s_name TYPE ts_os_cmd_key.
  DATA d_dialog TYPE c.
* FROM LSXPTTOP @ 62
  TYPES: BEGIN OF s_ext_cmd.
  INCLUDE TYPE sxpgcostab.
  TYPES:  sapcommand TYPE sxpgcolist-sapcommand,
          type(8)    TYPE c,
        END OF s_ext_cmd.
  DATA: external_command TYPE s_ext_cmd.
*FROM RSXPGDEF @ 132
  TYPES retcode TYPE i.
  DATA d_rc     TYPE retcode.
  CONSTANTS:
** errors for missing parameters
*   rc_first_missing_error         TYPE retcode VALUE 100,   &quot;#EC NEEDED
*   rc_empty_name                  TYPE retcode VALUE 101,
*   rc_empty_opsystem              TYPE retcode VALUE 102,
*   rc_empty_command               TYPE retcode VALUE 103,
*   rc_empty_command_type          TYPE retcode VALUE 104,
*   rc_empty_target_server         TYPE retcode VALUE 105,
*   rc_empty_destination           TYPE retcode VALUE 106,
*   rc_parameter_expected          TYPE retcode VALUE 107,
*   rc_empty_list                  TYPE retcode VALUE 108,
*   rc_last_missing_error          TYPE retcode VALUE 199,   &quot;#EC NEEDED
*
** DB errors
*   rc_first_db_error              TYPE retcode VALUE 200,   &quot;#EC NEEDED
*   rc_db_insert_sxpgcotabe_error  TYPE retcode VALUE 201,
*   rc_db_insert_sxpgcostab_error  TYPE retcode VALUE 202,
*   rc_db_delete_sxpgcotabe_error  TYPE retcode VALUE 203,
*   rc_db_delete_sxpgcostab_error  TYPE retcode VALUE 204,
*   rc_db_update_sxpgcotabe_error  TYPE retcode VALUE 205,
*   rc_db_update_sxpgcostab_error  TYPE retcode VALUE 206,
*   rc_error_update_tbtcp          TYPE retcode VALUE 207,
*   rc_last_db_error               TYPE retcode VALUE 299,   &quot;#EC NEEDED
*
** lock errors
*   rc_first_lock_error            TYPE retcode VALUE 300,   &quot;#EC NEEDED
*   rc_foreign_lock                TYPE retcode VALUE 301,
*   rc_lock_system_failure         TYPE retcode VALUE 302,
*   rc_unknown_lock_error          TYPE retcode VALUE 303,
*   rc_last_lock_error             TYPE retcode VALUE 399,   &quot;#EC NEEDED
*
** &apos;cannot get&apos; errors
*   rc_first_cannot_get_error      TYPE retcode VALUE 400,   &quot;#EC NEEDED
*   rc_no_server_list              TYPE retcode VALUE 401,
*   rc_no_servers_found            TYPE retcode VALUE 402,
*   rc_cannot_determine_local_host TYPE retcode VALUE 403,
*   rc_unknown_server_list_error   TYPE retcode VALUE 404,
*   rc_cannot_get_rfc_dests        TYPE retcode VALUE 405,
*   rc_cant_enq_tbtco_entry        TYPE retcode VALUE 406,   &quot;#EC NEEDED
*   rc_jobcount_generation_error   TYPE retcode VALUE 407,   &quot;#EC NEEDED
*   rc_last_cannot_get_error       TYPE retcode VALUE 499,   &quot;#EC NEEDED
*
** no authority
*   rc_first_no_authority_error    TYPE retcode VALUE 500,   &quot;#EC NEEDED
*   rc_no_permission               TYPE retcode VALUE 501,
*   rc_no_change_authority         TYPE retcode VALUE 502,
*   rc_no_execute_authority        TYPE retcode VALUE 503,
*   rc_cannot_change_sap_command   TYPE retcode VALUE 504,
*   rc_last_no_authority_error     TYPE retcode VALUE 599,   &quot;#EC NEEDED
*
** errors for wrong parameters
*   rc_first_wrong_par_error       TYPE retcode VALUE 600,   &quot;#EC NEEDED
*   rc_prohibited_command_name     TYPE retcode VALUE 601,
*   rc_prohibited_sap_command_name TYPE retcode VALUE 602,
*   rc_parameters_too_long         TYPE retcode VALUE 603,
*   rc_too_many_parameters         TYPE retcode VALUE 604,
*   rc_wrong_check_call_interface  TYPE retcode VALUE 605,
*   rc_illegal_command             TYPE retcode VALUE 606,
*   rc_screen_not_init             TYPE retcode VALUE 607,
*   rc_last_wrong_par_error        TYPE retcode VALUE 699,   &quot;#EC NEEDED
*
** errors for &apos;object exists already&apos;
*   rc_first_already_exists_error  TYPE retcode VALUE 700,   &quot;#EC NEEDED
*   rc_sap_command_exists_already  TYPE retcode VALUE 701,
*   rc_cus_command_exists_already  TYPE retcode VALUE 702,
*   rc_command_already_exists      TYPE retcode VALUE 703,
*   rc_last_already_exists_error   TYPE retcode VALUE 799,   &quot;#EC NEEDED
*
** errors for &apos;object does not exist&apos;
*   rc_first_does_not_exist_error  TYPE retcode VALUE 800,   &quot;#EC NEEDED
    rc_command_not_found           TYPE retcode VALUE 801,
*   rc_host_does_not_exist         TYPE retcode VALUE 802,   &quot;#EC NEEDED
*   rc_job_does_not_exist          TYPE retcode VALUE 803,
*   rc_last_does_not_exist_error   TYPE retcode VALUE 899,   &quot;#EC NEEDED
*
** unknown errors
*   rc_first_unknown_error         TYPE retcode VALUE 900,   &quot;#EC NEEDED
*   rc_unknown_error               TYPE retcode VALUE 901,
*   rc_x_error                     TYPE retcode VALUE 902,
*   rc_external_error              TYPE retcode VALUE 903,
*   rc_last_unknown_error          TYPE retcode VALUE 999,   &quot;#EC NEEDED
*
** action cancelled
*   rc_first_cancelled_error       TYPE retcode VALUE 1000,  &quot;#EC NEEDED
*   rc_security_risk               TYPE retcode VALUE 1001,
*   rc_action_cancelled            TYPE retcode VALUE 1002,
*   rc_program_start_error         TYPE retcode VALUE 1003,
*   rc_program_termination_error   TYPE retcode VALUE 1004,
*   rc_communication_error         TYPE retcode VALUE 1005,
*   rc_system_error                TYPE retcode VALUE 1006,
*   rc_cannot_get_rfc_dest         TYPE retcode VALUE 1007,  &quot;#EC NEEDED
*   rc_wrong_asynch_params         TYPE retcode VALUE 1008,  &quot;#EC NEEDED
*   rc_last_cancelled_error        TYPE retcode VALUE 1099,  &quot;#EC NEEDED
*
** error while pasring parameters
*   rc_first_parse_error          TYPE retcode VALUE 1100,   &quot;#EC NEEDED
*   rc_parse_separator_missing    TYPE retcode VALUE 1101,   &quot;#EC NEEDED
*   rc_parse_result_too_long      TYPE retcode VALUE 1102,   &quot;#EC NEEDED
*   rc_parse_lgflnm_doesnt_exist  TYPE retcode VALUE 1103,   &quot;#EC NEEDED
*   rc_parse_error_file_set_name  TYPE retcode VALUE 1104,   &quot;#EC NEEDED
*   rc_parse_par_expected         TYPE retcode VALUE 1105,   &quot;#EC NEEDED
*   rc_parse_add_par_not_allowed  TYPE retcode VALUE 1106,   &quot;#EC NEEDED
*   rc_parse_cust_fm_doesnt_exist TYPE retcode VALUE 1107,   &quot;#EC NEEDED
*   rc_parse_sap_fm_doesnt_exist  TYPE retcode VALUE 1108,   &quot;#EC NEEDED
*   rc_parse_opsys_conv_broken    TYPE retcode VALUE 1109,   &quot;#EC NEEDED
*   rc_parse_wrong_interface      TYPE retcode VALUE 1110,   &quot;#EC NEEDED
*   rc_last_parse_error           TYPE retcode VALUE 1199,   &quot;#EC NEEDED

* last error
    rc_last_error                  TYPE retcode VALUE 9999. &quot;#EC NEEDED
  DATA d_type TYPE td_comptype.

  TRY.
    d_type = component-&gt;get_type( ).
    CASE d_type.
      WHEN st_os_cmd.
        d_name = component-&gt;get_name( ).
        s_name = comp_to_key( d_name ).
        external_command-name = s_name-name.
        external_command-opsystem = s_name-opsystem.
        PERFORM command_delete IN PROGRAM saplsxpt
                USING d_dialog
             CHANGING external_command
                      d_rc.
        IF d_rc &lt;&gt; 0.
          CASE d_rc.
            WHEN rc_command_not_found.
              RAISE EXCEPTION TYPE zaplink_cx_connector
                EXPORTING textid = zaplink_cx_connector=&gt;not_found.
            WHEN OTHERS.
              RAISE EXCEPTION TYPE zaplink_cx_connector
                EXPORTING textid = zaplink_cx_connector=&gt;system_error.
          ENDCASE.
        ENDIF.
      WHEN OTHERS.
        mac_raise_type_not_supported &apos;ZAPLINK_OS_COMMAND&apos; d_type.
    ENDCASE.
    mac_def_catch zaplink_cx_connector.
  ENDTRY.
  result = abap_true.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~DO_EXISTS">
    <SOURCE>`
  DATA d_name TYPE td_compname.
  DATA d_type TYPE td_comptype.
  DATA s_name TYPE ts_os_cmd_key.

  TRY.
    exists = me-&gt;exists-not_exists.
    d_type = component-&gt;get_type( ).
    CASE d_type.
      WHEN st_os_cmd.
        d_name = component-&gt;get_name( ).
        s_name = comp_to_key( d_name ).
        CALL FUNCTION &apos;SXPG_COMMAND_GET&apos;
          EXPORTING
            commandname             = s_name-name
            operatingsystem         = s_name-opsystem
*         TARGETSYSTEM            = &apos;*&apos;
*       IMPORTING
*         COMMAND                 =
          EXCEPTIONS
            command_not_found       = 1
            OTHERS                  = 2.
        IF sy-subrc = 0.
          exists = me-&gt;exists-exists.
        ENDIF.
      WHEN OTHERS.
        mac_raise_type_not_supported &apos;ZAPLINK_OS_COMMAND&apos; d_type.
    ENDCASE.

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~IS_SUPPORTED_VERSION">
    <SOURCE>`
result = abap_false.
  IF version = _ver.
    result = abap_true.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~READ_FROM_SAP">
    <SOURCE>`
  DATA d_name TYPE td_compname.
  DATA d_type TYPE td_comptype.
  DATA s_name TYPE ts_os_cmd_key.
  DATA o_data  TYPE to_data.

  TRY.
    CREATE OBJECT object.
    d_type = component-&gt;get_type( ).
    CASE d_type.
      WHEN st_os_cmd.
        d_name = component-&gt;get_name( ).
        s_name = comp_to_key( d_name ).

        CREATE OBJECT o_data.
* Main data
        CALL FUNCTION &apos;SXPG_COMMAND_GET&apos;
          EXPORTING
            commandname             = s_name-name
            operatingsystem         = s_name-opsystem
*         TARGETSYSTEM            = &apos;*&apos;
          IMPORTING
            command                 = o_data-&gt;a0_maindata
          EXCEPTIONS
            command_not_found       = 1
            OTHERS                  = 2.
        IF sy-subrc &lt;&gt; 0.
          RAISE EXCEPTION TYPE zaplink_cx_connector
             EXPORTING
               textid = zaplink_cx_connector=&gt;not_found
               name   = d_name
               type   = st_os_cmd.
        ENDIF.
        object-&gt;set_component( component ).
        CLEAR: o_data-&gt;a0_maindata-name,
               o_data-&gt;a0_maindata-opsystem.
        object-&gt;raw ?= o_data.
      WHEN OTHERS.
        CLEAR object.
        mac_raise_type_not_supported &apos;ZAPLINK_OS_COMMAND&apos; d_type.
    ENDCASE.
    object-&gt;update_connector_data( me ).                    &quot; Issue 66
    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~WRITE_TO_SAP">
    <SOURCE>`
  DATA d_name TYPE td_compname.
  DATA d_type TYPE td_comptype.
  DATA s_name TYPE ts_os_cmd_key.
  DATA o_data  TYPE to_data.
  DATA o_comp  TYPE to_component.

  d_type = object-&gt;type.
  CASE d_type.
    WHEN st_os_cmd.
      o_data ?= object-&gt;raw.
*      CALL FUNCTION &apos;RS_CORR_INSERT&apos;
*           EXPORTING
*                author              = sy-uname
*                global_lock         = &apos;X&apos;
*                object              = ls_t100a-arbgb
*                object_class        = &apos;T100&apos;
*                devclass            = &apos;$TMP&apos;
*                master_language     = sy-langu
*                mode                = &apos;INSERT&apos;
**       IMPORTING
**            AUTHOR              = UNAME
**            KORRNUM             = CORRNUMBER_LOCAL
**            DEVCLASS            = DEVCLASS_LOCAL
*           EXCEPTIONS
*                cancelled           = 1
*                permission_failure  = 2
*                unknown_objectclass = 3.
*
*      IF sy-subrc &lt;&gt; 0.
*        CASE sy-subrc.
*          WHEN 2.
*            RAISE EXCEPTION TYPE zaplink_cx_connector
*                  EXPORTING
*                      name = _name
*                      type = object-&gt;type
*                  devclass = &apos;$TMP&apos;
*                    textid = zaplink_cx_connector=&gt;not_authorized.
*          WHEN OTHERS.
*            RAISE EXCEPTION TYPE zaplink_cx_connector
*                  EXPORTING
*                      name = _name
*                      type = object-&gt;type
*                    textid = zaplink_cx_connector=&gt;system_error.
*        ENDCASE.
*      ENDIF.

* Main data
      d_name = object-&gt;get_name( ).
      s_name = comp_to_key( d_name ).
      o_data-&gt;a0_maindata-name = s_name-name.
      o_data-&gt;a0_maindata-opsystem = s_name-opsystem.
      CALL FUNCTION &apos;SXPG_COMMAND_INSERT&apos;
        EXPORTING
          command                      = o_data-&gt;a0_maindata
*         PUBLIC                       =
*         DIALOG                       =
        EXCEPTIONS
          command_already_exists       = 1
          no_permission                = 2
          parameters_wrong             = 3
          foreign_lock                 = 4
          system_failure               = 5
          OTHERS                       = 6.
      IF sy-subrc &lt;&gt; 0.
        IF sy-subrc &lt;&gt; 1.
          o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname  = &apos;SXPG_COMMAND_INSERT&apos;
                                                   subrc     = sy-subrc
                                                   classname = &apos;ZAPLINK_CX_CONNECTOR&apos;
*                                                   textid    = SYSTEM_ERROR
                                                 ).
          RAISE EXCEPTION o_mycx.
        ENDIF.
        CALL FUNCTION &apos;SXPG_COMMAND_MODIFY&apos;
          EXPORTING
            command                = o_data-&gt;a0_maindata
*           DIALOG                 =
          EXCEPTIONS
            no_permission          = 1
            parameters_wrong       = 2
            system_failure         = 3
            foreign_lock           = 4
            OTHERS                 = 5.
        IF sy-subrc &lt;&gt; 0.
          o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname  = &apos;SXPG_COMMAND_MODIFY&apos;
                                                   subrc     = sy-subrc
                                                   classname = &apos;ZAPLINK_CX_CONNECTOR&apos;
*                                                   textid    = SYSTEM_ERROR
                                                 ).
          RAISE EXCEPTION o_mycx.
        ENDIF.
      ENDIF.

      CREATE OBJECT o_comp.
      o_comp-&gt;set_type( st_os_cmd ).
      MOVE-CORRESPONDING o_data-&gt;a0_maindata TO s_name.
      d_name = key_to_comp( s_name ).
      o_comp-&gt;set_name( d_name ).
      CREATE OBJECT components.
      components-&gt;add( o_comp ).
    WHEN OTHERS.
      mac_raise_type_not_supported &apos;ZAPLINK_OS_COMMAND&apos; d_type.
  ENDCASE.</SOURCE>
   </ITEM>
  </REDEFINITIONS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" EXPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TO_DATA" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_EXCC_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="OS External Command Definition"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_OS_CMD_KEY" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4">
    begin of TS_OS_CMD_KEY,
      name     type SXPGCOSTAB-name,
      OPSYSTEM type SXPGCOSTAB-OPSYSTEM,
    end of TS_OS_CMD_KEY
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="OS Command Key"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
