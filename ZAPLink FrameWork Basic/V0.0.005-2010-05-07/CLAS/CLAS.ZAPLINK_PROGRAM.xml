<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="C970FA1A2CEE232A3D3106BF46E5CA90" CODE_SIGNATURE="8685011D23C652567DD9243ED1B3F06C" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_PROGRAM" TYPE="CLAS" VERSION="1.01">
 <DEPENDENCIES>
  <ITEM TYPE="CLAS" NAME="ZAPLINK_CONNECTOR_"/>
  <ITEM TYPE="CLAS" NAME="ZAPLINK_PROG_DATA"/>
 </DEPENDENCIES>
 <DIRECTORY DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <INHERITANCE REFCLSNAME="ZAPLINK_CONNECTOR_" STATE="1"/>
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="Data for Class">
     <DOCUMENTATION TDFRELES="700" TDLRELES="700" TDLINESIZE="072">U1&amp;FUNCTIONALITY&amp;
ASConnector for :
AS,,- PROG : ABAP Program
U1&amp;RELATIONS&amp;
ASIs part of ZAP Link Framework as Official Connector.
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AShttps://code.google.com/p/zaplink/wiki/Connector</DOCUMENTATION>
    </ITEM>
   </TEXTS>
  </A0_MAINDATA>
  <ATTRIBUTS>
   <ITEM CMPNAME="BALLOG_SUBOBJECT" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;CNX_PROGRAM&apos;" TYPTYPE="1" TYPE="BALSUBOBJ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Application Log: Subobject"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="R_DOC_ID" STATE="1" EDITORDER="2 " ATTDECLTYP="1" TYPTYPE="1" TYPE="TR_DOCID">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Documentation Object"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="ST_PROGRAM" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;PROG&apos;" TYPTYPE="1" TYPE="TD_COMPTYPE">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Transport category : ABAP Object"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_UUID" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;AAAD0A4B07A5A05AE1000000AC120173&apos;" TYPTYPE="1" TYPE="TD_CONNUUID">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="UUID for connector Program"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_VER" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;1.0&apos;" TYPTYPE="1" TYPE="TD_CONNVER">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Connector Version"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <DEFERRED>
   <CLASSES>
    <ITEM TYPEGROUP="ZAPLINK_PROG_DATA" TPUTYPE="1" IMPLICIT="X"/>
   </CLASSES>
  </DEFERRED>
  <LOCAL>
   <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE zaplink_macros.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="2 " MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
*table TDCLT
*DOKCLASS DOKTITEL
*CF       Program function                                             Program              Function
*CM       Pull-down menu/menu bar                                      Program              Menu
*RE       Report/Function Group, Logical DB                            Program/module pool
  DATA _id LIKE LINE OF r_doc_id.

  _id-sign = &apos;I&apos;.
  _id-option = &apos;EQ&apos;.
  _id-low = &apos;CF&apos;. APPEND _id TO r_doc_id.
  _id-low = &apos;CM&apos;. APPEND _id TO r_doc_id.
  _id-low = &apos;RE&apos;. APPEND _id TO r_doc_id.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDTYPE="2">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
  DATA type LIKE LINE OF supported_types.

  CALL METHOD super-&gt;constructor.
  mac_create_log application_log ballog_subobject space.
  type-type = st_program. INSERT type INTO TABLE supported_types.

  uuid = _uuid.
  version = _ver.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_PROGRAM_SIGNATURE" EXPOSURE="2" STATE="1" EDITORDER="3 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get Source code Signature of a program"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PROGRAM_NAME" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Program Name"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="ZAPLINK_DATATYPES~TD_CHECKSUM">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="MD5 Hash"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA t_code TYPE tt_abaprawsource.
  DATA d_src  TYPE string.

  t_code = get_prog_rawsource( program_name ).
  zaplink_tools=&gt;pretty_printer( CHANGING table = t_code ).
  zaplink_tools=&gt;condense_abap_source( CHANGING table = t_code ).
  d_src = zaplink_tools=&gt;table_2_string( t_code ).
  d_src = zaplink_tools=&gt;clean_abap_string( d_src ).
  result = zaplink_tools=&gt;calculate_md5_hash( d_src ).</SOURCE>
   </ITEM>
  </METHODS>
  <REDEFINITIONS>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~ANONYMIZE">
    <SOURCE>`
  DATA o_prog TYPE to_program.

  TRY.
      super-&gt;zaplink_cnx_ext_cleaner~anonymize( object ).
    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.

  o_prog ?= object-&gt;raw.
  o_prog-&gt;anonymize( ).</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~UNANONYMIZE">
    <SOURCE>`
  DATA o_prog TYPE to_program.

  TRY.
      super-&gt;zaplink_cnx_ext_cleaner~unanonymize( object ).
    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.

  o_prog ?= object-&gt;raw.
  o_prog-&gt;unanonymize( ).</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CNX_EXT_CODE_SIGNATURE~GET_SIGNATURE">
    <SOURCE>`
  DATA d_type TYPE td_comptype.
  DATA d_prog TYPE td_progname.

  TRY.
      d_type = component-&gt;get_type( ).
      CASE d_type.
        WHEN st_program.
          d_prog = component-&gt;get_name( ).
          result = get_program_signature( d_prog ).
        WHEN OTHERS.
          mac_raise_type_not_supported &apos;ZAPLINK_PROGRAM&apos; d_type.
      ENDCASE.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~CREATE_NEW_RAW">
    <SOURCE>`
  DATA o_prog TYPE to_program.

  CREATE OBJECT object.
  CASE type.
    WHEN st_program.
      CREATE OBJECT o_prog.
      object-&gt;raw = o_prog.
    WHEN OTHERS.
      CLEAR object.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
      RAISE EXCEPTION TYPE zaplink_cx_connector
        EXPORTING
          textid = zaplink_cx_connector=&gt;type_not_supported
          type   = type
          connclass = &apos;ZAPLINK_PROGRAM&apos;.
  ENDCASE.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~DELETE_FROM_SAP">
    <SOURCE>`
  DATA program TYPE sy-repid.
  DATA type  TYPE td_comptype.

  TRY.
      type = component-&gt;get_type( ).
      CASE type.
        WHEN st_program.
          program = component-&gt;get_name( ).
          CALL FUNCTION &apos;RS_DELETE_PROGRAM&apos;
            EXPORTING
*          CORRNUMBER                       =
              program                          = program
*          SUPPRESS_CHECKS                  = &apos; &apos;
*          SUPPRESS_COMMIT                  = &apos; &apos;
              suppress_popup                   = &apos;X&apos;
*          MASS_DELETE_CALL                 = &apos; &apos;
*          WITH_CUA                         = &apos;X&apos;
*          WITH_DOCUMENTATION               = &apos;X&apos;
*          WITH_DYNPRO                      = &apos;X&apos;
*          WITH_INCLUDES                    = &apos; &apos;
*          WITH_TEXTPOOL                    = &apos;X&apos;
*          WITH_VARIANTS                    = &apos;X&apos;
*          TADIR_DEVCLASS                   =
*          SKIP_PROGRESS_IND                = &apos; &apos;
*          FORCE_DELETE_USED_INCLUDES       = &apos; &apos;
*        IMPORTING
*          CORRNUMBER                       =
*          PROGRAM                          =
            EXCEPTIONS
              enqueue_lock                     = 1
              object_not_found                 = 2
              permission_failure               = 3
              reject_deletion                  = 4
              OTHERS                           = 5.
          IF sy-subrc &lt;&gt; 0.
            o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;RS_DELETE_PROGRAM&apos;
                                                        subrc = sy-subrc
                                                    classname = &apos;ZAPLINK_CX_CONNECTOR&apos;
                                                    textid = zaplink_cx=&gt;system_error ).
            RAISE EXCEPTION o_mycx.
          ENDIF.
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = type
              connclass = &apos;ZAPLINK_PROGRAM&apos;.
      ENDCASE.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.

  result = abap_true.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~DO_EXISTS">
    <SOURCE>`
  DATA _name TYPE trdir-name.
  DATA type  TYPE td_comptype.

  exists = me-&gt;exists-not_exists.

  TRY.
      type = component-&gt;get_type( ).
      CASE type.
        WHEN st_program.
          _name = component-&gt;get_name( ).
          SELECT SINGLE name INTO _name
            FROM trdir
            WHERE name = _name.
          IF sy-subrc = 0.
            exists = me-&gt;exists-exists.
          ENDIF.
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = type
              connclass = &apos;ZAPLINK_MESSAGE&apos;.
      ENDCASE.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~IS_SUPPORTED_VERSION">
    <SOURCE>`
  result = abap_false.
  if version = _ver.
    result = abap_true.
  endif.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~READ_FROM_SAP">
    <SOURCE>`
*Issue:7
  TYPES:
    BEGIN OF ts_doc,
      prog TYPE programm,
      wildcard(1) TYPE c,
    END OF ts_doc.
  DATA s_obj TYPE ts_doc.
*Issue:7
  DATA o_data      TYPE to_program.
  DATA s_fm_data   TYPE ts_fm_data.
  DATA _prog       TYPE td_progname.
  DATA _name       TYPE td_compname.
  DATA _obj        TYPE doku_obj.
  DATA type        TYPE td_comptype.

  TRY.
    type = component-&gt;get_type( ).
    CREATE OBJECT object.
    object-&gt;set_component( component ).
    CASE type.
      WHEN st_program.
        _prog = _name = object-&gt;name.
        CREATE OBJECT o_data.
        SELECT SINGLE *
          INTO s_fm_data-header
          FROM progdir    &quot; reposrc
*The databae view &quot;REPOSRC&quot; is write-protected, so it cannot be changed.
          WHERE name = _name
            AND state = &apos;A&apos;.        &quot; Active
        IF sy-subrc &lt;&gt; 0.
          SELECT SINGLE *
            INTO s_fm_data-header
            FROM progdir    &quot;reposrc
            WHERE name = _name
              AND state = &apos;I&apos;.      &quot; Inactive
        ENDIF.

* Source code
        s_fm_data-source = get_prog_source( _prog ).
*    INCLUDE TYPE reposrc. &quot;The databae view &quot;REPOSRC&quot; is write-protected, so it cannot be changed.

* Texts Pool
        s_fm_data-textspool = get_prog_textpool( _prog ).

* Dynpro : Issue 8
        s_fm_data-dynpros = get_dynpros( _prog ).

* Menu Painter : Issue 9
        s_fm_data-menupainter = get_menus( _prog ).

        SELECT *
          INTO TABLE s_fm_data-texts
          FROM trdirti
          WHERE name = _name.

* Documentation
*      CONCATENATE _name &apos;*&apos; INTO _obj. &quot; Issue:7
        s_obj-prog = _name.
        s_obj-wildcard = &apos;*&apos;.
        _obj = s_obj.
*Issue:7
        s_fm_data-docs = zaplink_documentation=&gt;get( ids = zaplink_prog_data=&gt;r_doc_ids-prog
                                                  object = _obj ).

        o_data-&gt;from_data( s_fm_data ).
        o_data-&gt;_code_signature = get_program_signature( o_data-&gt;a0_maindata-name ).

        CLEAR o_data-&gt;a0_maindata-name.
        object-&gt;raw = o_data.
      WHEN OTHERS.
        CLEAR object.
        mac_raise_type_not_supported &apos;ZAPLINK_PROGRAM&apos; type.
    ENDCASE.
    object-&gt;update_connector_data( me ).                    &quot; Issue 66
    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" MTDNAME="ZAPLINK_CONNECTOR~WRITE_TO_SAP">
    <SOURCE>`
  DATA o_data      TYPE to_program.
  DATA _prog       TYPE programm.
  DATA _oname      TYPE e071-obj_name.
  DATA _rep        TYPE progdir.
  DATA _comp       TYPE to_component.
  DATA _name       TYPE td_compname.
  DATA s_fm_data   TYPE ts_fm_data.

  TRY.

      CASE object-&gt;type.
        WHEN st_program.
          o_data ?= object-&gt;raw.
          _oname = _prog = o_data-&gt;a0_maindata-name = object-&gt;name.
          s_fm_data = o_data-&gt;to_data( ).
          CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
            EXPORTING
              object                  = &apos;REPS&apos;
              obj_name                = _oname
*              DELETED_FLAG            = &apos; &apos;
*           IMPORTING
*             OBJECT_INSERTED         =
            EXCEPTIONS
              wrong_object_name       = 1
              OTHERS                  = 2.
          IF sy-subrc &lt;&gt; 0.
            mac_add_mf_and_raise &apos;RS_INSERT_INTO_WORKING_AREA&apos; sy-subrc.
          ENDIF.

          CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
            EXPORTING
              object                  = &apos;REPT&apos;
              obj_name                = _oname
*              DELETED_FLAG            = &apos; &apos;
*            IMPORTING
*              OBJECT_INSERTED         =
            EXCEPTIONS
              wrong_object_name       = 1
              OTHERS                  = 2.
          IF sy-subrc &lt;&gt; 0.
            mac_add_mf_and_raise &apos;RS_INSERT_INTO_WORKING_AREA&apos; sy-subrc.
          ENDIF.

          MOVE-CORRESPONDING s_fm_data-header TO _rep.
          _rep-state = &apos;I&apos;.   MODIFY progdir FROM _rep.
*      MODIFY reposrc FROM _rep. &quot;The databae view &quot;REPOSRC&quot; is write-protected, so it cannot be changed.
          _rep-state = &apos;A&apos;.   MODIFY progdir FROM _rep.

* Source code
          set_prog_source( program = _prog
                            source = s_fm_data-source ).
* Text Pool
          set_prog_textpool( program = _prog
                            textpool = s_fm_data-textspool ).
* Dynpro : Issue 8
          set_dynpros( program = _prog
                       dynpros = s_fm_data-dynpros ).

* Menu Painter : Issue 9
          set_menus( program = _prog
                       menus = s_fm_data-menupainter ).

* Documentation
          zaplink_documentation=&gt;set( t_docs = s_fm_data-docs ).

*Texts
          DELETE FROM trdirti WHERE name = s_fm_data-header-name.
          MODIFY trdirti FROM TABLE s_fm_data-texts.

          CREATE OBJECT _comp.
          _comp-&gt;set_type( st_program ).
          _name = _prog.
          _comp-&gt;set_name( _name ).
          CREATE OBJECT components.
          components-&gt;add( _comp ).
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = object-&gt;type
              connclass = &apos;ZAPLINK_PROGRAM&apos;.
      ENDCASE.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
  </REDEFINITIONS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" IMPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TO_PROGRAM" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_PROG_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Commun Data for Class &amp; Interface"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_FM_DATA" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="ZAPLINK_PROG_DATA=&gt;TS_FM_DATA"/>
   <ITEM CMPNAME="TS_PROG_ATTR" STATE="1" EDITORDER="1 " TYPTYPE="4">
    BEGIN OF ts_prog_attr.
  INCLUDE TYPE ts_base_attributs AS base.
  TYPES:
    END OF ts_prog_attr
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Program Attributs"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_SOURCE" EXPOSURE="2" STATE="1" EDITORDER="5 " TYPTYPE="1" TYPE="STRING">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ABAP Source code"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_TEXT" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4">begin of ts_text,
      langu   type SPRAS,
      ENTRY	  type TEXTPOOLTX,
      LENGTH  type TEXTPOOLLN,
    end of ts_text</ITEM>
   <ITEM CMPNAME="TS_TEXTPOOL" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4">begin of ts_textpool,
      ID    type  TEXTPOOLID,
      KEY	  type  TEXTPOOLKY,
      texts type  tt_texts,
    end of ts_textpool</ITEM>
   <ITEM CMPNAME="TT_TEXTPOOLS" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4">
    TT_TEXTPOOLs type SORTED TABLE OF ts_textpool WITH UNIQUE key ID KEY
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Table of textppool"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_TEXTS" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4">tt_texts type SORTED TABLE OF ts_text WITH UNIQUE KEY langu</ITEM>
   <ITEM CMPNAME="T_RAW" EXPOSURE="2" STATE="1" TYPTYPE="1" TYPE="RSWSOURCET">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ABAP Source"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
