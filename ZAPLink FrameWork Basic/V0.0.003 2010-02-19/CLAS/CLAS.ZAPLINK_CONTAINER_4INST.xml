<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="77BCF5AB491BB47677A2F2AAD97730E2" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_CONTAINER_4INST" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-FRAMEWORK-CORE" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" UUID="57F8034B756EB95AE1000000AC120173" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="ZapLink Container : For install purpose"/>
   </TEXTS>
  </A0_MAINDATA>
  <ALIASES>
   <ITEM CMPNAME="BALLOG_OBJECT" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="BALLOG_OBJECT"/>
   <ITEM CMPNAME="COMP_NODENAME" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="COMP_NODENAME"/>
   <ITEM CMPNAME="EXISTS" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="EXISTS"/>
   <ITEM CMPNAME="LINE_SEPARATOR" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="LINE_SEPARATOR"/>
   <ITEM CMPNAME="TD_ABAPSOURCE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_ABAPSOURCE"/>
   <ITEM CMPNAME="TD_CHECKSUM" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CHECKSUM"/>
   <ITEM CMPNAME="TD_CLASSNAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CLASSNAME"/>
   <ITEM CMPNAME="TD_COMPEXISTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPEXISTS"/>
   <ITEM CMPNAME="TD_COMPNAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPNAME"/>
   <ITEM CMPNAME="TD_COMPTEXT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPTEXT"/>
   <ITEM CMPNAME="TD_COMPTYPE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPTYPE"/>
   <ITEM CMPNAME="TD_CONNCLASS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNCLASS"/>
   <ITEM CMPNAME="TD_CONNEXISTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNEXISTS"/>
   <ITEM CMPNAME="TD_CONNUUID" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNUUID"/>
   <ITEM CMPNAME="TD_CONNVER" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNVER"/>
   <ITEM CMPNAME="TD_CONTNAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONTNAME"/>
   <ITEM CMPNAME="TD_CONTVER" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONTVER"/>
   <ITEM CMPNAME="TD_DEVCLASS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_DEVCLASS"/>
   <ITEM CMPNAME="TD_DOC_ID" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_DOC_ID"/>
   <ITEM CMPNAME="TD_EXISTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_EXISTS"/>
   <ITEM CMPNAME="TD_FILENAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_FILENAME"/>
   <ITEM CMPNAME="TD_FILETYPE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_FILETYPE"/>
   <ITEM CMPNAME="TD_LANG" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_LANG"/>
   <ITEM CMPNAME="TD_LIGHT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_LIGHT"/>
   <ITEM CMPNAME="TD_OBJ_TYPE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_OBJ_TYPE"/>
   <ITEM CMPNAME="TD_ORDERKIND" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_ORDERKIND"/>
   <ITEM CMPNAME="TD_PROGNAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_PROGNAME"/>
   <ITEM CMPNAME="TD_SEL_ACTION" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_SEL_ACTION"/>
   <ITEM CMPNAME="TD_SUBSTITUTIONKIND" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_SUBSTITUTIONKIND"/>
   <ITEM CMPNAME="TD_TRANSPORT_REQUEST" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TRANSPORT_REQUEST"/>
   <ITEM CMPNAME="TD_TXTP_ID" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_ID"/>
   <ITEM CMPNAME="TD_TXTP_KIND" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_KIND"/>
   <ITEM CMPNAME="TD_TXTP_LEN" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_LEN"/>
   <ITEM CMPNAME="TD_TXTP_TEXT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_TEXT"/>
   <ITEM CMPNAME="TD_TYPEORDER" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TYPEORDER"/>
   <ITEM CMPNAME="TD_TYPE_AS_TEXT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TYPE_AS_TEXT"/>
   <ITEM CMPNAME="TEXTPOOL_KINDS" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TEXTPOOL_KINDS"/>
   <ITEM CMPNAME="TO_XML" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TO_XML"/>
   <ITEM CMPNAME="TR_DLVUNIT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_DLVUNIT"/>
   <ITEM CMPNAME="TR_DOCID" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_DOCID"/>
   <ITEM CMPNAME="TR_PACKAGES" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_PACKAGES"/>
   <ITEM CMPNAME="TR_TR" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_TR"/>
   <ITEM CMPNAME="TS_BASE_ATTRIBUTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_BASE_ATTRIBUTS"/>
   <ITEM CMPNAME="TS_COMPKEY" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_COMPKEY"/>
   <ITEM CMPNAME="TS_COMPONENT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_COMPONENT"/>
   <ITEM CMPNAME="TS_CONNDATA" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONNDATA"/>
   <ITEM CMPNAME="TS_CONN_CLASS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONN_CLASS"/>
   <ITEM CMPNAME="TS_CONN_DEF" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONN_DEF"/>
   <ITEM CMPNAME="TS_CONTDATA" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONTDATA"/>
   <ITEM CMPNAME="TS_DIRECTORY" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_DIRECTORY"/>
   <ITEM CMPNAME="TS_DOC" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_DOC"/>
   <ITEM CMPNAME="TS_HEAD" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_HEAD"/>
   <ITEM CMPNAME="TS_LANG" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_LANG"/>
   <ITEM CMPNAME="TS_TXTP_TEXT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TXTP_TEXT"/>
   <ITEM CMPNAME="TS_TXTP_TEXTPOOL" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TXTP_TEXTPOOL"/>
   <ITEM CMPNAME="TS_TYPE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TYPE"/>
   <ITEM CMPNAME="TT_ABAPRAWSOURCE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_ABAPRAWSOURCE"/>
   <ITEM CMPNAME="TT_COMPKEYS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_COMPKEYS"/>
   <ITEM CMPNAME="TT_CONN_CLASSES" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_CONN_CLASSES"/>
   <ITEM CMPNAME="TT_DOCS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_DOCS"/>
   <ITEM CMPNAME="TT_RAWTEXT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_RAWTEXT"/>
   <ITEM CMPNAME="TT_TXTP_TEXTPOOLS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TXTP_TEXTPOOLS"/>
   <ITEM CMPNAME="TT_TXTP_TEXTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TXTP_TEXTS"/>
   <ITEM CMPNAME="TT_TYPES" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TYPES"/>
  </ALIASES>
  <ATTRIBUTS>
   <ITEM CMPNAME="BALLOG_SUBOBJECT" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;CONTAINER&apos;" TYPTYPE="1" TYPE="BALSUBOBJ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Application Log: Subobject"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="FILE" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="TO_FILE">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="File Manager"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="LOG" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTRDONLY="X" TYPTYPE="1" TYPE="TO_LOG">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Message Collector: Standard Implementation"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_CURSOR" VERSION="1" STATE="1" EDITORDER="2 " TYPTYPE="3" TYPE="IF_IXML_NODE">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Node of parent search in _is_subcomponent( )"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_CX" VERSION="1" STATE="1" EDITORDER="3 " ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_ROOT_EXCEPTION">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_MYCX" VERSION="1" STATE="1" EDITORDER="1 " ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_EXCEPTION">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TN_CONTAINER_ROOT" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;CONTAINER&apos;" TYPTYPE="1" TYPE="STRING">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Container XML root node name"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="XMLDATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="IF_IXML_DOCUMENT">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="XML data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="XMLENGINE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="1" TYPTYPE="3" TYPE="IF_IXML">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="XML Engine"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_COMPLIST" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="4 " TYPTYPE="1" TYPE="TO_LIST">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Component list"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_NODEINDEX" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="1" TYPE="TT_NODEINDEX">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="XML Node component index table"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_OPTIONS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="TO_OPTIONS">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Container&apos;s Options"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <INTERFACES>
   <ITEM REFCLSNAME="ZAPLINK_DATATYPES" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1"/>
  </INTERFACES>
  <LOCAL>
   <TYPES>
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* IMPLEMENTATION OR PRIVATE METHOD&apos;S SIGNATURE</TYPES>
   <IMPLEMENTATIONS>
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* LOCAL HELPER CLASSES</IMPLEMENTATIONS>
   <MACROS>
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE ZAPLINK_MACROS.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>
  xmlengine = cl_ixml=&gt;create( ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " MTDTYPE="2">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CONSTRUCTOR"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="O_FILE" VERSION="1" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_FILE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="File Manager"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>
  CREATE OBJECT _complist.
  CREATE OBJECT _options.
  CREATE OBJECT log.
  CALL METHOD log-&gt;init
    EXPORTING
      id_object      = ballog_object
      id_subobject   = ballog_subobject
*      id_extnumber   =
      auto_upd_custo = abap_true
*      id_activity    = ACT_CREATE
    EXCEPTIONS
      error          = 1
      OTHERS         = 2.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
  xmldata = xmlengine-&gt;create_document( ).
  file = o_file.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_CONTENT" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="5 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get Content list"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  TRY.
      result = _complist-&gt;clone( ).
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_OPTIONS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="6 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Options : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_OPTIONS"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
result = _options.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_ROOT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get container root element"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="ROOT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARDECLTYP="3" TYPTYPE="3" TYPE="IF_IXML_NODE"/>
    </PARAMETERS>
    <SOURCE>
  root = xmldata-&gt;get_first_child( ).
  check root is bound.
*  IF root-&gt;get_name( ) &lt;&gt; tn_container_root.
*    CLEAR root.
*  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="LOAD_FROM_FILE" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="3 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Import XML container from File"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="O_FILE" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_FILE" PAROPTIONL="X">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="File Manager"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA _streamfactory TYPE REF TO if_ixml_stream_factory.
  DATA _stream TYPE REF TO if_ixml_istream.
  DATA _parser TYPE REF TO if_ixml_parser.
  DATA _doc TYPE REF TO	if_ixml_document.
  DATA _xml TYPE string.
  DATA _file  TYPE to_file.

  IF o_file IS BOUND.
    _file = o_file.
  ELSE.
    _file = file.
  ENDIF.

  TRY.
      _file-&gt;load( ).
      _xml = _file-&gt;get_filecontent( ).
    CATCH zaplink_cx_file.
      RETURN.
  ENDTRY.
  file = _file.

  _streamfactory = xmlengine-&gt;create_stream_factory( ).
  _doc = xmlengine-&gt;create_document( ).
  _stream = _streamfactory-&gt;create_istream_string( _xml ).
  _parser = xmlengine-&gt;create_parser(  stream_factory = _streamfactory
                                       istream        = _stream
                                       document       = _doc ).
  _parser-&gt;parse( ).
  IF _doc IS BOUND.
    xmldata = _doc.
  ENDIF.

  _update_componentslist( ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_OPTIONS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="8 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Options : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_OPTIONS"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
check data &lt;&gt; _options.
  _options = data.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="TRANSPORT_TO_SAP" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="4 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Transport container&apos;s compnents to SAP Components"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="OBJECT_LIST" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA o_connector  TYPE to_connector.
  DATA o_comp       TYPE to_component.
  DATA o_comp_s     TYPE to_component.
  DATA o_listsub    TYPE to_list.
  DATA o_subcomp    TYPE to_component.
  DATA o_subcomp_s  TYPE to_component.
  DATA object       TYPE to_raw.
  DATA _components  TYPE to_list.
  DATA _xml_comp    TYPE REF TO if_ixml_document.
  DATA _clone       TYPE REF TO	if_ixml_node.
  DATA _cx_connector TYPE REF TO zaplink_cx_connector.
  DATA o_raw        TYPE to_raw.
  DATA _directory   TYPE ts_directory.
  DATA o_log        TYPE to_log.

  CHECK object_list IS BOUND.
  TRY.
      object_list-&gt;keep_commun_list( _complist ).
      object_list-&gt;display_progress = abap_true.
      object_list-&gt;order_kind = zaplink_list=&gt;order_kinds-install.
      object_list-&gt;init_sel_iter( ).
      o_comp = object_list-&gt;get_next( ).
      WHILE o_comp IS BOUND.
        o_comp_s = _complist-&gt;search( o_comp ).
        o_connector = o_comp_s-&gt;connector( ).
        o_connector-&gt;options = _options.
        o_log = o_comp_s-&gt;get_msg_coll( ).
        IF NOT o_log IS BOUND.
          CREATE OBJECT o_log.
          o_comp_s-&gt;set_msg_coll( o_log ).
          CALL METHOD o_log-&gt;init
            EXPORTING
              id_object      = ballog_object
              id_subobject   = ballog_subobject
*          id_extnumber   =
              auto_upd_custo = abap_true
*          id_activity    = ACT_CREATE
            EXCEPTIONS
              error          = 1
              OTHERS         = 2.
          IF sy-subrc &lt;&gt; 0.
            log-&gt;add_symsg( ).
          ENDIF.
        ENDIF.

        _xml_comp = xmlengine-&gt;create_document( ).
        _clone = _find_component_node( o_comp_s ).
        _clone = _clone-&gt;clone( ).
        _xml_comp-&gt;if_ixml_node~append_child( _clone ).

        TRY.
* Make directory entry
            o_raw = zaplink_connectors=&gt;node_2_raw( _clone ).
            _directory = _options-&gt;directory-&gt;set_directory( o_raw ).
            o_log-&gt;add_from_instance( _options-&gt;directory-&gt;o_log ).
* Sub components
            o_listsub = o_comp_s-&gt;get_subcomponents( ).
            IF o_listsub IS BOUND.
              o_listsub-&gt;display_progress = abap_false.
              o_listsub-&gt;init_iter( ).
              o_subcomp = o_listsub-&gt;get_next( ).
              WHILE o_subcomp IS BOUND.
* ISSUE 10 : Workaround
*            o_subcomp_s = o_listsub-&gt;search( o_subcomp ).
*            _clone = _find_component_node( o_subcomp_s ).
*            o_raw = zaplink_connectors=&gt;node_2_raw( _clone ).
**            _directory =
*            _options-&gt;directory-&gt;set_directory( o_raw ).
*            IF _options-&gt;directory-&gt;log IS BOUND.
*              o_log-&gt;add_from_instance( _options-&gt;directory-&gt;log ).
*            ENDIF.
                o_subcomp = o_listsub-&gt;get_next( ).
              ENDWHILE.
            ENDIF.

            _components = o_connector-&gt;import_to_sap( _xml_comp ).
            o_comp-&gt;set_subcomponents( _components ).
            IF _components-&gt;search( o_comp ) IS BOUND.
*          CALL METHOD log-&gt;add_success
*            EXPORTING
**              id_msgid     =
*              id_msgno     =
**              id_msgv1     =
**              id_msgv2     =
**              id_msgv3     =
**              id_msgv4     =
**              id_detlevel  =
**              id_probclass =
*              .
              _components-&gt;remove( o_comp ).
            ENDIF.
          CATCH zaplink_cx_connector INTO _cx_connector.
            o_comp-&gt;set_exception( _cx_connector ).
            CALL METHOD log-&gt;add_exception
              EXPORTING
                exception    = _cx_connector.
            mac_add_log o_connector-&gt;application_log o_log &apos;E&apos;.   &quot; append application log if error is present
        ENDTRY.

        o_comp = object_list-&gt;get_next( ).
      ENDWHILE.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="UNINSTALL_FROM_SAP" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="7 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Transport container&apos;s compnents to SAP Components"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="OBJECT_LIST" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA o_connector  TYPE to_connector.
  DATA o_comp       TYPE to_component.
  DATA object       TYPE to_raw.
  DATA _done        TYPE abap_bool.
  DATA s_key        TYPE ts_component.
  DATA _cx_connector TYPE REF TO zaplink_cx_connector.

  CHECK object_list IS BOUND.
  TRY.
*  object_list-&gt;keep_commun_list( _complist ).
      object_list-&gt;display_progress = abap_true.
      object_list-&gt;order_kind = zaplink_list=&gt;order_kinds-uninstall.

      object_list-&gt;init_sel_iter( ).
      o_comp = object_list-&gt;get_next( ).
      WHILE o_comp IS BOUND.
        o_connector = o_comp-&gt;connector( ).

        TRY.
            s_key = o_comp-&gt;get_key( ).
            _done = o_connector-&gt;delete_from_sap( o_comp ).
            IF _done = abap_true.
* Succesfully deleted &amp;1 &amp;2
              SET EXTENDED CHECK OFF.
              IF 1 = 2. MESSAGE s001(zaplink_connector) WITH space space. ENDIF.
              SET EXTENDED CHECK ON.
              CALL METHOD log-&gt;add_success
                EXPORTING
                  id_msgid     = &apos;ZAPLINK_CONNECTOR&apos;
                  id_msgno     = &apos;001&apos;
                  id_msgv1     = s_key-type
                  id_msgv2     = s_key-name
*                  id_msgv3     =
*                  id_msgv4     =
                 .
            ELSE.
* Failed to delete &amp;1 &amp;2
              SET EXTENDED CHECK OFF.
              IF 1 = 2. MESSAGE e003(zaplink_connector) WITH space space. ENDIF.
              SET EXTENDED CHECK ON.
              CALL METHOD log-&gt;add_error
                EXPORTING
                  id_msgid     = &apos;ZAPLINK_CONNECTOR&apos;
                  id_msgno     = &apos;003&apos;
                  id_msgv1     = s_key-type
                  id_msgv2     = s_key-name
**              id_msgv3     =
**              id_msgv4     =
                  .
            ENDIF.
            IF o_connector-&gt;application_log IS BOUND.
              IF o_connector-&gt;application_log-&gt;has_messages_of_msgt( id_msgty     = &apos;W&apos; ) = abap_true.
                CALL METHOD log-&gt;add_from_instance
                  EXPORTING
                    io_msglist        = o_connector-&gt;application_log
                    if_add_as_subnode = abap_true.
              ENDIF.
            ENDIF.
          CATCH zaplink_cx_connector INTO _cx_connector.
            CALL METHOD log-&gt;add_exception
              EXPORTING
                exception = _cx_connector.
        ENDTRY.

        o_comp = object_list-&gt;get_next( ).
      ENDWHILE.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_ADD_TO_COMPONENTSLIST" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="6 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Add a node to composent&apos;s list"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NODE" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_NODE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Node to insert"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
*  DATA o_element   TYPE REF TO  if_ixml_element.
  DATA o_raw       TYPE to_raw.
  DATA o_comp      TYPE to_component.
  DATA o_comp_p    TYPE to_component.
  DATA o_cx_comp   TYPE REF TO zaplink_cx_component.
  DATA o_conn      TYPE to_connector.
  DATA o_list      TYPE to_list.
  DATA _index      LIKE LINE OF _nodeindex.
  DATA str         TYPE string.
  DATA d_uuid_init TYPE td_connuuid.

  CHECK node IS BOUND.
  str = node-&gt;get_name( ).
  CHECK str = comp_nodename. &quot; Security
  _index-node = node.          &quot; save current node

  TRY.
      o_raw = zaplink_connectors=&gt;node_2_raw( _index-node ).
      IF o_raw-&gt;name IS INITIAL.
*        CALL METHOD log-&gt;add_error
        EXIT.
      ENDIF.
      TRY.
          o_comp = o_raw-&gt;get_component( ).
          TRY.
              d_uuid_init = o_raw-&gt;connector.
              o_comp-&gt;set_connuuid( d_uuid_init ).
              o_conn = o_comp-&gt;connector( ).
            CATCH zaplink_cx_component INTO o_cx_comp.
*        CALL METHOD log-&gt;add_warning
              CLEAR o_raw-&gt;connector.
              o_comp-&gt;set_connuuid( d_uuid_init ).
              o_conn = o_comp-&gt;connector( ).
          ENDTRY.
        CATCH zaplink_cx_component INTO o_cx_comp.
          CALL METHOD log-&gt;add_exception
            EXPORTING
              exception    = o_cx_comp
*            id_detlevel  =
*            id_probclass =
              .
      ENDTRY.

      IF NOT o_conn IS BOUND.
*        CALL METHOD log-&gt;add_warning
      ELSE.
        IF o_conn-&gt;is_supported_version( o_raw-&gt;version ) = abap_false.
*        CALL METHOD log-&gt;add_warning
        ENDIF.
      ENDIF.

      IF _is_subcomponent( _index-node ) = abap_false.
        _complist-&gt;add( o_comp ).
        _index-key = o_comp.
        MODIFY TABLE _nodeindex FROM _index.
        IF sy-subrc &lt;&gt; 0.
          INSERT _index INTO TABLE _nodeindex.
        ENDIF.
      ELSE.
* Not working : node are the same but it&apos;s a new object. :(
*      READ TABLE _nodeindex INTO _index
*           WITH KEY node = o_cursor.
        o_raw = zaplink_connectors=&gt;node_2_raw( o_cursor ).
        o_comp_p = o_raw-&gt;get_component( ).
        o_comp_p = _complist-&gt;search( o_comp_p ).
        o_list = o_comp_p-&gt;get_subcomponents( ).
        IF NOT o_list IS BOUND.
          CREATE OBJECT o_list.
          o_comp_p-&gt;set_subcomponents( o_list ).
        ENDIF.
        o_list-&gt;add( o_comp ).
      ENDIF.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_FIND_COMPONENT_NODE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Find component node in container"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT"/>
     <ITEM SCONAME="NODE" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="3" TYPE="IF_IXML_NODE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="IF_IXML_NODE"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA o_comp   TYPE to_component.
  DATA _cx_list TYPE REF TO zaplink_cx_list.
  FIELD-SYMBOLS:
    &lt;i&gt; LIKE LINE OF _nodeindex.

  TRY.
      o_comp = _complist-&gt;search( component ).
    CATCH zaplink_cx_list INTO _cx_list.
      IF _cx_list-&gt;textid = zaplink_cx_list=&gt;not_found.
        EXIT.
      ELSE.
        CREATE OBJECT o_mycx
          EXPORTING
            textid  = zaplink_cx=&gt;system_error
            prev_cx = _cx_list.
        o_mycx-&gt;update( ).
        RAISE EXCEPTION o_mycx.
      ENDIF.
  ENDTRY.

  READ TABLE _nodeindex ASSIGNING &lt;i&gt;
       WITH TABLE KEY key = o_comp.
  IF sy-subrc = 0.
    node = &lt;i&gt;-node.
  ENDIF.

*  DATA _type     TYPE td_comptype.
*  DATA _name     TYPE td_compname.
*  DATA _cx_comp  TYPE REF TO zaplink_cx_component.
*  DATA f_type   TYPE REF TO if_ixml_node_filter.
*  DATA f_name   TYPE REF TO if_ixml_node_filter.
*  DATA o_f_node TYPE REF TO if_ixml_node_filter.
*  DATA filter   TYPE REF TO if_ixml_node_filter.
*  DATA filter_f TYPE REF TO if_ixml_node_filter.
*  DATA iterator TYPE REF TO if_ixml_node_iterator.
*  DATA _root    TYPE REF TO if_ixml_node.
*  DATA string TYPE string.
*
*  TRY.
*      _type = component-&gt;get_type( ).
*      _name = component-&gt;get_name( ).
*    CATCH zaplink_cx_component INTO _cx_comp.
*  ENDTRY.
*
*  _root = xmldata-&gt;get_root_element( ).
*  o_f_node = xmldata-&gt;create_filter_name( name = comp_nodename ).
*  string = _type.
*  f_type = xmldata-&gt;create_filter_attribute( name = &apos;TYPE&apos;
*                                            value = string ).
*  string = _name.
*  f_name = _root-&gt;create_filter_attribute( name = &apos;NAME&apos;
*                                          value = string ).
*  filter = _root-&gt;create_filter_and( filter1 = f_type
*                                     filter2 = f_name ).
*  filter_f = _root-&gt;create_filter_and( filter1 = filter
*                                       filter2 = filter_f ).
*  iterator = _root-&gt;create_iterator_filtered( depth = 1
*                                             filter = filter ).
*  node = iterator-&gt;get_next( ).
*  check node is bound.
*  WHILE _is_subcomponent( node ) = abap_true.
*    node = iterator-&gt;get_next( ).
*    IF NOT node IS BOUND.
*      EXIT.
*    ENDIF.
*  ENDWHILE.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_IS_SUBCOMPONENT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="4 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Is node a sub-component"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NODE" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_NODE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="XML Node"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="ABAP_BOOL">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="(&apos;X&apos;) node is a sub component (&apos; &apos;) node is root component"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>
  data _cursor type ref to IF_IXML_NODE.

  result = abap_false.
  clear o_cursor.
  _cursor = node-&gt;get_parent( ).
  WHILE _cursor IS BOUND.
    IF _cursor-&gt;get_name( ) = comp_nodename.
      result = abap_true.
      o_cursor = _cursor.
*      EXIT.  new the root node
    ENDIF.
    _cursor = _cursor-&gt;get_parent( ).
  ENDWHILE.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_SEARCH_COMPONENTS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="5 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Search composents from node"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NODE" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_NODE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="IF_IXML_NODE"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA o_iterator  TYPE REF TO if_ixml_node_iterator.
  DATA o_filt_name TYPE REF TO if_ixml_node_filter.
  DATA o_node      TYPE REF TO  if_ixml_node.
  DATA str         TYPE string.

  CHECK node IS BOUND.
  str = node-&gt;get_name( ).
  CHECK str &lt;&gt; &apos;#document&apos;.
  IF str = comp_nodename.
    TRY.
        _add_to_componentslist( node ).
      CATCH zaplink_cx INTO o_cx.
        mac_cascade_raise o_mycx o_cx.
    ENDTRY.
  ELSE.
    o_filt_name = node-&gt;create_filter_name( name = comp_nodename ).
    o_iterator = node-&gt;create_iterator_filtered( filter = o_filt_name ).
    o_node = o_iterator-&gt;get_next( ).
    WHILE o_node IS BOUND.
      TRY.
          _add_to_componentslist( o_node ).
        CATCH zaplink_cx INTO o_cx.
          mac_cascade_raise o_mycx o_cx.
      ENDTRY.
      o_node = o_iterator-&gt;get_next( ).&quot; get next one to allow to use &apos;continue&apos;

    ENDWHILE.
  ENDIF.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_UPDATE_COMPONENTSLIST" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Update composents list"/>
    </TEXTS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
*  CALL METHOD SUPER-&gt;_UPDATE_COMPONENTSLIST.
  DATA o_iterator  TYPE REF TO if_ixml_node_iterator.
  DATA o_node      TYPE REF TO if_ixml_node.
*  DATA str         TYPE string.

*&lt;X&gt;
*&lt;ZL_OBJECT CONNECTOR=&quot;29AD0A4B07A5A05AE1000000AC120173&quot; NAME=&quot;ZAPLINK&quot; TYPE=&quot;DEVC&quot; VERSION=&quot;1.0&quot;&gt;
* &lt;DIRECTORY SRCSYSTEM=&quot;OD4&quot; AUTHOR=&quot;TBENSIAL&quot; MASTERLANG=&quot;E&quot;/&gt;
* &lt;RAW&gt;
*  &lt;DATA DEVCLASS=&quot;ZAPLINK&quot; /&gt;
* &lt;/RAW&gt;
*&lt;/ZL_OBJECT&gt;
*&lt;/X&gt;
*&lt;ZL_OBJECT CONNECTOR=&quot;29AD0A4B07A5A05AE1000000AC120173&quot; NAME=&quot;ZAPLINK-CONNECTORS&quot; TYPE=&quot;DEVC&quot; VERSION=&quot;1.0&quot;&gt;
* &lt;DIRECTORY SRCSYSTEM=&quot;OD4&quot; AUTHOR=&quot;TBENSIAL&quot; MASTERLANG=&quot;E&quot;/&gt;
* &lt;RAW&gt;
*  &lt;DATA DEVCLASS=&quot;ZAPLINK-CONNECTORS&quot;/&gt;
* &lt;/RAW&gt;
*&lt;/ZL_OBJECT&gt;
* Nodes are only :
*#document
*X
*ZL_OBJECT
*DIRECTORY
*RAW
*DATA
*the next ZL_OBJECT his unaccessible.
*and ignored : If XML tag are not closed no problem.

  o_iterator = xmldata-&gt;create_iterator( depth = 1 ).   &quot; Do only root level
  o_node = o_iterator-&gt;get_next( ).
  WHILE o_node IS BOUND.
*    str = o_node-&gt;get_name( ).
    TRY.
        _search_components( o_node ).
      CATCH zaplink_cx INTO o_cx.
        mac_cascade_raise o_mycx o_cx.
    ENDTRY.
    o_node = o_iterator-&gt;get_next( ).&quot; get next one to allow to use &apos;continue&apos;
  ENDWHILE.
* is equiv to : o_node = xmldata-&gt;get_root( ).
</SOURCE>
   </ITEM>
  </METHODS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" VERSION="1" IMPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TO_COMPONENT" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="6 " TYPTYPE="3" TYPE="ZAPLINK_COMPONENT">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPLink Component"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_CONNECTOR" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZAPLINK_CONNECTOR">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPLink Connector interface"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_EXCEPTION" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_CX_CONTAINER">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_FILE" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="7 " TYPTYPE="3" TYPE="ZAPLINK_FILE">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="File Manager"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_LIST" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="5 " TYPTYPE="3" TYPE="ZAPLINK_LIST">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Component list"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_LOG" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="3" TYPE="ZAPLINK_MESSAGE_COLLECTOR">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Message Collector: Standard Implementation"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_OPTIONS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="3" TYPE="ZAPLINK_OPTIONS">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPLink : Options"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_RAW" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZAPLINK_RAW">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="RAW component with data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_ROOT_EXCEPTION" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="8 " TYPTYPE="3" TYPE="ZAPLINK_CX">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_NODEINDEX" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="9 " SRCCOLUMN2="22 " TYPESRC_LENG="130 ">
    BEGIN OF ts_nodeindex,
      key   TYPE ref to zaplink_component,
      node  TYPE REF TO if_ixml_node,
    END OF ts_nodeindex
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="XML Node component index"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_NODEINDEX" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="11 " SRCCOLUMN1="4 " SRCROW2="11 " SRCCOLUMN2="69 " TYPESRC_LENG="66 ">
    tt_nodeindex type SORTED TABLE OF ts_nodeindex with UNIQUE key key
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="XML Node component index table"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
