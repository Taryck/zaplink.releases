<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="5CF35404EBB5B162F8B41C775564ACE5" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_CONNECTOR_" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-FRAMEWORK-CORE" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" UUID="47F8034B756EB95AE1000000AC120173" EXPOSURE="2" STATE="1" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" MSG_ID="ZAPLINK_CONNECTOR">
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="Zap Link Connector base implementation"/>
   </TEXTS>
  </A0_MAINDATA>
  <ALIASES>
   <ITEM CMPNAME="ANONYMIZE" VERSION="1" EXPOSURE="2" CMPTYPE="1" REFCLSNAME="ZAPLINK_CNX_EXT_CLEANER" REFCMPNAME="ANONYMIZE"/>
   <ITEM CMPNAME="APPLICATION_LOG" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="APPLICATION_LOG"/>
   <ITEM CMPNAME="BALLOG_OBJECT" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="BALLOG_OBJECT"/>
   <ITEM CMPNAME="COMP_NODENAME" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="COMP_NODENAME"/>
   <ITEM CMPNAME="CREATE_NEW_RAW" VERSION="1" EXPOSURE="2" CMPTYPE="1" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="CREATE_NEW_RAW"/>
   <ITEM CMPNAME="DELETE_FROM_SAP" VERSION="1" EXPOSURE="2" CMPTYPE="1" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="DELETE_FROM_SAP"/>
   <ITEM CMPNAME="DO_EXISTS" VERSION="1" EXPOSURE="2" CMPTYPE="1" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="DO_EXISTS"/>
   <ITEM CMPNAME="EXISTS" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="EXISTS"/>
   <ITEM CMPNAME="EXPORT_FROM_SAP" VERSION="1" EXPOSURE="2" CMPTYPE="1" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="EXPORT_FROM_SAP"/>
   <ITEM CMPNAME="GET_VALUES" VERSION="1" EXPOSURE="2" CMPTYPE="1" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="GET_VALUES"/>
   <ITEM CMPNAME="IMPORT_TO_SAP" VERSION="1" EXPOSURE="2" CMPTYPE="1" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="IMPORT_TO_SAP"/>
   <ITEM CMPNAME="IS_SUPPORTED_VERSION" VERSION="1" EXPOSURE="2" CMPTYPE="1" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="IS_SUPPORTED_VERSION"/>
   <ITEM CMPNAME="LINE_SEPARATOR" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="LINE_SEPARATOR"/>
   <ITEM CMPNAME="OPTIONS" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="OPTIONS"/>
   <ITEM CMPNAME="READ_FROM_SAP" VERSION="1" EXPOSURE="2" CMPTYPE="1" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="READ_FROM_SAP"/>
   <ITEM CMPNAME="SUPPORTED_TYPES" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="SUPPORTED_TYPES"/>
   <ITEM CMPNAME="TD_ABAPSOURCE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_ABAPSOURCE"/>
   <ITEM CMPNAME="TD_CLASSNAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CLASSNAME"/>
   <ITEM CMPNAME="TD_COMPEXISTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TD_COMPEXISTS"/>
   <ITEM CMPNAME="TD_COMPNAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TD_COMPNAME"/>
   <ITEM CMPNAME="TD_COMPTYPE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TD_COMPTYPE"/>
   <ITEM CMPNAME="TD_CONNCLASS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TD_CONNCLASS"/>
   <ITEM CMPNAME="TD_CONNEXISTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TD_CONNEXISTS"/>
   <ITEM CMPNAME="TD_CONNUUID" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TD_CONNUUID"/>
   <ITEM CMPNAME="TD_CONNVER" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TD_CONNVER"/>
   <ITEM CMPNAME="TD_DEVCLASS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_DEVCLASS"/>
   <ITEM CMPNAME="TD_DOC_ID" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_DOC_ID"/>
   <ITEM CMPNAME="TD_EXISTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_EXISTS"/>
   <ITEM CMPNAME="TD_LANG" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_LANG"/>
   <ITEM CMPNAME="TD_LIGHT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_LIGHT"/>
   <ITEM CMPNAME="TD_OBJ_TYPE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_OBJ_TYPE"/>
   <ITEM CMPNAME="TD_PROGNAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_PROGNAME"/>
   <ITEM CMPNAME="TD_SEL_ACTION" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_SEL_ACTION"/>
   <ITEM CMPNAME="TD_TXTP_ID" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_ID"/>
   <ITEM CMPNAME="TD_TXTP_KIND" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_KIND"/>
   <ITEM CMPNAME="TD_TXTP_LEN" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_LEN"/>
   <ITEM CMPNAME="TD_TXTP_TEXT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_TEXT"/>
   <ITEM CMPNAME="TD_WITH_SUBCOMP" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_WITH_SUBCOMP"/>
   <ITEM CMPNAME="TEXTPOOL_KINDS" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TEXTPOOL_KINDS"/>
   <ITEM CMPNAME="TO_COMPONENT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TO_COMPONENT"/>
   <ITEM CMPNAME="TO_CONNECTOR" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TO_CONNECTOR"/>
   <ITEM CMPNAME="TO_EZ_XML" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TO_EZ_XML"/>
   <ITEM CMPNAME="TO_LIST" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TO_LIST"/>
   <ITEM CMPNAME="TO_MSG_COLL" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TO_MSG_COLL"/>
   <ITEM CMPNAME="TO_OPTIONS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TO_OPTIONS"/>
   <ITEM CMPNAME="TO_RAW" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TO_RAW"/>
   <ITEM CMPNAME="TO_XML" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TO_XML"/>
   <ITEM CMPNAME="TR_DLVUNIT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_DLVUNIT"/>
   <ITEM CMPNAME="TR_DOCID" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_DOCID"/>
   <ITEM CMPNAME="TR_PACKAGES" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_PACKAGES"/>
   <ITEM CMPNAME="TR_TR" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_TR"/>
   <ITEM CMPNAME="TS_BASE_ATTRIBUTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TS_BASE_ATTRIBUTS"/>
   <ITEM CMPNAME="TS_COMPKEY" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_COMPKEY"/>
   <ITEM CMPNAME="TS_CONNDATA" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TS_CONNDATA"/>
   <ITEM CMPNAME="TS_CONN_CLASS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONN_CLASS"/>
   <ITEM CMPNAME="TS_CONN_DEF" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONN_DEF"/>
   <ITEM CMPNAME="TS_TXTP_TEXT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TXTP_TEXT"/>
   <ITEM CMPNAME="TS_TXTP_TEXTPOOL" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TXTP_TEXTPOOL"/>
   <ITEM CMPNAME="TS_TYPE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TYPE"/>
   <ITEM CMPNAME="TT_ABAPRAWSOURCE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_ABAPRAWSOURCE"/>
   <ITEM CMPNAME="TT_COMPKEYS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_COMPKEYS"/>
   <ITEM CMPNAME="TT_CONN_CLASSES" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_CONN_CLASSES"/>
   <ITEM CMPNAME="TT_DYNPROS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_DYNPROS"/>
   <ITEM CMPNAME="TT_FLOW_LOGIC" VERSION="1" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_FLOW_LOGIC"/>
   <ITEM CMPNAME="TT_TXTP_TEXTPOOLS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TXTP_TEXTPOOLS"/>
   <ITEM CMPNAME="TT_TXTP_TEXTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TXTP_TEXTS"/>
   <ITEM CMPNAME="TT_TYPES" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="TT_TYPES"/>
   <ITEM CMPNAME="UNANONYMIZE" VERSION="1" EXPOSURE="2" CMPTYPE="1" REFCLSNAME="ZAPLINK_CNX_EXT_CLEANER" REFCMPNAME="UNANONYMIZE"/>
   <ITEM CMPNAME="UUID" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="UUID"/>
   <ITEM CMPNAME="VERSION" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="VERSION"/>
   <ITEM CMPNAME="WRITE_TO_SAP" VERSION="1" EXPOSURE="2" CMPTYPE="1" REFCLSNAME="ZAPLINK_CONNECTOR" REFCMPNAME="WRITE_TO_SAP"/>
  </ALIASES>
  <ATTRIBUTS>
   <ITEM CMPNAME="O_CX" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_ROOT_EXCEPTION">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_MYCX" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_EXCEPTION">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Exception for connector"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="R_TEXT_FIELDS" VERSION="1" STATE="1" EDITORDER="1 " ATTDECLTYP="1" TYPTYPE="1" TYPE="TR_SCRNTYPE"/>
  </ATTRIBUTS>
  <INTERFACES>
   <ITEM REFCLSNAME="ZAPLINK_CNX_EXT_CLEANER" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1">
    <COMPONENTS>
     <ITEM VERSION="1" MTDNAME="ANONYMIZE">
      <SOURCE>
  TRY.
      CHECK object IS BOUND.
      object-&gt;anonymize( ).
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
     </ITEM>
     <ITEM VERSION="1" MTDNAME="UNANONYMIZE">
      <SOURCE>
  TRY.
      CHECK object IS BOUND.
      object-&gt;unanonymize( ).
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
     </ITEM>
    </COMPONENTS>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1">
    <COMPONENTS>
     <ITEM VERSION="1" MTDNAME="CREATE_NEW_RAW" MTDABSTRCT="X"/>
     <ITEM VERSION="1" MTDNAME="DELETE_FROM_SAP" MTDABSTRCT="X"/>
     <ITEM VERSION="1" MTDNAME="DO_EXISTS" MTDABSTRCT="X"/>
     <ITEM VERSION="1" MTDNAME="EXPORT_FROM_SAP">
      <SOURCE>
  DATA ez_xml          TYPE to_ez_xml.
  DATA o_data          TYPE to_raw.

  o_data = read_from_sap( component ).
  IF o_data IS BOUND.
    o_data-&gt;connector = me-&gt;uuid.
    o_data-&gt;version = me-&gt;version.
    CREATE OBJECT ez_xml.

    TRY.
        object = ez_xml-&gt;any2xml( any       = o_data
                                  type      = comp_nodename ).
      CATCH zaplink_cx INTO o_cx.
        mac_cascade_raise o_mycx o_cx.
    ENDTRY.
  ENDIF.</SOURCE>
     </ITEM>
     <ITEM VERSION="1" MTDNAME="GET_VALUES">
      <SOURCE>
  DATA _obj_type TYPE  euobj-id.
  DATA _name TYPE td_compname.

  _obj_type = type.

  CALL FUNCTION &apos;REPOSITORY_INFO_SYSTEM_F4&apos;
    EXPORTING
      object_type           = _obj_type
      object_name           = name
      suppress_selection    = abap_true
      use_alv_grid          = abap_false
      without_personal_list = abap_false
    IMPORTING
      object_name_selected  = _name
    EXCEPTIONS
      cancel                = 1.
  IF sy-subrc = 0.
    name = _name.
  ENDIF.</SOURCE>
     </ITEM>
     <ITEM VERSION="1" MTDNAME="IMPORT_TO_SAP">
      <SOURCE>
  DATA root_node TYPE REF TO if_ixml_node.
  DATA o_raw     TYPE to_raw.
  DATA _name     TYPE string.
  DATA ez_xml    TYPE REF TO zaplink_easyxml.
  DATA o_cx      TYPE REF TO cx_root.
  DATA o_zlcx    TYPE REF TO zaplink_cx.

  CHECK object IS BOUND.

  TRY.
      root_node = object-&gt;get_root_element( ).
      IF NOT root_node IS BOUND.
        _name = &apos;$NONE$&apos;(001).
        RAISE EXCEPTION TYPE zaplink_cx_connector EXPORTING
              textid = zaplink_cx_connector=&gt;invalid_xml
           node_name = _name.
      ENDIF.

      _name = root_node-&gt;get_name( ).
      IF _name &lt;&gt; comp_nodename.
        RAISE EXCEPTION TYPE zaplink_cx_connector EXPORTING
              textid = zaplink_cx_connector=&gt;invalid_xml
           node_name = _name.
      ENDIF.

      TRY.
          o_raw = zaplink_connectors=&gt;node_2_raw( root_node ).
        CATCH zaplink_cx_connector INTO o_mycx.
          RAISE EXCEPTION o_mycx.
      ENDTRY.

* Version handling to develop
      IF is_supported_version( o_raw-&gt;version ) = abap_false.
* Version &apos;&amp;CONN_VER&amp;&apos; is not (or no longer) suported by this connector.
        RAISE EXCEPTION TYPE zaplink_cx_connector EXPORTING
              textid = zaplink_cx_connector=&gt;unsuported_version
            conn_ver = o_raw-&gt;version.
      ENDIF.

      o_raw = create_new_raw( o_raw-&gt;type ).
      CREATE OBJECT ez_xml.
      CALL METHOD ez_xml-&gt;xml2any
        EXPORTING
          xmldoc = object
        CHANGING
          any    = o_raw.
      IF ez_xml-&gt;application_log-&gt;has_messages_of_msgt( id_msgty = &apos;W&apos;) = abap_true.
        application_log-&gt;add_from_instance( io_msglist = ez_xml-&gt;application_log
                                     if_add_as_subnode = abap_true ).
      ENDIF.

      components = write_to_sap( o_raw ).
    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_zlcx.
      CREATE OBJECT o_mycx
        EXPORTING
          textid  = zaplink_cx=&gt;system_error
          prev_cx = o_zlcx.
      o_mycx-&gt;update( ).
      RAISE EXCEPTION o_mycx.
    CATCH cx_root INTO o_cx.
      CREATE OBJECT o_mycx
        EXPORTING
          textid   = zaplink_cx=&gt;system_error
          previous = o_cx.
      o_mycx-&gt;update( ).
      RAISE EXCEPTION o_mycx.
  ENDTRY.</SOURCE>
     </ITEM>
     <ITEM VERSION="1" MTDNAME="IS_SUPPORTED_VERSION" MTDABSTRCT="X"/>
     <ITEM VERSION="1" MTDNAME="READ_FROM_SAP" MTDABSTRCT="X"/>
     <ITEM VERSION="1" MTDNAME="WRITE_TO_SAP" MTDABSTRCT="X"/>
    </COMPONENTS>
   </ITEM>
  </INTERFACES>
  <LOCAL>
   <TYPES>
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* IMPLEMENTATION OR PRIVATE METHOD&apos;S SIGNATURE</TYPES>
   <IMPLEMENTATIONS>
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* LOCAL HELPER CLASSES</IMPLEMENTATIONS>
   <MACROS>
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE ZAPLINK_MACROS.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>
  DATA s_type LIKE LINE OF r_text_fields.
  s_type-sign = &apos;I&apos;. s_type-option = &apos;EQ&apos;.
  s_type-low = rpyty_dynp_ftype-text.       APPEND s_type TO r_text_fields.
  s_type-low = rpyty_dynp_ftype-frame.      APPEND s_type TO r_text_fields.
  s_type-low = rpyty_dynp_ftype-push.       APPEND s_type TO r_text_fields.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONV_ABAPSOURCE2FLOWLOGIC" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="15 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Structured ABAP source to flow logic"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TT_FLOW_LOGIC"/>
     <ITEM SCONAME="SOURCE" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_ABAPSOURCE"/>
    </PARAMETERS>
    <SOURCE>
  SPLIT source AT line_separator INTO TABLE result.
  IF NOT result IS INITIAL.       &quot; remove first line separator
    IF source(1) = line_separator.
      DELETE result INDEX 1.
    ENDIF.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONV_ABAP_RAW2SOURCE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="6 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Raw data to structured source data"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RAW" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_ABAPRAWSOURCE"/>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_ABAPSOURCE"/>
    </PARAMETERS>
    <SOURCE>
  FIELD-SYMBOLS:
    &lt;c&gt; LIKE LINE OF raw.

  LOOP AT raw ASSIGNING &lt;c&gt;.
    CONCATENATE result &lt;c&gt; INTO result SEPARATED BY line_separator. &quot; will start with line_sep better for XML display and required because get_value remove spaces
  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONV_ABAP_SOURCE2RAW" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="7 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Structured source data to Raw data"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TT_ABAPRAWSOURCE"/>
     <ITEM SCONAME="SOURCE" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_ABAPSOURCE"/>
    </PARAMETERS>
    <SOURCE>
  SPLIT source AT line_separator INTO TABLE result.
  IF NOT result IS INITIAL.       &quot; remove first line separator
    IF source(1) = line_separator.
      DELETE result INDEX 1.
    ENDIF.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONV_FLOWLOGIC2ABAPSOURCE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="14 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Convert flow logic table to ABAP Source"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RAW" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_FLOW_LOGIC"/>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_ABAPSOURCE"/>
    </PARAMETERS>
    <SOURCE>
  FIELD-SYMBOLS:
    &lt;c&gt; LIKE LINE OF raw.

  LOOP AT raw ASSIGNING &lt;c&gt;.
    CONCATENATE result &lt;c&gt; INTO result SEPARATED BY line_separator. &quot; will start with line_sep better for XML display and required because get_value remove spaces
  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_DYNPROS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="12 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get program Dynpros"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PROGRAM" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME"/>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TT_DYNPROS"/>
    </PARAMETERS>
    <SOURCE>
  SET EXTENDED CHECK OFF.
  INCLUDE mseusbit. &quot; for c_type_dynp_select_norm, c_type_dynp_select_mod, c_type_dynp_select_incl
  SET EXTENDED CHECK ON.
*  DATA:
*    BEGIN OF dynp_id,
*      prog TYPE d020s-prog,
*      dnum TYPE d020s-dnum,
*    END OF dynp_id.
  TYPES:
    BEGIN OF t_dynpro,
      prog TYPE d020s-prog,
      dnum TYPE d020s-dnum,
    END OF t_dynpro.
  DATA t_dynpros TYPE SORTED TABLE OF t_dynpro WITH UNIQUE KEY dnum.
  DATA header TYPE d020s.
  DATA t_d021t TYPE SORTED TABLE OF d021t WITH UNIQUE KEY dynr fldn lang.
  DATA t_container TYPE dycatt_tab.
*  DATA t_fields TYPE STANDARD TABLE OF d021s.
  DATA t_fields    TYPE dyfatc_tab.
  DATA t_flowlogic TYPE tt_flow_logic.
  DATA s_result LIKE LINE OF result.
  DATA s_cont   LIKE LINE OF s_result-containers.
  FIELD-SYMBOLS:
    &lt;c&gt; LIKE LINE OF t_container,
    &lt;f&gt; LIKE LINE OF t_fields,
    &lt;t&gt; LIKE LINE OF t_d021t,
    &lt;r&gt; LIKE LINE OF t_dynpros.
*    &lt;r&gt; LIKE LINE OF result.
*  DATA s_field  LIKE LINE OF &lt;r&gt;-fields.
  DATA s_field  LIKE LINE OF s_cont-fields.
  DATA s_text   LIKE LINE OF s_field-texts.
  DATA f_clear  TYPE abap_bool.

*  SELECT * INTO CORRESPONDING FIELDS OF TABLE result
  SELECT prog dnum INTO TABLE t_dynpros
    FROM d020s
    WHERE prog = program
      AND type NOT IN (c_type_dynp_select_norm, c_type_dynp_select_mod, c_type_dynp_select_incl).

  SELECT *
    INTO TABLE t_d021t
    FROM d021t
    WHERE prog = program
      AND dtxt &lt;&gt; space.

*  loop at result assigning &lt;r&gt;.
  LOOP AT t_dynpros ASSIGNING &lt;r&gt;.
    CLEAR s_result.

* Processing Dynpro #&amp;2 (&amp;1)
      SET EXTENDED CHECK OFF.
      IF 1 = 2. MESSAGE i004(zaplink_connector) WITH space space. ENDIF.
      SET EXTENDED CHECK ON.
      application_log-&gt;add_info( id_msgid = &apos;ZAPLINK_CONNECTOR&apos;
                                 id_msgno = &apos;004&apos;
                                 id_msgv1 = &lt;r&gt;-prog
                                 id_msgv2 = &lt;r&gt;-dnum ).

    SELECT lang dtxt
      INTO CORRESPONDING FIELDS OF TABLE s_result-texts
      FROM d020t
      WHERE prog = &lt;r&gt;-prog
        AND dynr = &lt;r&gt;-dnum
        AND dtxt &lt;&gt; space.

*    dynp_id-prog = &lt;r&gt;-prog.
*    dynp_id-dnum = &lt;r&gt;-dnum.
*    IMPORT DYNPRO header t_fields t_flowlogic &lt;r&gt;-matchcodes ID dynp_id.
*    IF sy-subrc &lt;&gt; 0.
*    ENDIF.
    CALL FUNCTION &apos;RPY_DYNPRO_READ&apos;
      EXPORTING
        progname                    = &lt;r&gt;-prog
        dynnr                       = &lt;r&gt;-dnum
*       SUPPRESS_EXIST_CHECKS       = &apos; &apos;
*       SUPPRESS_CORR_CHECKS        = &apos; &apos;
      IMPORTING
        header                      = s_result-hdr
      TABLES
        containers                  = t_container
        fields_to_containers        = t_fields
        flow_logic                  = t_flowlogic
        params                      = s_result-matchcodes
      EXCEPTIONS
        cancelled                   = 1
        not_found                   = 2
        permission_error            = 3
        OTHERS                      = 4.
    IF sy-subrc &lt;&gt; 0.
    ENDIF.

    LOOP AT t_container ASSIGNING &lt;c&gt;.
      CLEAR s_cont.
      s_cont-hdr = &lt;c&gt;.
      LOOP AT t_fields ASSIGNING &lt;f&gt;
           WHERE cont_type = &lt;c&gt;-type
             AND cont_name = &lt;c&gt;-name.
        CLEAR: s_field, f_clear.
        s_field-hdr = &lt;f&gt;.
        CLEAR: s_field-cont_type, s_field-cont_name.
        IF &lt;f&gt;-type IN r_text_fields.       &quot; field may have texts
          LOOP AT t_d021t ASSIGNING &lt;t&gt;
               WHERE dynr = &lt;r&gt;-dnum
                 AND fldn = &lt;f&gt;-name.
            CLEAR s_text.
            s_text-langu = &lt;t&gt;-lang.
            s_text-short_txt = &lt;t&gt;-dtxt.
            INSERT s_text INTO TABLE s_field-texts.
            IF &lt;t&gt;-dtxt = s_field-text. f_clear = abap_true. ENDIF.
          ENDLOOP.
          IF NOT s_field-texts IS INITIAL AND NOT s_field-text CO &apos;_&apos; AND f_clear = abap_true. CLEAR s_field-text. ENDIF.
        ENDIF.
        INSERT s_field INTO TABLE s_cont-fields.
      ENDLOOP.
      INSERT s_cont INTO TABLE s_result-containers.
    ENDLOOP.

    s_result-flow_logic-_ = conv_flowlogic2abapsource( t_flowlogic ).

    CLEAR s_result-program.

    INSERT s_result INTO TABLE result.
  ENDLOOP.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_MENUS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="16 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get program Menus"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PROGRAM" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME"/>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_MENUPAINTER">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Menu painter Data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>
  DATA s_fm_data TYPE zaplink_menupainter_data=&gt;ts_fm_data.

  CALL FUNCTION &apos;RS_CUA_INTERNAL_FETCH&apos;
    EXPORTING
      program                    = program
*     LANGUAGE                   =
      state                      = &apos;A&apos;
*     WITH_SECOND_LANGUAGE       = &apos; &apos;
    IMPORTING
      adm                        = s_fm_data-header
*      LANGU                      =
*      AUTHOR                     =
*      DATE                       =
*      TIME                       =
*      CAUTHOR                    =
*      CDATE                      =
*      CTIME                      =
*      GDATE                      =
*      GTIME                      =
    TABLES
      sta                        = s_fm_data-status
      fun                        = s_fm_data-functions
      men                        = s_fm_data-menus_det
      mtx                        = s_fm_data-menus
      act                        = s_fm_data-bars_det
      but                        = s_fm_data-buttons_det
      pfk                        = s_fm_data-keyboards
      set                        = s_fm_data-stat_funcs
      doc                        = s_fm_data-attributes
      tit                        = s_fm_data-titles
      biv                        = s_fm_data-ffuncs
    EXCEPTIONS
      not_found                  = 1
      unknown_version            = 2
      OTHERS                     = 3.
  IF sy-subrc &lt;&gt; 0 OR s_fm_data IS INITIAL.
    EXIT.
  ENDIF.

  SELECT *
    INTO TABLE s_fm_data-texts
    FROM rsmptexts
    WHERE progname = program.

  CREATE OBJECT result.
  result-&gt;from_data( s_fm_data ).
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_PROG_RAWSOURCE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="5 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get program RAW source code"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PROGRAM" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME"/>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TT_ABAPRAWSOURCE"/>
    </PARAMETERS>
    <SOURCE>
  READ REPORT PROGRAM INTO result STATE &apos;I&apos;.
  IF sy-subrc &lt;&gt; 0.
    READ REPORT PROGRAM INTO result STATE &apos;A&apos;.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_PROG_SOURCE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="4 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get program source code"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PROGRAM" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ABAP Program Name"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_ABAPSOURCE"/>
    </PARAMETERS>
    <SOURCE>
DATA code TYPE tt_abaprawsource.

  code = get_prog_rawsource( program ).
  result = conv_abap_raw2source( code ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_PROG_TEXTPOOL" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="10 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get program Texts pool"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PROGRAM" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME"/>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TT_TXTP_TEXTPOOLS"/>
    </PARAMETERS>
    <SOURCE>
  DATA t_textpool TYPE STANDARD TABLE OF textpool.
  DATA t_langlist TYPE instlang.
  TYPES:
    BEGIN OF ts_text,
      id      TYPE  textpoolid,
      key	    TYPE  textpoolky,
      langu   TYPE spras,
      entry	  TYPE textpooltx,
      length  TYPE textpoolln,
    END OF ts_text.
  DATA: t_texts TYPE STANDARD TABLE OF ts_text.
  DATA _text LIKE LINE OF t_texts.
  DATA _textpool LIKE LINE OF result.
  DATA _tpool LIKE LINE OF _textpool-texts.
  FIELD-SYMBOLS:
    &lt;l&gt; LIKE LINE OF t_langlist,
    &lt;t&gt; LIKE LINE OF t_textpool.

  CALL FUNCTION &apos;RS_TEXTLOG_GET_PARAMETERS&apos;
    CHANGING
      installed_languages = t_langlist.

  LOOP AT t_langlist ASSIGNING &lt;l&gt;.
    READ TEXTPOOL program INTO t_textpool LANGUAGE &lt;l&gt;.
    IF sy-subrc = 0.
      _text-langu = &lt;l&gt;.
      LOOP AT t_textpool ASSIGNING &lt;t&gt;.
        _text-id = &lt;t&gt;-id.
        _text-key = &lt;t&gt;-key.
        _text-entry = &lt;t&gt;-entry.
        _text-length = &lt;t&gt;-length.
        APPEND _text TO t_texts.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  SORT t_texts BY id key langu.
  DELETE ADJACENT DUPLICATES FROM t_texts COMPARING id key langu.

  LOOP AT t_texts INTO _text.
    AT NEW key. &quot; ID
      CLEAR _textpool.
      _textpool-id = _text-id.
      _textpool-key = _text-key.
    ENDAT.
    AT NEW langu.
      CLEAR _tpool.
      _tpool-langu = _text-langu.
    ENDAT.

    _tpool-entry = _text-entry.
    _tpool-length = _text-length.

    AT END OF langu.
      APPEND _tpool TO _textpool-texts.
    ENDAT.
    AT END OF key.
      APPEND _textpool TO result.
    ENDAT.

  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_TYPE_FROM_XML" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="3 " MTDDECLTYP="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get component type"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="OBJECT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_XML"/>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_COMPTYPE"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA root_node TYPE REF TO if_ixml_node.
  DATA o_raw     TYPE to_raw.
  DATA _name     TYPE string.

  CHECK object IS BOUND.

  root_node = object-&gt;get_root_element( ).
  IF NOT root_node IS BOUND.
    _name = &apos;$NONE$&apos;(001).
    RAISE EXCEPTION TYPE zaplink_cx_connector EXPORTING
          textid = zaplink_cx_connector=&gt;invalid_xml
       node_name = _name.
  ENDIF.

  _name = root_node-&gt;get_name( ).
  IF _name &lt;&gt; comp_nodename.
    RAISE EXCEPTION TYPE zaplink_cx_connector EXPORTING
          textid = zaplink_cx_connector=&gt;invalid_xml
       node_name = _name.
  ENDIF.

  TRY.
      o_raw = zaplink_connectors=&gt;node_2_raw( root_node ).
      result = o_raw-&gt;type.
    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_BASE_ATTRIBUTS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Build default Connector Base Attributs"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="ATTRIBUTS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TS_BASE_ATTRIBUTS"/>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA o_desc    TYPE REF TO cl_abap_typedescr.
  DATA string    TYPE string.
  DATA _name     TYPE tadir-obj_name.
  DATA _type     TYPE tadir-object.

  o_desc = cl_abap_typedescr=&gt;describe_by_object_ref( p_object_ref = me ).
  string = o_desc-&gt;get_relative_name( ).

  TRY.
      _name = attributs-name = component-&gt;get_name( ).
      _type = component-&gt;get_type( ).
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
  attributs-class = string.
  attributs-version = me-&gt;version.

  CALL FUNCTION &apos;TRINT_TADIR_QUERY&apos;
    EXPORTING
      iv_pgmid           = &apos;R3TR&apos;
      iv_object          = _type
      iv_obj_name        = _name
    IMPORTING
*     EV_OBJECT          =
*     EV_SRCSYSTEM       =
      ev_devclass        = attributs-devclass
*     EV_AUTHOR          =
*     EV_GENFLAG         =
*     EV_EXIST           =
            .</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_DYNPROS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="13 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="set program Dynpros"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DYNPROS" VERSION="1" CMPTYPE="1" EDITORDER="2 " TYPTYPE="1" TYPE="TT_DYNPROS"/>
     <ITEM SCONAME="PROGRAM" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  INCLUDE mseusbit. &quot; for c_type_dynp_select_norm, c_type_dynp_select_mod, c_type_dynp_select_incl
  DATA:
    BEGIN OF dynp_id,
      prog TYPE d020s-prog,
      dnum TYPE d020s-dnum,
    END OF dynp_id.
  DATA header   TYPE rpy_dyhead.
  DATA t_flowlogic TYPE tt_flow_logic.
*  DATA t_dp_txt TYPE d020t-dtxt.
  DATA t_containers TYPE dycatt_tab.
  DATA s_cont  LIKE LINE OF t_containers.
  DATA t_fields TYPE dyfatc_tab.
  DATA s_field LIKE LINE OF t_fields.
  DATA t_descs TYPE SORTED TABLE OF d020t WITH UNIQUE KEY prog dynr.
  DATA s_desc LIKE LINE OF t_descs.
  DATA t_texts TYPE SORTED TABLE OF d021t WITH UNIQUE KEY prog dynr fldn lang.
  DATA s_text LIKE LINE OF t_texts.
  DATA f_fill TYPE abap_bool.
  FIELD-SYMBOLS:
    &lt;r&gt; LIKE LINE OF dynpros,
    &lt;l&gt; LIKE LINE OF &lt;r&gt;-texts,
    &lt;c&gt; LIKE LINE OF &lt;r&gt;-containers,
    &lt;f&gt; LIKE LINE OF &lt;c&gt;-fields,
    &lt;t&gt; LIKE LINE OF &lt;f&gt;-texts.

  CLEAR o_mycx.
  LOOP AT dynpros ASSIGNING &lt;r&gt;.
    CLEAR: header, t_containers, t_fields, t_texts, t_descs.
    header = &lt;r&gt;-hdr.
    header-program = program.

* Processing Dynpro #&amp;2 (&amp;1)
    SET EXTENDED CHECK OFF.
    IF 1 = 2. MESSAGE i004(zaplink_connector) WITH space space. ENDIF.
    SET EXTENDED CHECK ON.
    application_log-&gt;add_info( id_msgid = &apos;ZAPLINK_CONNECTOR&apos;
                               id_msgno = &apos;004&apos;
                               id_msgv1 = header-program
                               id_msgv2 = header-screen ).

* Texts
    LOOP AT &lt;r&gt;-texts ASSIGNING &lt;l&gt;.
      CLEAR s_desc.
      MOVE-CORRESPONDING &lt;l&gt; TO s_desc.
      INSERT s_desc INTO TABLE t_descs.
    ENDLOOP.

    t_flowlogic = conv_abapsource2flowlogic( &lt;r&gt;-flow_logic-_ ).
    LOOP AT &lt;r&gt;-containers ASSIGNING &lt;c&gt;.
      CLEAR s_cont.
      s_cont = &lt;c&gt;-hdr.
      LOOP AT &lt;c&gt;-fields ASSIGNING &lt;f&gt;.
        s_field = &lt;f&gt;-hdr.
        s_field-cont_type = &lt;c&gt;-type.
        s_field-cont_name = &lt;c&gt;-name.
        IF s_field-text IS INITIAL. f_fill = abap_true. ENDIF.    &quot; protect data
        LOOP AT &lt;f&gt;-texts ASSIGNING &lt;t&gt;.
          IF f_fill = abap_true AND ( sy-tabix = 1 OR &lt;t&gt;-langu = sy-langu ). s_field-text = &lt;t&gt;-short_txt. ENDIF.
          CLEAR s_text.
          s_text-prog = header-program.
          s_text-dynr = header-screen.
          s_text-fldn = &lt;f&gt;-name.
          s_text-lang = &lt;t&gt;-langu.
          s_text-dtxt = &lt;t&gt;-short_txt.
          INSERT s_text INTO TABLE t_texts.
        ENDLOOP.
        INSERT s_field INTO TABLE t_fields.
      ENDLOOP.
      INSERT s_cont INTO TABLE t_containers.
    ENDLOOP.
*    CALL FUNCTION &apos;RS_SCRP_DYNPRO_CHECK&apos;
*      TABLES
*        fieldlist            = &lt;r&gt;-fields
*        flowlogic            = t_flowlogic
*        params               = &lt;r&gt;-matchcodes
*      CHANGING
*        header               = header
*      EXCEPTIONS
*        damaged_but_repaired = 0
*        damaged              = 2
*        OTHERS               = 3.
*    IF sy-subrc &lt;&gt; 0.
*      o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;RS_SCRP_DYNPRO_CHECK&apos;
*                                                  subrc = sy-subrc
*                                              classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
*      application_log-&gt;add_symsg( ).
*      application_log-&gt;add_exception( o_mycx ).
*      continue.
*    endif.
    CALL FUNCTION &apos;RPY_DYNPRO_INSERT&apos;
      EXPORTING
*       SUPPRESS_CORR_CHECKS           = &apos; &apos;
*       CORRNUM                        = &apos; &apos;
        suppress_exist_checks          = abap_true
*       SUPPRESS_GENERATE              = &apos; &apos;
*       SUPPRESS_DICT_SUPPORT          = &apos; &apos;
*       SUPPRESS_EXTENDED_CHECKS       = &apos; &apos;
        header                         = header
*       USE_CORRNUM_IMMEDIATEDLY       = &apos; &apos;
*       SUPPRESS_COMMIT_WORK           = &apos; &apos;
      TABLES
        containers                     = t_containers
        fields_to_containers           = t_fields
        flow_logic                     = t_flowlogic
        params                         = &lt;r&gt;-matchcodes
      EXCEPTIONS
        cancelled                      = 1
        already_exists                 = 2
        program_not_exists             = 3
        not_executed                   = 4
        missing_required_field         = 5
        illegal_field_value            = 6
        field_not_allowed              = 7
        not_generated                  = 8
        illegal_field_position         = 9
        OTHERS                         = 10.
    IF sy-subrc &lt;&gt; 0.
      o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;RPY_DYNPRO_INSERT&apos;
                                                  subrc = sy-subrc
                                              classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
      application_log-&gt;add_symsg( ).
      application_log-&gt;add_exception( o_mycx ).
      CONTINUE.
    ENDIF.
    MODIFY d020t FROM TABLE t_descs.
    MODIFY d021t FROM TABLE t_texts.
*    CALL FUNCTION &apos;RPY_DYNPRO_INSERT_NATIVE&apos;
*      EXPORTING
**     SUPPRESS_CORR_CHECKS           = &apos; &apos;
**     CORRNUM                        = &apos; &apos;
*        header                         = header
*        dynprotext                     = d_dp_txt
**     SUPPRESS_EXIST_CHECKS          = &apos; &apos;
**     USE_CORRNUM_IMMEDIATEDLY       = &apos; &apos;
**     SUPPRESS_COMMIT_WORK           = &apos; &apos;
*      TABLES
*        fieldlist                      = &lt;r&gt;-fields
*        flowlogic                      = t_flowlogic
*        params                         = &lt;r&gt;-matchcodes
*      EXCEPTIONS
*        cancelled                      = 1
*        already_exists                 = 2
*        program_not_exists             = 3
*        not_executed                   = 4
*        OTHERS                         = 5.
*    IF sy-subrc &lt;&gt; 0.
*      o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;RPY_DYNPRO_INSERT_NATIVE&apos;
*                                                  subrc = sy-subrc
*                                              classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
*      application_log-&gt;add_symsg( ).
*      application_log-&gt;add_exception( o_mycx ).
*    ENDIF.
  ENDLOOP.
  IF o_mycx IS BOUND.
    RAISE EXCEPTION o_mycx.
  ENDIF.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_MENUS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="17 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Set program Menus"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="MENUS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_MENUPAINTER">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Menu painter Data"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="PROGRAM" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME"/>
    </PARAMETERS>
    <SOURCE>
  DATA s_fm_data TYPE zaplink_menupainter_data=&gt;ts_fm_data.
  DATA d_trkey   TYPE trkey.

  CHECK menus IS BOUND.
  s_fm_data = menus-&gt;to_data( ).

  d_trkey-obj_type = &apos;PROG&apos;.
  d_trkey-sub_name = d_trkey-obj_name = program.
  d_trkey-sub_type = &apos;CUAD&apos;.

  CALL FUNCTION &apos;RS_CUA_INTERNAL_WRITE&apos;
    EXPORTING
      program   = program
      language  = s_fm_data-header-mod_langu
      tr_key    = d_trkey
      adm       = s_fm_data-header
      state     = &apos;I&apos;
    TABLES
      sta       = s_fm_data-status
      fun       = s_fm_data-functions
      men       = s_fm_data-menus_det
      mtx       = s_fm_data-menus
      act       = s_fm_data-bars_det
      but       = s_fm_data-buttons_det
      pfk       = s_fm_data-keyboards
      set       = s_fm_data-stat_funcs
      doc       = s_fm_data-attributes
      tit       = s_fm_data-titles
      biv       = s_fm_data-ffuncs
    EXCEPTIONS
      not_found = 1
      OTHERS    = 2.
  IF sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  DELETE FROM rsmptexts WHERE progname = program.
  MODIFY rsmptexts FROM TABLE s_fm_data-texts.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_PROG_RAWSOURCE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="8 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Set program RAW source code"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PROGRAM" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME"/>
     <ITEM SCONAME="RAW" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_ABAPRAWSOURCE"/>
    </PARAMETERS>
    <SOURCE>
INSERT REPORT program FROM raw STATE &apos;I&apos;.
  IF sy-subrc = 0.
    INSERT REPORT program FROM raw STATE &apos;A&apos;.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_PROG_SOURCE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="9 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Set program source code"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PROGRAM" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME"/>
     <ITEM SCONAME="SOURCE" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_ABAPSOURCE"/>
    </PARAMETERS>
    <SOURCE>
DATA _raw TYPE tt_abaprawsource.

  _raw = conv_abap_source2raw( source ).
  set_prog_rawsource( program = program
                          raw = _raw ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_PROG_TEXTPOOL" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="11 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Set program Texts pool"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PROGRAM" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME"/>
     <ITEM SCONAME="TEXTPOOL" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_TXTP_TEXTPOOLS"/>
    </PARAMETERS>
    <SOURCE>
  TYPES:
    BEGIN OF ts_text,
      langu   TYPE spras,
      id      TYPE  textpoolid,
      key	    TYPE  textpoolky,
      entry	  TYPE textpooltx,
      length  TYPE textpoolln,
    END OF ts_text.
  DATA t_textpool TYPE STANDARD TABLE OF textpool.
  DATA: t_texts TYPE STANDARD TABLE OF ts_text.
  DATA _text LIKE LINE OF t_texts.
  DATA _textpool LIKE LINE OF t_textpool.
  FIELD-SYMBOLS:
    &lt;t&gt; LIKE LINE OF textpool,
    &lt;l&gt; LIKE LINE OF &lt;t&gt;-texts.

  LOOP AT textpool ASSIGNING &lt;t&gt;.
    _text-id = &lt;t&gt;-id.
    _text-key = &lt;t&gt;-key.
    LOOP AT &lt;t&gt;-texts ASSIGNING &lt;l&gt;.
      _text-langu = &lt;l&gt;-langu.
      _text-entry = &lt;l&gt;-entry.
      _text-length = &lt;l&gt;-length.
      APPEND _text TO t_texts.
    ENDLOOP.
  ENDLOOP.

  SORT t_texts BY langu id key.
  DELETE ADJACENT DUPLICATES FROM t_texts COMPARING langu id key.

  LOOP AT t_texts INTO _text.
    AT NEW langu. &quot; ID
      CLEAR: t_textpool, _textpool.
    ENDAT.

    _textpool-id = _text-id.
    _textpool-key = _text-key.
    _textpool-entry = _text-entry.
    _textpool-length = _text-length.
    APPEND _textpool TO t_textpool.

    AT END OF langu.
      INSERT textpool program FROM t_textpool LANGUAGE _text-langu.
    ENDAT.

  ENDLOOP.</SOURCE>
   </ITEM>
  </METHODS>
  <TEXTSPOOL>
   <ITEM ID="I" KEY="001">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="$NONE$" LENGTH="6 "/>
    </TEXTS>
   </ITEM>
  </TEXTSPOOL>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="RPYTY" VERSION="1" EXPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TO_EXCEPTION" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="3" TYPE="ZAPLINK_CX_CONNECTOR">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_MENUPAINTER" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZAPLINK_MENUPAINTER_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Menu painter Data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_ROOT_EXCEPTION" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_CX">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TR_SCRNTYPE" VERSION="1" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="6 " SRCCOLUMN2="37 " TYPESRC_LENG="36 ">
    tr_scrntype TYPE RANGE OF scrntype

    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Range of Screen Field type"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
