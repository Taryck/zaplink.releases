<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="3F0B3244BA02F6ABDDA4E75379F05370" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_CONTAINER" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-FRAMEWORK-CORE" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" UUID="4FF8034B756EB95AE1000000AC120173" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <INHERITANCE REFCLSNAME="ZAPLINK_CONTAINER_4INST" VERSION="1" STATE="1"/>
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="ZapLink Container :  To store SAP component in XML"/>
   </TEXTS>
  </A0_MAINDATA>
  <ATTRIBUTS>
   <ITEM CMPNAME="DATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="TS_CONTDATA_FULL">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Full container data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_CX" VERSION="1" STATE="1" EDITORDER="2 " ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_ROOT_EXCEPTION">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_MYCX" VERSION="1" STATE="1" EDITORDER="1 " ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_EXCEPTION">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="VERSION" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;1.0&apos;" TYPTYPE="1" TYPE="TD_CONTVER">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Version"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <LOCAL>
   <TYPES>
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* IMPLEMENTATION OR PRIVATE METHOD&apos;S SIGNATURE</TYPES>
   <IMPLEMENTATIONS>
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* LOCAL HELPER CLASSES</IMPLEMENTATIONS>
   <MACROS>
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE ZAPLINK_MACROS.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="ADD_COMPONENTS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="4 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Add SAP Comoponents to Container"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="OBJECT_LIST" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA o_comp    TYPE zaplink_list=&gt;to_component.
  DATA msg       TYPE string.
  DATA _msg_col  TYPE to_log.

  CHECK object_list IS BOUND.
  TRY.
* Initialize Interator
      TRY.
          object_list-&gt;order_kind = zaplink_list=&gt;order_kinds-no_order.
          object_list-&gt;init_sel_iter( ).
          object_list-&gt;display_progress = abap_true.
          o_comp = object_list-&gt;get_next( ).
        CATCH zaplink_cx_list INTO o_cx.
          mac_cascade_raise o_mycx o_cx.
      ENDTRY.

      WHILE o_comp IS BOUND.
        TRY.
            _add_component( component = o_comp ).
          CATCH zaplink_cx_container INTO o_mycx.
            CALL METHOD log-&gt;add_exception
              EXPORTING
                exception    = o_mycx
*                id_detlevel  =
                id_probclass = log-&gt;probcl-medium.
            TRY.
                _msg_col = o_comp-&gt;get_msg_coll( ).
              CATCH zaplink_cx INTO o_cx.
                mac_cascade_raise o_mycx o_cx.
            ENDTRY.
            IF _msg_col IS BOUND.
              CALL METHOD log-&gt;add_from_instance
                EXPORTING
                  io_msglist        = _msg_col
                  if_add_as_subnode = abap_true
*                if_cumulate       =
                  .
            ENDIF.
        ENDTRY.

        TRY.
            o_comp = object_list-&gt;get_next( ).
          CATCH zaplink_cx_list INTO o_cx.
            mac_cascade_raise o_mycx o_cx.
        ENDTRY.
      ENDWHILE.

      compact( ).

    CATCH zaplink_cx_container INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>
xmlengine = cl_ixml=&gt;create( ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="COMPACT" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="6 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Compact container : remove component already included as sub"/>
    </TEXTS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA o_list TYPE to_list.
  DATA o_comp TYPE to_component.
  DATA o_subcomps TYPE to_list.

  TRY.
      _complist-&gt;init_iter( ).
      _complist-&gt;display_progress = abap_false.
      o_comp = _complist-&gt;get_next( ).
      WHILE o_comp IS BOUND.
        o_list = _complist-&gt;clone( ).
        o_list-&gt;remove( o_comp ).
        o_subcomps = o_comp-&gt;get_subcomponents( ).
        IF o_subcomps IS NOT BOUND.
          CREATE OBJECT o_subcomps.
        ENDIF.
        o_subcomps-&gt;add( o_comp ).
        IF o_list-&gt;is_included( o_subcomps ) = abap_true.
* components o_comp and it&apos;s subcomponents do exists as sub components of an other components (like DEVC)
          _remove_component( o_comp ).
        ENDIF.
        o_comp = _complist-&gt;get_next( ).
      ENDWHILE.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CREATE_NEW" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " MTDDECLTYP="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Create a new Container"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TS_CONTDATA">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Full Container data"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_FILE" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_FILE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="File Manager"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="3 " PARDECLTYP="3" TYPTYPE="3" TYPE="ZAPLINK_CONTAINER">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPLINK Container : To store SAP component in XML"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA _desc TYPE REF TO cl_abap_objectdescr.
  DATA _pos TYPE i.
  DATA _str  TYPE string.

  CHECK NOT data-name IS INITIAL.
  CREATE OBJECT result
    EXPORTING
      o_file = o_file.
  result-&gt;data-public = data.
  result-&gt;data-version = version.
* Get class name
  _desc ?= cl_abap_objectdescr=&gt;describe_by_object_ref( result ).
*  Result-&gt;data-class = &apos;ZAPLINK_CONTAINER&apos;.
  _str = _desc-&gt;absolute_name.
  FIND ALL OCCURRENCES OF &apos;=&apos; IN _str MATCH OFFSET _pos.
  IF NOT _pos IS INITIAL.
    ADD 1 TO _pos.
    IF STRLEN( _str ) &gt; _pos.
      _str = _str+_pos.
    ENDIF.
  ENDIF.
  result-&gt;data-class = _str.
  result-&gt;_update_header( ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="REMOVE_COMPONENTS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="5 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Remove SAP Components from Container"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="OBJECT_LIST" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component list"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA o_comp    TYPE zaplink_list=&gt;to_component.

  CHECK object_list IS BOUND.
  TRY.
      object_list-&gt;order_kind = zaplink_list=&gt;order_kinds-no_order.
      object_list-&gt;init_sel_iter( ).
      object_list-&gt;display_progress = abap_true.

      o_comp = object_list-&gt;get_next( ).
      WHILE o_comp IS BOUND.
        TRY.
            _remove_component( o_comp ).
          CATCH zaplink_cx_connector.
        ENDTRY.

        o_comp = object_list-&gt;get_next( ).
      ENDWHILE.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SAVE_TO_FILE" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="3 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Export container to XML"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="O_FILE" VERSION="1" CMPTYPE="1" EDITORDER="1 " TYPTYPE="1" TYPE="TO_FILE" PAROPTIONL="X">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="File Manager"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA _streamfactory TYPE REF TO if_ixml_stream_factory.
  DATA _outputstream TYPE REF TO if_ixml_ostream.
  DATA _renderer TYPE REF TO if_ixml_renderer.
  DATA _tempstring TYPE string.
  DATA _printxmldoc TYPE REF TO cl_xml_document.
  DATA _rc      TYPE sysubrc.
  DATA _file    TYPE to_file.

  IF NOT xmldata IS BOUND.
    EXIT.
  ENDIF.

  _streamfactory = xmlengine-&gt;create_stream_factory( ).
  _outputstream = _streamfactory-&gt;create_ostream_cstring( _tempstring ).
  _update_header( ).
  _renderer = xmlengine-&gt;create_renderer( document = xmldata
                                           ostream = _outputstream ).
  _renderer-&gt;set_normalizing( ).
  _rc = _renderer-&gt;render( ).
  CREATE OBJECT _printxmldoc.
  _rc = _printxmldoc-&gt;parse_string( _tempstring ).

  WHILE _tempstring(1) &lt;&gt; &apos;&lt;&apos;.
    SHIFT _tempstring LEFT BY 1 PLACES.
  ENDWHILE.

  IF o_file IS BOUND.
    _file = o_file.
  ELSE.
    _file = file.
  ENDIF.
  TRY.
      _file-&gt;set_filecontent( _tempstring ).
      _file-&gt;save( ).
    CATCH zaplink_cx_file.
      RETURN.
  ENDTRY.
  file = _file.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_ADD_COMPONENT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Add a SAP Component to the Container"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Line object"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA o_connector TYPE zaplink_component=&gt;to_connector.
  DATA root      TYPE REF TO if_ixml_element.
  DATA _base     TYPE REF TO if_ixml_node.
  DATA rval      TYPE i.
  DATA _comp     TYPE zaplink_component=&gt;ts_component.
  DATA object    TYPE to_xml.
  DATA _index    LIKE LINE OF _nodeindex.
  DATA o_cx_cnx  TYPE REF TO zaplink_cx_connector.
  DATA o_cx_comp TYPE REF TO zaplink_cx_component.
  DATA o_cx_list TYPE REF TO zaplink_cx_list.

  CHECK component IS BOUND.
  TRY.
      _comp = component-&gt;get_key( ).
      o_connector = component-&gt;connector( ).
    CATCH zaplink_cx_component INTO o_cx_comp.
      TRY.
          component-&gt;set_exception( o_cx_comp ).
        CATCH zaplink_cx INTO o_cx.
          mac_cascade_raise o_mycx o_cx.
      ENDTRY.
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
      RAISE EXCEPTION TYPE zaplink_cx_container
                 EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
                             type = _comp-type
                             name = _comp-name.
  ENDTRY.

  CHECK o_connector IS BOUND.

* Extract Component
  TRY.
      o_connector-&gt;options = _options.
      object = o_connector-&gt;export_from_sap( component ).
      component-&gt;set_msg_coll( o_connector-&gt;application_log ).
    CATCH zaplink_cx_connector INTO o_cx_cnx.
      TRY.
          component-&gt;set_exception( o_cx_cnx ).
          component-&gt;set_msg_coll( o_connector-&gt;application_log ).
        CATCH zaplink_cx INTO o_cx.
          mac_cascade_raise o_mycx o_cx.
      ENDTRY.
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
      RAISE EXCEPTION TYPE zaplink_cx_container
                 EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
                          prev_cx = o_cx_cnx
                             type = _comp-type
                             name = _comp-name.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.

  IF NOT object IS BOUND.
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
    RAISE EXCEPTION TYPE zaplink_cx_container
               EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
                           type = _comp-type
                           name = _comp-name.

  ENDIF.

  TRY.
      root = object-&gt;get_root_element( ).
      _base = get_root( ). &quot; xmldata

      CHECK root IS BOUND.
      _remove_component( component ).
      rval = _base-&gt;append_child( root ).
      IF rval &lt;&gt; 0.
* error handling
        EXIT.
      ENDIF.

      TRY.
          _complist-&gt;add( component ).
        CATCH zaplink_cx_list INTO o_cx_list.
          TRY.
              component-&gt;set_exception( o_cx_list ).
            CATCH zaplink_cx INTO o_cx.
              mac_cascade_raise o_mycx o_cx.
          ENDTRY.
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
          RAISE EXCEPTION TYPE zaplink_cx_container
                     EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
                                 type = _comp-type
                                 name = _comp-name.
      ENDTRY.

      _index-key = component.
*      _index-node = _find_component_node( component ).       &quot; Find_component is based on node_index it can&apos;t be used to get node.
      _index-node = root.
      MODIFY TABLE _nodeindex FROM _index.
      IF sy-subrc &lt;&gt; 0.
        INSERT _index INTO TABLE _nodeindex.
      ENDIF.

    CATCH zaplink_cx_container INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_REMOVE_COMPONENT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Remove a SAP Component from the Container"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA node   TYPE REF TO if_ixml_node.
  DATA o_comp TYPE to_component.

  TRY.
      node = _find_component_node( component ).
      WHILE node IS BOUND.
        node-&gt;remove_node( ).
        IF sy-subrc = 0.
          DELETE _nodeindex WHERE node = node.
          o_comp = _complist-&gt;search( component ).
          IF o_comp IS BOUND.
            DELETE _nodeindex WHERE key = o_comp.
          ELSE. &quot; for security
            DELETE _nodeindex WHERE key = component.
          ENDIF.
          _complist-&gt;remove( component ).
        ENDIF.
        node = _find_component_node( component ).
      ENDWHILE.
    CATCH zaplink_cx_container INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="_UPDATE_HEADER" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Update Header into XML Data"/>
    </TEXTS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONTAINER" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Component"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA _root TYPE REF TO if_ixml_element.
  DATA _ezxml TYPE REF TO zaplink_easyxml.

  _root = xmldata-&gt;get_root_element( ).

  IF NOT _root IS BOUND.
    _root = xmldata-&gt;create_element( name = tn_container_root ).
    xmldata-&gt;if_ixml_node~append_child( _root ).
  ENDIF.

  CREATE OBJECT _ezxml.
  _ezxml-&gt;add_any( EXPORTING xml_node = _root
                                  any = data
*                                  name = tn_container_root
                               xmldoc = xmldata ).</SOURCE>
   </ITEM>
  </METHODS>
  <TYPES>
   <ITEM CMPNAME="TS_CONTDATA_FULL" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="11 " SRCCOLUMN2="26 " TYPESRC_LENG="174 ">BEGIN OF ts_contdata_full.
  INCLUDE TYPE ts_contdata AS public.
  TYPES:
      version  TYPE td_contver,
      class    TYPE td_connclass,
    END OF ts_contdata_full
</ITEM>
   <ITEM CMPNAME="T_XML" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="STRING">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="XML data"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
