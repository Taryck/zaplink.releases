<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="18F7A72118476E4C74B1C4D5D15854E0" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_OPT_DEVCLASS" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-FRAMEWORK-CORE" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" UUID="57F9034B756EB95AE1000000AC120173" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="Zap Link DevClass options"/>
   </TEXTS>
  </A0_MAINDATA>
  <ALIASES>
   <ITEM CMPNAME="TD_DEVCLASS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_DEVCLASS"/>
   <ITEM CMPNAME="TD_EXISTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_EXISTS"/>
   <ITEM CMPNAME="TD_SUBSTITUTIONKIND" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_SUBSTITUTIONKIND"/>
  </ALIASES>
  <ATTRIBUTS>
   <ITEM CMPNAME="LOCAL_DEVCLASS" VERSION="1" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;$TMP&apos;" TYPTYPE="1" TYPE="TD_DEVCLASS">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Devclass for Local class"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_CX" VERSION="1" STATE="1" EDITORDER="3 " ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_ROOT_EXCEPTION">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_MYCX" VERSION="1" STATE="1" EDITORDER="2 " ATTDECLTYP="1" TYPTYPE="1" TYPE="TO_EXCEPTION">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for DevClass"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="SUBSTITUTIONKINDS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" TYPTYPE="4" SRCROW1="21 " SRCCOLUMN1="4 " SRCROW2="27 " SRCCOLUMN2="29 " TYPESRC_LENG="622 " TYPESRC="BEGIN OF substitutionkinds,
        use_container  TYPE td_substitutionkind VALUE &apos;C&apos;,    &quot; Keep dev class in XML file
        no_overwrite   TYPE td_substitutionkind VALUE &apos;N&apos;,    &quot; No overwrite : Use existing devclass, otherwise use container devclass otherwise use local otherwise let user choose
        keep_existing  TYPE td_substitutionkind VALUE &apos;K&apos;,    &quot; Use devclass define in component
        local          TYPE td_substitutionkind VALUE &apos;L&apos;,    &quot; Devclass = $TMP
        fixed          TYPE td_substitutionkind VALUE &apos;F&apos;,    &quot; Assign allways the same specified devclass
      END OF substitutionkinds
">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="All possible Devclass substitution Kinds"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_DEVCLASS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="TD_DEVCLASS">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="DevClass"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_SUBSTITUTION" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="TD_SUBSTITUTIONKIND">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Devclass substitution Kind"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <INTERFACES>
   <ITEM REFCLSNAME="ZAPLINK_DATATYPES" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1"/>
  </INTERFACES>
  <LOCAL>
   <TYPES>
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* IMPLEMENTATION OR PRIVATE METHOD&apos;S SIGNATURE</TYPES>
   <IMPLEMENTATIONS>
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* LOCAL HELPER CLASSES</IMPLEMENTATIONS>
   <MACROS>
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE ZAPLINK_MACROS.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDTYPE="2">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>
  _substitution = substitutionkinds-keep_existing.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="DO_EXISTS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="8 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Do devclass exists"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DEVCLASS"/>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_EXISTS"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_OPT_DEVCLASS" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Options"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>

  result = abap_false.
  CHECK NOT data IS INITIAL.

  CALL FUNCTION &apos;TRINT_DEVCLASS_GET&apos;
    EXPORTING
      iv_devclass              = data
*      IV_LANGU                 = SY-LANGU
*      IV_WITH_LAYER            = &apos;X&apos;
*      IV_WITH_TEXT             = &apos; &apos;
*      IV_USE_MEMORY            = &apos; &apos;
*    IMPORTING
*      ES_TDEVC                 =
    EXCEPTIONS
      devclass_not_found       = 1
      OTHERS                   = 2.
  IF sy-subrc = 0.
    result = abap_true.
  ELSEIF sy-subrc &lt;&gt; 1.
    RAISE EXCEPTION TYPE zaplink_cx_opt_devclass
          EXPORTING textid = zaplink_cx_opt_devclass=&gt;missing_devclass
                  devclass = data.
  ENDIF.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_DEVCLASS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="4 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="DevClass : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_DEVCLASS"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_OPT_DEVCLASS" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Options"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
result = _devclass.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_EXISTING" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="7 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get existing devclass"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component in progress"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_DEVCLASS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="DevClass used for object"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_OPT_DEVCLASS" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Options"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA _name        TYPE tadir-obj_name.
  DATA _type        TYPE tadir-object.
  DATA _exists      TYPE saus_dpara-tadirexist.

  CHECK component IS BOUND.

  TRY.
      _type = component-&gt;get_type( ).
      _name = component-&gt;get_name( ).
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.

  CALL FUNCTION &apos;TRINT_TADIR_QUERY&apos;
    EXPORTING
      iv_pgmid           = &apos;R3TR&apos;
      iv_object          = _type
      iv_obj_name        = _name
    IMPORTING
*      EV_OBJECT          =
*      EV_SRCSYSTEM       =
      ev_devclass        = result
*      EV_AUTHOR          =
*      EV_GENFLAG         =
      ev_exist           = _exists.
  IF _exists IS INITIAL.
    CLEAR result.
  ENDIF.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_SUBSTITUTIONKIND" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Substitution Kind : Getter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_SUBSTITUTIONKIND">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Devclass substitution Kind"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_OPT_DEVCLASS" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Options"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  result = _substitution.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_DEVCLASS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="5 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="DevClass : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DEVCLASS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="DevClass"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_OPT_DEVCLASS" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Options"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
CHECK data &lt;&gt; _devclass.

  IF _devclass IS INITIAL AND _substitution = substitutionkinds-fixed.
    RAISE EXCEPTION TYPE zaplink_cx_opt_devclass
          EXPORTING textid = zaplink_cx_opt_devclass=&gt;missing_devclass
                 substkind = _substitution.
  ENDIF.
  _devclass = data.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_SUBSTITUTIONKIND" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="3 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Substitution Kind : Setter"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_SUBSTITUTIONKIND">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Devclass substitution Kind"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_OPT_DEVCLASS" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Options"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  CHECK data &lt;&gt; _substitution.

  CASE data.
    WHEN substitutionkinds-keep_existing OR
         substitutionkinds-use_container OR
         substitutionkinds-no_overwrite  OR
         substitutionkinds-local.
    WHEN substitutionkinds-fixed.
      IF _devclass IS INITIAL.
        RAISE EXCEPTION TYPE zaplink_cx_opt_devclass
              EXPORTING textid = zaplink_cx_opt_devclass=&gt;missing_devclass
                     substkind = data.
      ENDIF.
    WHEN OTHERS.
      RAISE EXCEPTION TYPE zaplink_cx_opt_devclass
            EXPORTING textid = zaplink_cx_opt_devclass=&gt;invalid_substitutionkind
                   substkind = data.
  ENDCASE.
  _substitution = data.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SUBSTITUTE" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="6 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get substitute devclass"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component in progress"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_DEVCLASS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="DevClass used for object"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_OPT_DEVCLASS" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Options"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA comp_devc TYPE td_devclass.

  CHECK component IS BOUND.
  comp_devc = component-&gt;directory-devclass.

  TRY.

      IF component-&gt;get_type( ) = &apos;DEVC&apos;.
        result = component-&gt;get_name( ).
      ELSE.
        CASE _substitution.
          WHEN substitutionkinds-no_overwrite.
            result = get_existing( component ).
            IF NOT result IS INITIAL.
              EXIT.
            ENDIF.
            IF do_exists( comp_devc ) = abap_true.
              result = comp_devc.
              EXIT.
            ENDIF.
            result = me-&gt;_devclass.
          WHEN substitutionkinds-keep_existing.
            result = get_existing( component ).
            IF result IS INITIAL.
              result = local_devclass.
            ENDIF.
          WHEN substitutionkinds-use_container.
            IF do_exists( comp_devc ) = abap_true.
              result = comp_devc.
            ELSE.
              result = local_devclass.
            ENDIF.
          WHEN substitutionkinds-local.
            result = local_devclass.
          WHEN substitutionkinds-fixed.
            result = me-&gt;_devclass.
          WHEN OTHERS.
            RAISE EXCEPTION TYPE zaplink_cx_opt_devclass
                  EXPORTING textid = zaplink_cx_opt_devclass=&gt;invalid_substitutionkind
                         substkind = _substitution.
        ENDCASE.
      ENDIF.

    CATCH zaplink_cx_opt_devclass INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
  </METHODS>
  <TYPES>
   <ITEM CMPNAME="TO_COMPONENT" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_RAW">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Zap Link Component"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_EXCEPTION" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="3" TYPE="ZAPLINK_CX_OPT_DEVCLASS">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink Exception for Options"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_ROOT_EXCEPTION" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_CX">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
