<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="B20DBDFD603A72071996F67E2141877D" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_DICTIONARY" TYPE="CLAS" VERSION="1.01">
 <DEPENDENCIES>
  <ITEM TYPE="CLAS" NAME="ZAPLINK_CONNECTOR_"/>
 </DEPENDENCIES>
 <DIRECTORY DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" UUID="A576624B87531F63E1000000AC120173" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <INHERITANCE REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" STATE="1"/>
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="Data for Class"/>
   </TEXTS>
  </A0_MAINDATA>
  <ATTRIBUTS>
   <ITEM CMPNAME="BALLOG_SUBOBJECT" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;CNX_DICTIONARY&apos;" TYPTYPE="1" TYPE="BALSUBOBJ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Application Log: Subobject"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="DD_EU_TYPE" VERSION="1" STATE="1" EDITORDER="4 " ATTDECLTYP="2" TYPTYPE="4" SRCROW1="24 " SRCCOLUMN1="4 " SRCROW2="43 " SRCCOLUMN2="20 " TYPESRC_LENG="1396 " TYPESRC="BEGIN OF dd_eu_type,          &quot; Domain DDEUTYPE
      table_type        TYPE ddeutype VALUE &apos;A&apos;,     &quot; A  Table Type
      domain            TYPE ddeutype VALUE &apos;D&apos;,     &quot; D  Domain
      data_element      TYPE ddeutype VALUE &apos;E&apos;,     &quot; E  Data Element
      table_field       TYPE ddeutype VALUE &apos;F&apos;,     &quot; F  Table Field
      type_group        TYPE ddeutype VALUE &apos;G&apos;,     &quot; G  Type Group
      search_help       TYPE ddeutype VALUE &apos;H&apos;,     &quot; H  Search Help
      mactchcode_id     TYPE ddeutype VALUE &apos;I&apos;,     &quot; I  Matchcode ID
      lock_object       TYPE ddeutype VALUE &apos;L&apos;,     &quot; L  Lock Object
      matchcode_obj     TYPE ddeutype VALUE &apos;M&apos;,     &quot; M  Matchcode Object
      table_index       TYPE ddeutype VALUE &apos;N&apos;,     &quot; N  Table Index
      ext_index         TYPE ddeutype VALUE &apos;N&apos;,     &quot; O  Extention Index MF INTERN_TRANSL_EUTYPE
      internal_struct   TYPE ddeutype VALUE &apos;S&apos;,     &quot; S  Internal Structure
      transp_table      TYPE ddeutype VALUE &apos;T&apos;,     &quot; T  Transparent Table
      structure         TYPE ddeutype VALUE &apos;U&apos;,     &quot; U  Table/Structure
      view              TYPE ddeutype VALUE &apos;V&apos;,     &quot; V  View
      table_pool        TYPE ddeutype VALUE &apos;X&apos;,     &quot; X  Table Pool
      table_cluster     TYPE ddeutype VALUE &apos;Y&apos;,     &quot; Y  Table Cluster
      t_cluster_pool    TYPE ddeutype VALUE &apos;Z&apos;,     &quot; Z  Table cluster/pool
    END OF dd_eu_type
">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="DD object type in EU management system (domain : DDEUTYPE)"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="SUPPORTEDTYPES" VERSION="1" STATE="1" EDITORDER="3 " ATTDECLTYP="2" TYPTYPE="4" SRCROW1="8 " SRCCOLUMN1="4 " SRCROW2="22 " SRCCOLUMN2="24 " TYPESRC_LENG="896 " TYPESRC="BEGIN OF supportedtypes,                                  &quot;#EC NOTEXT
      type_group        TYPE td_comptype VALUE &apos;TYPE&apos;,
      domain            TYPE td_comptype VALUE &apos;DOMA&apos;,
      data_element      TYPE td_comptype VALUE &apos;DTEL&apos;,
      table_type        TYPE td_comptype VALUE &apos;TTYP&apos;,
      search_help       TYPE td_comptype VALUE &apos;SHLP&apos;,
      mactchcode_id     TYPE td_comptype VALUE &apos;MCID&apos;,
      lock_object       TYPE td_comptype VALUE &apos;ENQU&apos;,
      matchcode_obj     TYPE td_comptype VALUE &apos;MCOB&apos;,
      table_index       TYPE td_comptype VALUE &apos;INDX&apos;,     &quot; N  Table Index
      ext_index         TYPE td_comptype VALUE &apos;XINX&apos;,     &quot; O  Extention Index MF INTERN_TRANSL_EUTYPE
      table             TYPE td_comptype VALUE &apos;TABL&apos;,
      view              TYPE td_comptype VALUE &apos;VIEW&apos;,
      t_cluster_pool    TYPE td_comptype VALUE &apos;SQLT&apos;,
    END OF supportedtypes
">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Connector supported types"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_UUID" VERSION="1" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;5079624B82531D63E1000000AC120173&apos;" TYPTYPE="1" TYPE="TD_CONNUUID">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="UUID for connector Message class"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_VER" VERSION="1" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;1.0&apos;" TYPTYPE="1" TYPE="TD_CONNVER">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Connector Version"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <DEFERRED>
   <CLASSES>
    <ITEM TYPEGROUP="ZAPLINK_DOCUMENTATION" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
   </CLASSES>
  </DEFERRED>
  <LOCAL>
   <TYPES>
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* IMPLEMENTATION OR PRIVATE METHOD&apos;S SIGNATURE</TYPES>
   <IMPLEMENTATIONS>
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* LOCAL HELPER CLASSES</IMPLEMENTATIONS>
   <MACROS>
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE zaplink_macros.

DEFINE mac_obj_data.
  data o_typegroup type to_typegroup.
  data o_domain    type to_domain.
  data o_data_e    type to_data_element.
  data o_view      type to_view.
  data o_table     type to_table.
  data o_tab_type  type to_table_type.
  data o_s_help    type to_search_help.
  data o_lock_obj  type to_lock_object.
END-OF-DEFINITION.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDTYPE="2">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>
  DATA type LIKE LINE OF supported_types.

  CALL METHOD super-&gt;constructor.
  mac_create_log application_log ballog_subobject space.
  type-type = supportedtypes-type_group.    INSERT type INTO TABLE supported_types.
  type-type = supportedtypes-domain.        INSERT type INTO TABLE supported_types.
  type-type = supportedtypes-data_element.  INSERT type INTO TABLE supported_types.
  type-type = supportedtypes-view.          INSERT type INTO TABLE supported_types.
  type-type = supportedtypes-table.         INSERT type INTO TABLE supported_types.
  type-type = supportedtypes-table_type.    INSERT type INTO TABLE supported_types.
  type-type = supportedtypes-search_help.   INSERT type INTO TABLE supported_types.
  type-type = supportedtypes-lock_object.   INSERT type INTO TABLE supported_types.

  uuid = _uuid.
  version = _ver.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXPORT_DATA_ELEMENT" VERSION="1" STATE="1" EDITORDER="5 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Export Data Element from SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJECT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_DATA_ELEMENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Data for data element"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name     TYPE ddobjname.
  DATA str        TYPE string.
  DATA subrc      TYPE sy-subrc.
  DATA s_fm_data  TYPE zaplink_dtel_data=&gt;ts_fm_data.
  DATA d_mask     TYPE doku_obj.
  FIELD-SYMBOLS:
    &lt;o_s&gt; TYPE REF TO cl_wb_source.

  TRY.
    d_name = component-&gt;get_name( ).
    CALL FUNCTION &apos;DDIF_DTEL_GET&apos;
      EXPORTING
        name                = d_name
        state               = &apos;M&apos;
        langu               = &apos; &apos;
      IMPORTING
*        GOTSTATE            =
        dd04v_wa            = s_fm_data-header
        tpara_wa            = s_fm_data-param
      EXCEPTIONS
        illegal_input       = 1
        OTHERS              = 2.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_DTEL_GET&apos; sy-subrc.
    ENDIF.

    SELECT *
      INTO TABLE s_fm_data-texts
      FROM dd04t
      WHERE rollname = d_name.

    d_mask = d_name.
    s_fm_data-docs = zaplink_documentation=&gt;get( ids = zaplink_dtel_data=&gt;r_doc_ids
                                              object = d_mask ).

    CREATE OBJECT object.
    object-&gt;from_data( s_fm_data ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXPORT_DOMAIN" VERSION="1" STATE="1" EDITORDER="3 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Export Domain from SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJECT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_DOMAIN">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Data for Domain"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name     TYPE ddobjname.
  DATA str        TYPE string.
  DATA subrc      TYPE sy-subrc.
  DATA s_fm_data  TYPE zaplink_doma_data=&gt;ts_fm_data.
  DATA d_mask     TYPE doku_obj.
  FIELD-SYMBOLS:
*    &lt;o_e&gt; TYPE REF TO cl_wb_editor,
    &lt;o_s&gt; TYPE REF TO cl_wb_source.

  TRY.
    d_name = component-&gt;get_name( ).
    CALL FUNCTION &apos;DDIF_DOMA_GET&apos;
      EXPORTING
        name                = d_name
        state               = &apos;M&apos;
*       LANGU               = &apos; &apos;
      IMPORTING
*       GOTSTATE            =
        dd01v_wa            = s_fm_data-header
      TABLES
        dd07v_tab           = s_fm_data-values
      EXCEPTIONS
        illegal_input       = 1
        OTHERS              = 2.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_DOMA_GET&apos; sy-subrc.
    ENDIF.

    SELECT *
      INTO TABLE s_fm_data-texts
      FROM dd01t
      WHERE domname = d_name.

    SELECT *
      INTO TABLE s_fm_data-values_texts
      FROM dd07t
      WHERE domname = d_name.

    d_mask = d_name.
    s_fm_data-docs = zaplink_documentation=&gt;get( ids = zaplink_doma_data=&gt;r_doc_ids
                                              object = d_mask ).

    CREATE OBJECT object.
    object-&gt;from_data( s_fm_data ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXPORT_LOCK_OBJECT" VERSION="1" STATE="1" EDITORDER="15 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Export Lock Object from SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJECT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LOCK_OBJECT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Lock object (SE11) Datas"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name     TYPE ddobjname.
  DATA str        TYPE string.
  DATA subrc      TYPE sy-subrc.
  DATA s_fm_data  TYPE zaplink_enqu_data=&gt;ts_fm_data.
  DATA d_mask     TYPE doku_obj.
  FIELD-SYMBOLS:
    &lt;o_s&gt; TYPE REF TO cl_wb_source.

  TRY.
    d_name = component-&gt;get_name( ).
    CALL FUNCTION &apos;DDIF_ENQU_GET&apos;
      EXPORTING
        name                = d_name
*       STATE               = &apos;A&apos;
*       LANGU               = &apos; &apos;
      IMPORTING
*       GOTSTATE            =
        dd25v_wa            = s_fm_data-header
      TABLES
        dd26e_tab           = s_fm_data-tables
        dd27p_tab           = s_fm_data-fields
*       DDENA_TAB           =
      EXCEPTIONS
        illegal_input       = 1
        OTHERS              = 2.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_ENQU_GET&apos; sy-subrc.
    ENDIF.

    SELECT *
      INTO TABLE s_fm_data-texts
      FROM dd25t
      WHERE viewname = d_name
        AND ddtext &lt;&gt; space.

    d_mask = d_name.
    s_fm_data-docs = zaplink_documentation=&gt;get( ids = zaplink_enqu_data=&gt;r_doc_ids
                                              object = d_mask ).

    CREATE OBJECT object.
    object-&gt;from_data( s_fm_data ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXPORT_SEARCH_HELP" VERSION="1" STATE="1" EDITORDER="13 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Export Search Help from SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJECT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_SEARCH_HELP">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Search Help (SE11) Datas"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name     TYPE ddobjname.
  DATA str        TYPE string.
  DATA subrc      TYPE sy-subrc.
  DATA s_fm_data  TYPE zaplink_shlp_data=&gt;ts_fm_data.
  DATA d_mask     TYPE doku_obj.
  FIELD-SYMBOLS:
    &lt;o_s&gt; TYPE REF TO cl_wb_source.

  TRY.
    d_name = component-&gt;get_name( ).
    CALL FUNCTION &apos;DDIF_SHLP_GET&apos;
      EXPORTING
        name                = d_name
        STATE               = space
*       LANGU               = &apos; &apos;
      IMPORTING
*       GOTSTATE            =
        DD30V_WA            = s_fm_data-header
      TABLES
        DD31V_TAB           = s_fm_data-sub_sh
        DD32P_TAB           = s_fm_data-fields
        DD33V_TAB           = s_fm_data-ssh_params
      EXCEPTIONS
        ILLEGAL_INPUT       = 1
        OTHERS              = 2.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_SHLP_GET&apos; sy-subrc.
    ENDIF.

    SELECT *
      INTO TABLE s_fm_data-texts
      FROM dd30t
      WHERE SHLPNAME = d_name
        AND ddtext &lt;&gt; space.

    d_mask = d_name.
    s_fm_data-docs = zaplink_documentation=&gt;get( ids = zaplink_shlp_data=&gt;r_doc_ids
                                              object = d_mask ).

    CREATE OBJECT object.
    object-&gt;from_data( s_fm_data ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXPORT_TABLE" VERSION="1" STATE="1" EDITORDER="9 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Export table from SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJECT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_TABLE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Table (SE11) Datas"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name     TYPE ddobjname.
  DATA str        TYPE string.
  DATA subrc      TYPE sy-subrc.
  DATA s_fm_data  TYPE zaplink_tabl_data=&gt;ts_fm_data.
  DATA d_mask     TYPE doku_obj.
  FIELD-SYMBOLS:
    &lt;o_s&gt; TYPE REF TO cl_wb_source.

  TRY.
    d_name = component-&gt;get_name( ).
    CALL FUNCTION &apos;DDIF_TABL_GET&apos;
      EXPORTING
        name                = d_name
        state               = &apos;M&apos;
*       LANGU               = &apos; &apos;
      IMPORTING
*       GOTSTATE            =
        dd02v_wa            = s_fm_data-header
        dd09l_wa            = s_fm_data-tech
      TABLES
        dd03p_tab           = s_fm_data-fields
        dd05m_tab           = s_fm_data-fk_fields
        dd08v_tab           = s_fm_data-forein_keys
        dd12v_tab           = s_fm_data-indexes
        dd17v_tab           = s_fm_data-idx_fields
        dd35v_tab           = s_fm_data-search_helps
        dd36m_tab           = s_fm_data-sh_fields
      EXCEPTIONS
        illegal_input       = 1
        OTHERS              = 2.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_TABL_GET&apos; sy-subrc.
    ENDIF.

    SELECT *
      INTO TABLE s_fm_data-texts
      FROM dd02t
      WHERE tabname = d_name
        AND ddtext &lt;&gt; space.

    SELECT *
      INTO TABLE s_fm_data-fields_texts
      FROM dd03t
      WHERE tabname = d_name
        AND ddtext &lt;&gt; space.

    d_mask = d_name.
    s_fm_data-docs = zaplink_documentation=&gt;get( ids = zaplink_tabl_data=&gt;r_doc_ids
                                              object = d_mask ).

    CREATE OBJECT object.
    object-&gt;from_data( s_fm_data ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXPORT_TABLE_TYPE" VERSION="1" STATE="1" EDITORDER="11 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Export table type from SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJECT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_TABLE_TYPE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Table type (SE11) Datas"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name     TYPE ddobjname.
  DATA str        TYPE string.
  DATA subrc      TYPE sy-subrc.
  DATA s_fm_data  TYPE zaplink_ttyp_data=&gt;ts_fm_data.
  DATA d_mask     TYPE doku_obj.
  FIELD-SYMBOLS:
    &lt;o_s&gt; TYPE REF TO cl_wb_source.

  TRY.
    d_name = component-&gt;get_name( ).
    CALL FUNCTION &apos;DDIF_TTYP_GET&apos;
      EXPORTING
        name                = d_name
        STATE               = space
*       LANGU               = &apos; &apos;
      IMPORTING
*       GOTSTATE            =
        DD40V_WA            = s_fm_data-header
      TABLES
        DD42V_TAB           = s_fm_data-keys
      EXCEPTIONS
        ILLEGAL_INPUT       = 1
        OTHERS              = 2.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_TTYP_GET&apos; sy-subrc.
    ENDIF.

    SELECT *
      INTO TABLE s_fm_data-texts
      FROM dd40t
      WHERE typename = d_name
        AND ddtext &lt;&gt; space.

    d_mask = d_name.
    s_fm_data-docs = zaplink_documentation=&gt;get( ids = zaplink_ttyp_data=&gt;r_doc_ids
                                              object = d_mask ).

    CREATE OBJECT object.
    object-&gt;from_data( s_fm_data ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXPORT_TYPE_GROUP" VERSION="1" STATE="1" EDITORDER="1 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Export Type Group from SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJECT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_TYPEGROUP">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Data for Type group"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_type     TYPE td_typegroup.
  DATA str        TYPE string.
  DATA subrc      TYPE sy-subrc.
  DATA t_source   TYPE TABLE OF string.
  FIELD-SYMBOLS:
*    &lt;o_e&gt; TYPE REF TO cl_wb_editor,
    &lt;o_s&gt; TYPE REF TO cl_wb_source.

  TRY.
    d_type = component-&gt;get_name( ).
*  PERFORM tygr_exists IN PROGRAM saplsd31
*          USING    type
*          CHANGING subrc.
*  IF sy-subrc &lt;&gt; 0.
*    EXIT.
*  ENDIF.
    PERFORM xx_first_get IN PROGRAM saplsd31
            USING    d_type space dd_eu_type-type_group &apos;S&apos; space &apos;X&apos;
            CHANGING subrc.
* source_instance  ABAP_EDITOR DF
* uccheck = source_instance-&gt;l_progdir_entry-uccheck
*  df-ddxx-as4user = source_instance-&gt;l_progdir_entry-unam.
*  df-ddxx-as4date = source_instance-&gt;l_progdir_entry-udat.
** unicode flag
*  df-ddxx-uccheck = source_instance-&gt;l_progdir_entry-uccheck.
** Mastersprache in TADIR lesen
*  SELECT SINGLE masterlang FROM tadir
*                           INTO rsdxx-malangu
*       WHERE  pgmid       = &apos;R3TR&apos;
*       AND    object      = &apos;TYPE&apos;
*       AND    obj_name    = df-ddxx-typegroup.
** Kurzbeschreibung lesen
*  SELECT SINGLE ddtext FROM ddtypet INTO df-ddxx-ddtext
*         WHERE typegroup  = df-ddxx-typegroup AND
*               ddlanguage = rsdxx-malangu.

    str = &apos;(SAPLSD31)SOURCE_INSTANCE&apos;.
    ASSIGN (str) TO &lt;o_s&gt;.
    IF sy-subrc &lt;&gt; 0.
      EXIT.
    ENDIF.

    CREATE OBJECT object.
    object-&gt;a0_maindata-name = d_type.
    object-&gt;a0_maindata-uccheck = &lt;o_s&gt;-&gt;l_progdir_entry-uccheck.
    SELECT SINGLE masterlang FROM tadir
                             INTO object-&gt;a0_maindata-lang
         WHERE  pgmid       = &apos;R3TR&apos;
         AND    object      = &apos;TYPE&apos;
         AND    obj_name    = object-&gt;a0_maindata-name.
* Kurzbeschreibung lesen
    SELECT SINGLE ddtext FROM ddtypet INTO object-&gt;a0_maindata-text
           WHERE typegroup  = object-&gt;a0_maindata-name
             AND ddlanguage = object-&gt;a0_maindata-lang.

    CALL METHOD &lt;o_s&gt;-&gt;get_source_old( IMPORTING old_source = t_source ).
    object-&gt;set_source( t_source ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXPORT_VIEW" VERSION="1" STATE="1" EDITORDER="7 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Export view from SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJECT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_VIEW">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Views (SE11) Datas"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name     TYPE ddobjname.
  DATA str        TYPE string.
  DATA subrc      TYPE sy-subrc.
  DATA s_fm_data  TYPE zaplink_view_data=&gt;ts_fm_data.
  DATA d_mask     TYPE doku_obj.
  FIELD-SYMBOLS:
*    &lt;o_e&gt; TYPE REF TO cl_wb_editor,
    &lt;o_s&gt; TYPE REF TO cl_wb_source.

  TRY.
    d_name = component-&gt;get_name( ).
    CALL FUNCTION &apos;DDIF_VIEW_GET&apos;
      EXPORTING
        name                = d_name
        state               = &apos;M&apos;
        langu               = &apos; &apos;
      IMPORTING
*       GOTSTATE            =
        dd25v_wa            = s_fm_data-header
        dd09l_wa            = s_fm_data-tech
      TABLES
        dd26v_tab           = s_fm_data-tables
        dd27p_tab           = s_fm_data-fields
        dd28j_tab           = s_fm_data-joins
        dd28v_tab           = s_fm_data-wheres
      EXCEPTIONS
        illegal_input       = 1
        OTHERS              = 2.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_VIEW_GET&apos; sy-subrc.
    ENDIF.

    SELECT *
      INTO TABLE s_fm_data-texts
      FROM dd25t
      WHERE viewname = d_name.

    d_mask = d_name.
    s_fm_data-docs = zaplink_documentation=&gt;get( ids = zaplink_view_data=&gt;r_doc_ids
                                              object = d_mask ).

    CREATE OBJECT object.
    object-&gt;from_data( s_fm_data ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IMPORT_DATA_ELEMENT" VERSION="1" STATE="1" EDITORDER="6 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Import Data Element to SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENTS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_DATA_ELEMENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Data for Data element"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name         TYPE rsedd0-ddobjname.
  DATA d_subrc        TYPE sy-subrc.
  DATA s_fm_data      TYPE zaplink_dtel_data=&gt;ts_fm_data.

  TRY.
    s_fm_data = o_data-&gt;to_data( ).
    d_name = s_fm_data-header-rollname.
    CALL FUNCTION &apos;RS_DD_DELETE_OBJ&apos;
      EXPORTING
        no_ask                     = abap_true
        objname                    = d_name
        objtype                    = dd_eu_type-data_element
*     CHANGING
*       CORRNUM                    = &apos; &apos;
      EXCEPTIONS
        not_executed               = 1
        object_not_found           = 0
        object_not_specified       = 3
        permission_failure         = 4
        dialog_needed              = 5
        OTHERS                     = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;RS_DD_DELETE_OBJ&apos; sy-subrc.
    ENDIF.

    CALL FUNCTION &apos;DDIF_DTEL_PUT&apos;
      EXPORTING
        name              = d_name
        dd04v_wa          = s_fm_data-header
      EXCEPTIONS
        dtel_not_found    = 1
        name_inconsistent = 2
        dtel_inconsistent = 3
        put_failure       = 4
        put_refused       = 5
        OTHERS            = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_DTEL_PUT&apos; sy-subrc.
    ENDIF.

    DELETE FROM dd04t WHERE rollname = s_fm_data-header-rollname.
    MODIFY dd04t FROM TABLE s_fm_data-texts.

    zaplink_documentation=&gt;set( s_fm_data-docs ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IMPORT_DOMAIN" VERSION="1" STATE="1" EDITORDER="4 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Import Domain to SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENTS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_DOMAIN">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Data for Domain"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name         TYPE rsedd0-ddobjname.
  DATA d_subrc        TYPE sy-subrc.
  DATA s_fm_data      TYPE zaplink_doma_data=&gt;ts_fm_data.

  TRY.
    s_fm_data = o_data-&gt;to_data( ).
    d_name = s_fm_data-header-domname.
    CALL FUNCTION &apos;RS_DD_DELETE_OBJ&apos;
      EXPORTING
        no_ask                     = abap_true
        objname                    = d_name
        objtype                    = dd_eu_type-domain
*     CHANGING
*       CORRNUM                    = &apos; &apos;
      EXCEPTIONS
        not_executed               = 1
        object_not_found           = 0
        object_not_specified       = 3
        permission_failure         = 4
        dialog_needed              = 5
        OTHERS                     = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;RS_DD_DELETE_OBJ&apos; sy-subrc.
    ENDIF.

    CALL FUNCTION &apos;DDIF_DOMA_PUT&apos;
      EXPORTING
        name              = d_name
        dd01v_wa          = s_fm_data-header
      TABLES
        dd07v_tab         = s_fm_data-values
      EXCEPTIONS
        doma_not_found    = 1
        name_inconsistent = 2
        doma_inconsistent = 3
        put_failure       = 4
        put_refused       = 5
        OTHERS            = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_DOMA_PUT&apos; sy-subrc.
    ENDIF.

    DELETE FROM dd01t WHERE domname = s_fm_data-header-domname.
    MODIFY dd01t FROM TABLE s_fm_data-texts.

    DELETE FROM dd07t WHERE domname = s_fm_data-header-domname.
    MODIFY dd07t FROM TABLE s_fm_data-values_texts.

    zaplink_documentation=&gt;set( s_fm_data-docs ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IMPORT_LOCK_OBJECT" VERSION="1" STATE="1" EDITORDER="16 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Import Lock Object to SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENTS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_LOCK_OBJECT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Table type (SE11) Datas"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name         TYPE rsedd0-ddobjname.
  DATA d_subrc        TYPE sy-subrc.
  DATA s_fm_data      TYPE zaplink_enqu_data=&gt;ts_fm_data.

  TRY.
    s_fm_data = o_data-&gt;to_data( ).
    d_name = s_fm_data-header-viewname.
    CALL FUNCTION &apos;RS_DD_DELETE_OBJ&apos;
      EXPORTING
        no_ask                     = abap_true
        objname                    = d_name
        objtype                    = dd_eu_type-lock_object
*     CHANGING
*       CORRNUM                    = &apos; &apos;
      EXCEPTIONS
        not_executed               = 1
        object_not_found           = 0
        object_not_specified       = 3
        permission_failure         = 4
        dialog_needed              = 5
        OTHERS                     = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;RS_DD_DELETE_OBJ&apos; sy-subrc.
    ENDIF.

    CALL FUNCTION &apos;DDIF_ENQU_PUT&apos;
      EXPORTING
        name              = d_name
        dd25v_wa          = s_fm_data-header
      TABLES
        dd26e_tab         = s_fm_data-tables
        dd27p_tab         = s_fm_data-fields
      EXCEPTIONS
        enqu_not_found    = 1
        name_inconsistent = 2
        enqu_inconsistent = 3
        put_failure       = 4
        put_refused       = 5
        OTHERS            = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_ENQU_PUT&apos; sy-subrc.
    ENDIF.

    DELETE FROM dd25t WHERE viewname = s_fm_data-header-viewname.
    MODIFY dd25t FROM TABLE s_fm_data-texts.

    zaplink_documentation=&gt;set( s_fm_data-docs ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IMPORT_SEARCH_HELP" VERSION="1" STATE="1" EDITORDER="14 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Import Search Help to SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENTS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_SEARCH_HELP">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Table type (SE11) Datas"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name         TYPE rsedd0-ddobjname.
  DATA d_subrc        TYPE sy-subrc.
  DATA s_fm_data      TYPE zaplink_shlp_data=&gt;ts_fm_data.

  TRY.
    s_fm_data = o_data-&gt;to_data( ).
    d_name = s_fm_data-header-shlpname.
    CALL FUNCTION &apos;RS_DD_DELETE_OBJ&apos;
      EXPORTING
        no_ask                     = abap_true
        objname                    = d_name
        objtype                    = dd_eu_type-search_help
*     CHANGING
*       CORRNUM                    = &apos; &apos;
      EXCEPTIONS
        not_executed               = 1
        object_not_found           = 0
        object_not_specified       = 3
        permission_failure         = 4
        dialog_needed              = 5
        OTHERS                     = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;RS_DD_DELETE_OBJ&apos; sy-subrc.
    ENDIF.

    CALL FUNCTION &apos;DDIF_SHLP_PUT&apos;
      EXPORTING
        name              = d_name
        dd30v_wa          = s_fm_data-header
      TABLES
        dd31v_tab         = s_fm_data-sub_sh
        dd32p_tab         = s_fm_data-fields
        dd33v_tab         = s_fm_data-ssh_params
      EXCEPTIONS
        shlp_not_found    = 1
        name_inconsistent = 2
        shlp_inconsistent = 3
        put_failure       = 4
        put_refused       = 5
        OTHERS            = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_SHLP_PUT&apos; sy-subrc.
    ENDIF.

    DELETE FROM dd30t WHERE shlpname = s_fm_data-header-shlpname.
    MODIFY dd30t FROM TABLE s_fm_data-texts.

    zaplink_documentation=&gt;set( s_fm_data-docs ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IMPORT_TABLE" VERSION="1" STATE="1" EDITORDER="10 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Import table to SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENTS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_TABLE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Table (SE11) Datas"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name         TYPE rsedd0-ddobjname.
  DATA d_subrc        TYPE sy-subrc.
  DATA s_fm_data      TYPE zaplink_tabl_data=&gt;ts_fm_data.
  DATA t_idx_flds     TYPE zaplink_tabl_data=&gt;tt_dd17v.
  FIELD-SYMBOLS: &lt;i&gt; LIKE LINE OF s_fm_data-indexes.

  TRY.
    s_fm_data = o_data-&gt;to_data( ).
    d_name = s_fm_data-header-tabname.
    CALL FUNCTION &apos;RS_DD_DELETE_OBJ&apos;
      EXPORTING
        no_ask                     = abap_true
        objname                    = d_name
        objtype                    = dd_eu_type-transp_table
*     CHANGING
*       CORRNUM                    = &apos; &apos;
      EXCEPTIONS
        not_executed               = 1
        object_not_found           = 0
        object_not_specified       = 3
        permission_failure         = 4
        dialog_needed              = 5
        OTHERS                     = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;RS_DD_DELETE_OBJ&apos; sy-subrc.
    ENDIF.

    CALL FUNCTION &apos;DDIF_TABL_PUT&apos;
      EXPORTING
        name                    = d_name
        dd02v_wa                = s_fm_data-header
        dd09l_wa                = s_fm_data-tech
      TABLES
          dd03p_tab           = s_fm_data-fields
          dd05m_tab           = s_fm_data-fk_fields
          dd08v_tab           = s_fm_data-forein_keys
*        dd12v_tab           = s_fm_data-indexes
*        dd17v_tab           = s_fm_data-idx_fields
          dd35v_tab           = s_fm_data-search_helps
          dd36m_tab           = s_fm_data-sh_fields
      EXCEPTIONS
        tabl_not_found          = 1
        name_inconsistent       = 2
        tabl_inconsistent       = 3
        put_failure             = 4
        put_refused             = 5
        OTHERS                  = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_TABL_PUT&apos; sy-subrc.
    ENDIF.

    LOOP AT s_fm_data-indexes ASSIGNING &lt;i&gt;.
      t_idx_flds = s_fm_data-idx_fields.    DELETE t_idx_flds WHERE indexname &lt;&gt; &lt;i&gt;-indexname.
      CALL FUNCTION &apos;DDIF_INDX_PUT&apos;
        EXPORTING
          name              = d_name
          id                = &lt;i&gt;-indexname
          dd12v_wa          = &lt;i&gt;
        TABLES
          dd17v_tab         = t_idx_flds
        EXCEPTIONS
          indx_not_found    = 1
          name_inconsistent = 2
          indx_inconsistent = 3
          put_failure       = 4
          put_refused       = 5
          OTHERS            = 6.
      IF sy-subrc &lt;&gt; 0.
        mac_add_mf_and_raise &apos;DDIF_INDX_PUT&apos; sy-subrc.
      ENDIF.
    ENDLOOP.

    DELETE FROM dd02t WHERE tabname = s_fm_data-header-tabname.
    MODIFY dd02t FROM TABLE s_fm_data-texts.

    DELETE FROM dd03t WHERE tabname = s_fm_data-header-tabname.
    MODIFY dd03t FROM TABLE s_fm_data-fields_texts.

    zaplink_documentation=&gt;set( s_fm_data-docs ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IMPORT_TABLE_TYPE" VERSION="1" STATE="1" EDITORDER="12 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Import table type to SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENTS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_TABLE_TYPE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Table type (SE11) Datas"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name         TYPE rsedd0-ddobjname.
  DATA d_subrc        TYPE sy-subrc.
  DATA s_fm_data      TYPE zaplink_ttyp_data=&gt;ts_fm_data.

  TRY.
    s_fm_data = o_data-&gt;to_data( ).
    d_name = s_fm_data-header-typename.
    CALL FUNCTION &apos;RS_DD_DELETE_OBJ&apos;
      EXPORTING
        no_ask                     = abap_true
        objname                    = d_name
        objtype                    = dd_eu_type-table_type
*     CHANGING
*       CORRNUM                    = &apos; &apos;
      EXCEPTIONS
        not_executed               = 1
        object_not_found           = 0
        object_not_specified       = 3
        permission_failure         = 4
        dialog_needed              = 5
        OTHERS                     = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;RS_DD_DELETE_OBJ&apos; sy-subrc.
    ENDIF.

    CALL FUNCTION &apos;DDIF_TTYP_PUT&apos;
      EXPORTING
        name              = d_name
        dd40v_wa          = s_fm_data-header
      TABLES
        dd42v_tab         = s_fm_data-keys
      EXCEPTIONS
        ttyp_not_found    = 1
        name_inconsistent = 2
        ttyp_inconsistent = 3
        put_failure       = 4
        put_refused       = 5
        OTHERS            = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_TTYP_PUT&apos; sy-subrc.
    ENDIF.

    DELETE FROM dd40t WHERE typename = s_fm_data-header-typename.
    MODIFY dd40t FROM TABLE s_fm_data-texts.

    zaplink_documentation=&gt;set( s_fm_data-docs ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IMPORT_TYPE_GROUP" VERSION="1" STATE="1" EDITORDER="2 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Import Type Group to SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENTS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_TYPEGROUP">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Data for Type group"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_typegroup    TYPE td_typegroup.
  DATA d_name         TYPE rsedd0-ddobjname.
  DATA d_subrc        TYPE sy-subrc.
  DATA t_source       TYPE zaplink_type_data=&gt;tt_string.
  DATA d_program      TYPE progdir.
  DATA str            TYPE string.
  FIELD-SYMBOLS:
    &lt;prog&gt; TYPE sy-repid.          &quot;Typgruppeninclude

  TRY.
    d_typegroup = o_data-&gt;a0_maindata-name.
* Check existence
    PERFORM tygr_exists IN PROGRAM saplsd31
          USING    d_typegroup
          CHANGING d_subrc.

    IF d_subrc = 0.
      d_name = d_typegroup.
      CALL FUNCTION &apos;RS_DD_DELETE_OBJ&apos;
        EXPORTING
*       NO_ASK                     = &apos; &apos;
          objname                    = d_name
          objtype                    = dd_eu_type-type_group
*     CHANGING
*       CORRNUM                    = &apos; &apos;
        EXCEPTIONS
          not_executed               = 1
          object_not_found           = 0
          object_not_specified       = 3
          permission_failure         = 4
          dialog_needed              = 5
          OTHERS                     = 6.
      IF sy-subrc &lt;&gt; 0.
        mac_add_mf_and_raise &apos;RS_DD_DELETE_OBJ&apos; sy-subrc.
      ENDIF.
    ENDIF.

    t_source = o_data-&gt;get_source( ).
    CALL FUNCTION &apos;RS_DD_TYGR_INSERT_SOURCES&apos;
      EXPORTING
        typegroupname        = o_data-&gt;a0_maindata-name
        ddtext               = o_data-&gt;a0_maindata-text
        corrnum              = space
        devclass             = space
      TABLES
        SOURCE               = t_source
      EXCEPTIONS
        already_exists       = 1
        not_executed         = 2
        permission_failure   = 3
        object_not_specified = 4
        illegal_name         = 5
        OTHERS               = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;RS_DD_TYGR_INSERT_SOURCES&apos; sy-subrc.
    ENDIF.

    PERFORM tygr_exists IN PROGRAM saplsd31
            USING    d_typegroup
            CHANGING d_subrc.
    IF d_subrc &lt;&gt; 0.
      EXIT.
    ENDIF.

    str = &apos;(SAPLSD31)PROGNAME&apos;.
    ASSIGN (str) TO &lt;prog&gt;.
    IF sy-subrc &lt;&gt; 0.
      EXIT.
    ENDIF.

    CALL FUNCTION &apos;READ_PROGDIR&apos;
      EXPORTING
        i_progname          = &lt;prog&gt;
*     I_STATE             = &apos; &apos;
      IMPORTING
        e_progdir           = d_program
*     E_PROGDIR_TAB       =
      EXCEPTIONS
        not_exists          = 1
        OTHERS              = 2.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;READ_PROGDIR&apos; sy-subrc.
    ENDIF.

    IF d_program-uccheck &lt;&gt; o_data-&gt;a0_maindata-uccheck.
      d_program-uccheck = o_data-&gt;a0_maindata-uccheck.
      CALL FUNCTION &apos;UPDATE_PROGDIR&apos;
        EXPORTING
          i_progdir    = d_program
          i_progname   = &lt;prog&gt;
          i_state      = d_program-state
        EXCEPTIONS
          not_executed = 1
          OTHERS       = 2.
      IF sy-subrc &lt;&gt; 0.
        mac_add_mf_and_raise &apos;UPDATE_PROGDIR&apos; sy-subrc.
      ENDIF.
    ENDIF.

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IMPORT_VIEW" VERSION="1" STATE="1" EDITORDER="8 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Import view to SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENTS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_VIEW">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Views (SE11) Datas"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA d_name         TYPE rsedd0-ddobjname.
  DATA d_subrc        TYPE sy-subrc.
  DATA s_fm_data      TYPE zaplink_view_data=&gt;ts_fm_data.

  TRY.
    s_fm_data = o_data-&gt;to_data( ).
    d_name = s_fm_data-header-viewname.
    CALL FUNCTION &apos;RS_DD_DELETE_OBJ&apos;
      EXPORTING
        no_ask                     = abap_true
        objname                    = d_name
        objtype                    = dd_eu_type-view
*     CHANGING
*       CORRNUM                    = &apos; &apos;
      EXCEPTIONS
        not_executed               = 1
        object_not_found           = 0
        object_not_specified       = 3
        permission_failure         = 4
        dialog_needed              = 5
        OTHERS                     = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;RS_DD_DELETE_OBJ&apos; sy-subrc.
    ENDIF.

    CALL FUNCTION &apos;DDIF_VIEW_PUT&apos;
      EXPORTING
        name              = d_name
        dd25v_wa          = s_fm_data-header
        dd09l_wa          = s_fm_data-tech
      TABLES
        dd26v_tab         = s_fm_data-tables
        dd27p_tab         = s_fm_data-fields
        dd28j_tab         = s_fm_data-joins
        dd28v_tab         = s_fm_data-wheres
      EXCEPTIONS
        view_not_found    = 1
        name_inconsistent = 2
        view_inconsistent = 3
        put_failure       = 4
        put_refused       = 5
        OTHERS            = 6.
    IF sy-subrc &lt;&gt; 0.
      mac_add_mf_and_raise &apos;DDIF_VIEW_PUT&apos; sy-subrc.
    ENDIF.

    DELETE FROM dd25t WHERE viewname = s_fm_data-header-viewname.
    MODIFY dd25t FROM TABLE s_fm_data-texts.

    zaplink_documentation=&gt;set( s_fm_data-docs ).

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
  </METHODS>
  <REDEFINITIONS>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~ANONYMIZE">
    <SOURCE>
  mac_obj_data.

  DEFINE mac_do_obj.
    &amp;1 ?= object-&gt;raw.
    &amp;1-&gt;anonymize( ).
  END-OF-DEFINITION.

  CASE object-&gt;type.
    WHEN supportedtypes-type_group.
      o_typegroup ?= object-&gt;raw.
*      o_typegroup-&gt;anonymize( ).
    WHEN supportedtypes-domain.         mac_do_obj o_domain.
    WHEN supportedtypes-data_element.   mac_do_obj o_data_e.
    WHEN supportedtypes-view.           mac_do_obj o_view.
    WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
      RAISE EXCEPTION TYPE zaplink_cx_connector
        EXPORTING
          textid = zaplink_cx_connector=&gt;type_not_supported
          type   = object-&gt;type
          connclass = &apos;ZAPLINK_DICTIONARY&apos;.
  ENDCASE.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~UNANONYMIZE">
    <SOURCE>
*  DATA o_type TYPE to_data.
*  DATA s_msg LIKE LINE OF o_type-&gt;messages.
*
*  TRY.
*      super-&gt;zaplink_cnx_ext_cleaner~unanonymize( object ).
*    CATCH zaplink_cx_connector INTO o_mycx.
*      RAISE EXCEPTION o_mycx.
*  ENDTRY.
*
*  o_type ?= object-&gt;raw.
*  if o_type-&gt;A0_MAINDATA-RESPUSER is INITIAL. o_type-&gt;A0_MAINDATA-RESPUSER = sy-uname. endif.
*  s_msg-name = o_type-&gt;A0_MAINDATA-RESPUSER.
*  MODIFY o_type-&gt;messages FROM s_msg TRANSPORTING name
*         WHERE name IS INITIAL.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~CREATE_NEW_RAW">
    <SOURCE>
  mac_obj_data.

  DEFINE mac_obj_create.
    create object &amp;1.
    object-&gt;raw = &amp;1.
  END-OF-DEFINITION.

  CREATE OBJECT object.
  CASE type.
    WHEN supportedtypes-type_group.     mac_obj_create o_typegroup.
    WHEN supportedtypes-domain.         mac_obj_create o_domain.
    WHEN supportedtypes-data_element.   mac_obj_create o_data_e.
    WHEN supportedtypes-view.           mac_obj_create o_view.
    WHEN supportedtypes-table.          mac_obj_create o_table.
    WHEN supportedtypes-table_type.     mac_obj_create o_tab_type.
    WHEN supportedtypes-search_help.    mac_obj_create o_s_help.
    WHEN supportedtypes-lock_object.    mac_obj_create o_lock_obj.
    WHEN OTHERS.
      CLEAR object.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
      RAISE EXCEPTION TYPE zaplink_cx_connector
        EXPORTING
          textid = zaplink_cx_connector=&gt;type_not_supported
          type   = type
          connclass = &apos;ZAPLINK_DICTIONARY&apos;.
  ENDCASE.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~DELETE_FROM_SAP">
    <SOURCE>
  DATA d_name TYPE rsedd0-ddobjname.
  DATA d_type TYPE rsedd0-ddobjtype.
  DATA type  TYPE td_comptype.

  TRY.

      type = component-&gt;get_type( ).
      CASE type.
        WHEN supportedtypes-type_group.
          d_type = dd_eu_type-type_group.
        WHEN supportedtypes-domain.
          d_type = dd_eu_type-domain.
        WHEN supportedtypes-data_element.
          d_type = dd_eu_type-data_element.
        WHEN supportedtypes-table_type.
          d_type = dd_eu_type-table_type.
        WHEN supportedtypes-search_help.
          d_type = dd_eu_type-search_help.
        WHEN supportedtypes-mactchcode_id.
          d_type = dd_eu_type-mactchcode_id.
        WHEN supportedtypes-lock_object.
          d_type = dd_eu_type-lock_object.
        WHEN supportedtypes-matchcode_obj.
          d_type = dd_eu_type-matchcode_obj.
        WHEN supportedtypes-table_index.
          d_type = dd_eu_type-table_index.
        WHEN supportedtypes-ext_index.
          d_type = dd_eu_type-ext_index.
*        WHEN supportedtypes-table.
*          d_type = dd_eu_type-table.
        WHEN supportedtypes-view.
          d_type = dd_eu_type-view.
*        WHEN supportedtypes-t_cluster_pool.
*          d_type = dd_eu_type-t_cluster_pool.
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = type
              connclass = &apos;ZAPLINK_DICTIONARY&apos;.
      ENDCASE.
      d_name = component-&gt;get_name( ).

      IF NOT d_type IS INITIAL.
        CALL FUNCTION &apos;RS_DD_DELETE_OBJ&apos;
          EXPORTING
*           NO_ASK                     = &apos; &apos;
            objname                    = d_name
            objtype                    = d_type
*         CHANGING
*           CORRNUM                    = &apos; &apos;
          EXCEPTIONS
            not_executed               = 1
            object_not_found           = 2
            object_not_specified       = 3
            permission_failure         = 4
            dialog_needed              = 5
            OTHERS                     = 6.
        IF sy-subrc &lt;&gt; 0. &quot; SAP NameSpace
          CASE sy-subrc.
            WHEN 2.
              RAISE EXCEPTION TYPE zaplink_cx_connector
                EXPORTING textid = zaplink_cx_connector=&gt;not_found.
            WHEN OTHERS.
              mac_add_mf_and_raise &apos;RS_DD_DELETE_OBJ&apos; sy-subrc.
          ENDCASE.
        ENDIF.

      ENDIF.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
  result = abap_true.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~DO_EXISTS">
    <SOURCE>
  DATA d_name TYPE rsedd0-ddobjname.
  DATA d_type TYPE rsedd0-ddobjtype.
  DATA type        TYPE td_comptype.

  exists = me-&gt;exists-not_exists.

  TRY.
      type = component-&gt;get_type( ).
      CASE type.
        WHEN supportedtypes-type_group.
          d_type = dd_eu_type-type_group.
        WHEN supportedtypes-domain.
          d_type = dd_eu_type-domain.
        WHEN supportedtypes-data_element.
          d_type = dd_eu_type-data_element.
        WHEN supportedtypes-table_type.
          d_type = dd_eu_type-table_type.
        WHEN supportedtypes-search_help.
          d_type = dd_eu_type-search_help.
        WHEN supportedtypes-mactchcode_id.
          d_type = dd_eu_type-mactchcode_id.
        WHEN supportedtypes-lock_object.
          d_type = dd_eu_type-lock_object.
        WHEN supportedtypes-matchcode_obj.
          d_type = dd_eu_type-matchcode_obj.
        WHEN supportedtypes-table_index.
          d_type = dd_eu_type-table_index.
        WHEN supportedtypes-ext_index.
          d_type = dd_eu_type-ext_index.
        WHEN supportedtypes-table.
          d_type = dd_eu_type-transp_table.
        WHEN supportedtypes-view.
          d_type = dd_eu_type-view.
*        WHEN supportedtypes-t_cluster_pool.
*          d_type = dd_eu_type-t_cluster_pool.
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = type
              connclass = &apos;ZAPLINK_MESSAGE&apos;.
      ENDCASE.
      d_name = component-&gt;get_name( ).

      IF NOT d_type IS INITIAL AND NOT d_name IS INITIAL.
        CALL FUNCTION &apos;INTERN_DD_CHECK_EXIST&apos;
          EXPORTING
            objname                     = d_name
            objtype                     = d_type
            err_message                 = abap_false
*           OBJSTATE                    = &apos;M&apos;
            exists                      = abap_true
*           SECNAME                     = &apos; &apos;
*         IMPORTING
*           MASTERLANGU                 =
*           OTHER_CLASS                 =
*           PROXY_TYPE                  =
          EXCEPTIONS
            object_not_found            = 1
            other_object_class          = 2
            invalid_parameter           = 3
            object_already_exists       = 4
            OTHERS                      = 5.
        IF sy-subrc = 0. &quot; SAP NameSpace
          exists = me-&gt;exists-exists.
        ELSE.
          CASE sy-subrc.
            WHEN 1  or 2.
            WHEN OTHERS.
              mac_add_mf_and_raise &apos;INTERN_DD_CHECK_EXIST&apos; sy-subrc.
          ENDCASE.
        ENDIF.

      ENDIF.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~IS_SUPPORTED_VERSION">
    <SOURCE>
  result = abap_false.
  if version = _ver.    result = abap_true.   endif.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~READ_FROM_SAP">
    <SOURCE>
  mac_obj_data.
  DATA d_type       TYPE td_comptype.

  DEFINE mac_catch_local_cx.
    catch zaplink_cx_connector into o_mycx.
      if not o_mycx-&gt;messages is bound.
        o_mycx-&gt;messages = application_log.
        o_mycx-&gt;update( ).
      endif.
      raise exception o_mycx.
  END-OF-DEFINITION.

  TRY.
      d_type = component-&gt;get_type( ).
      CREATE OBJECT object.
      object-&gt;set_component( component ).

      CASE d_type.
        WHEN supportedtypes-type_group.
          TRY.
            o_typegroup = export_type_group( component ).
            mac_catch_local_cx.
          ENDTRY.
          CLEAR o_typegroup-&gt;a0_maindata-name.
          object-&gt;raw = o_typegroup.
        WHEN supportedtypes-domain.
          TRY.
            o_domain = export_domain( component ).
            mac_catch_local_cx.
          ENDTRY.
          CLEAR o_domain-&gt;a0_maindata-domname.
          object-&gt;raw = o_domain.
        WHEN supportedtypes-data_element.
          TRY.
            o_data_e = export_data_element( component ).
            mac_catch_local_cx.
          ENDTRY.
          CLEAR o_data_e-&gt;a0_maindata-rollname.
          object-&gt;raw = o_data_e.
        WHEN supportedtypes-view.
          TRY.
            o_view = export_view( component ).
            mac_catch_local_cx.
          ENDTRY.
          CLEAR o_view-&gt;a0_maindata-viewname.
          object-&gt;raw = o_view.
        WHEN supportedtypes-table.
          TRY.
            o_table = export_table( component ).
            mac_catch_local_cx.
          ENDTRY.
          CLEAR o_table-&gt;a0_maindata-tabname.
          object-&gt;raw = o_table.
        WHEN supportedtypes-table_type.
          TRY.
            o_tab_type = export_table_type( component ).
            mac_catch_local_cx.
          ENDTRY.
          CLEAR o_tab_type-&gt;a0_maindata-typename.
          object-&gt;raw = o_tab_type.
        WHEN supportedtypes-search_help.
          TRY.
            o_s_help = export_search_help( component ).
            mac_catch_local_cx.
          ENDTRY.
          CLEAR o_s_help-&gt;a0_maindata-shlpname.
          object-&gt;raw = o_s_help.
        WHEN supportedtypes-lock_object.
          TRY.
            o_lock_obj = export_lock_object( component ).
            mac_catch_local_cx.
          ENDTRY.
          CLEAR o_lock_obj-&gt;a0_maindata-viewname.
          object-&gt;raw = o_lock_obj.
        WHEN OTHERS.
          CLEAR object.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = d_type
              connclass = &apos;ZAPLINK_DICTIONARY&apos;.
      ENDCASE.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~WRITE_TO_SAP">
    <SOURCE>
  mac_obj_data.
  DATA o_comp       TYPE to_component.

  DEFINE mac_catch_local_cx.
    catch zaplink_cx_connector into o_mycx.
      if not o_mycx-&gt;messages is bound.
        o_mycx-&gt;messages = application_log.
        o_mycx-&gt;update( ).
      endif.
      raise exception o_mycx.
  END-OF-DEFINITION.

  TRY.

      CASE object-&gt;type.
        WHEN supportedtypes-type_group.
          o_typegroup ?= object-&gt;raw.
          o_typegroup-&gt;a0_maindata-name = object-&gt;name.
          TRY.
            components = import_type_group( o_typegroup ).
            mac_catch_local_cx.
          ENDTRY.
        WHEN supportedtypes-domain.
          o_domain ?= object-&gt;raw.
          o_domain-&gt;a0_maindata-domname = object-&gt;name.
          TRY.
            components = import_domain( o_domain ).
            mac_catch_local_cx.
          ENDTRY.
        WHEN supportedtypes-data_element.
          o_data_e ?= object-&gt;raw.
          o_data_e-&gt;a0_maindata-rollname = object-&gt;name.
          TRY.
            components = import_data_element( o_data_e ).
            mac_catch_local_cx.
          ENDTRY.
        WHEN supportedtypes-view.
          o_view ?= object-&gt;raw.
          o_view-&gt;a0_maindata-viewname = object-&gt;name.
          TRY.
            components = import_view( o_view ).
            mac_catch_local_cx.
          ENDTRY.
        WHEN supportedtypes-table.
          o_table ?= object-&gt;raw.
          o_table-&gt;a0_maindata-tabname = object-&gt;name.
          TRY.
            components = import_table( o_table ).
            mac_catch_local_cx.
          ENDTRY.
        WHEN supportedtypes-table_type.
          o_tab_type ?= object-&gt;raw.
          o_tab_type-&gt;a0_maindata-typename = object-&gt;name.
          TRY.
            components = import_table_type( o_tab_type ).
            mac_catch_local_cx.
          ENDTRY.
        WHEN supportedtypes-search_help.
          o_s_help ?= object-&gt;raw.
          o_s_help-&gt;a0_maindata-shlpname = object-&gt;name.
          TRY.
            components = import_search_help( o_s_help ).
            mac_catch_local_cx.
          ENDTRY.
        WHEN supportedtypes-lock_object.
          o_lock_obj ?= object-&gt;raw.
          o_lock_obj-&gt;a0_maindata-viewname = object-&gt;name.
          TRY.
            components = import_lock_object( o_lock_obj ).
            mac_catch_local_cx.
          ENDTRY.
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = object-&gt;type
              connclass = &apos;ZAPLINK_DICTIONARY&apos;.
      ENDCASE.

      CREATE OBJECT o_comp.
      o_comp-&gt;set_type( object-&gt;type ).
      o_comp-&gt;set_name( object-&gt;name ).
      IF NOT components IS BOUND. CREATE OBJECT components. ENDIF.
      components-&gt;add( o_comp ).

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
  </REDEFINITIONS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" VERSION="1" IMPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TD_TYPEGROUP" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="TYPEGROUP">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Type group name"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_DATA_ELEMENT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="4 " TYPTYPE="3" TYPE="ZAPLINK_DTEL_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Data for Data element"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_DOMAIN" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZAPLINK_DOMA_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Data for Domain"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_LOCK_OBJECT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="9 " TYPTYPE="3" TYPE="ZAPLINK_ENQU_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Lock object (SE11) Datas"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_SEARCH_HELP" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="8 " TYPTYPE="3" TYPE="ZAPLINK_SHLP_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Search Help (SE11) Datas"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_TABLE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="6 " TYPTYPE="3" TYPE="ZAPLINK_TABL_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Table (SE11) Datas"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_TABLE_TYPE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="7 " TYPTYPE="3" TYPE="ZAPLINK_TTYP_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Table Type (SE11) Datas"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_TYPEGROUP" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_TYPE_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Data for Type group"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_VIEW" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="3" TYPE="ZAPLINK_VIEW_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Views (SE11) Datas"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
