<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="70A823CC33680EB6D1DA34706DCD7B45" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_OBJECT" TYPE="CLAS" VERSION="1.01">
 <DEPENDENCIES>
  <ITEM TYPE="CLAS" NAME="ZAPLINK_CONNECTOR_"/>
 </DEPENDENCIES>
 <DIRECTORY DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" UUID="A32B044B702B371EE1000000AC120173" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X" MSG_ID="ZAPLINK_OBJECT">
   <INHERITANCE REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" STATE="1"/>
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="ZAPLink Class &amp; Interface connector">
     <DOCUMENTATION TDVERSION="00001" TDFUSER="TBENSIAL" TDFRELES="700" TDFDATE="20100216" TDFTIME="143206" TDLINESIZE="072">U1&amp;FUNCTIONALITY&amp;
ASConnector for :
AS,,ABAP Object classes
AS,,ABAP Object interfaces
U1&amp;RELATIONS&amp;
ASConnector of ZAPLink framework
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AShttp://www.zaplink.info/
U1History
ASVersion 1.0 :
AS,,Full handle of class and interface ABAP Object
ASVersion 1.1 :
AS,,</DOCUMENTATION>
    </ITEM>
   </TEXTS>
  </A0_MAINDATA>
  <ATTRIBUTS>
   <ITEM CMPNAME="BALLOG_SUBOBJECT" VERSION="1" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;CNX_OBJECT&apos;" TYPTYPE="1" TYPE="BALSUBOBJ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Application Log: Subobject"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_UUID" VERSION="1" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;39AC0A4B07A5A05AE1000000AC120173&apos;" TYPTYPE="1" TYPE="TD_CONNUUID">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="UUID for connector Object"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_VER" VERSION="1" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;1.01&apos;" TYPTYPE="1" TYPE="TD_CONNVER">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Connector Version"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <DEFERRED>
   <CLASSES>
    <ITEM TYPEGROUP="ZAPLINK_OBJECT_DATA" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
   </CLASSES>
  </DEFERRED>
  <FRIENDS>
   <ITEM REFCLSNAME="ZAPLINK_OBJECT_DATA" VERSION="1" STATE="1"/>
  </FRIENDS>
  <LOCAL>
   <TYPES>
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* IMPLEMENTATION OR PRIVATE METHOD&apos;S SIGNATURE</TYPES>
   <IMPLEMENTATIONS>
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* LOCAL HELPER CLASSES</IMPLEMENTATIONS>
   <MACROS>
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* IN THE IMPLEMENTATION PART OF THE CLASS

INCLUDE ZAPLINK_MACROS.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDTYPE="2">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>
  DATA type LIKE LINE OF supported_types.

  CALL METHOD super-&gt;constructor.
  mac_create_log application_log ballog_subobject space.
  type-type = zaplink_object_data=&gt;object_types-class.       INSERT type INTO TABLE supported_types.
  type-type = zaplink_object_data=&gt;object_types-interface.    INSERT type INTO TABLE supported_types.

  uuid = _uuid.
  version = _ver.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXPORT_FROM_SAP_CLASS" VERSION="1" STATE="1" EDITORDER="2 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Export Class from SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJECT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_CLASS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Class data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA obj_mask   TYPE doku_obj.
  DATA docu_key   TYPE zaplink_object_data=&gt;ts_doc_key.
  DATA classkey   TYPE seoclskey.
  DATA _d         TYPE t_fm_data.

  TRY.
      CHECK component-&gt;get_type( ) = zaplink_object_data=&gt;object_types-class.

*  _objtype = COMPONENT-type.
      classkey-clsname = component-&gt;get_name( ).
      CALL FUNCTION &apos;SEO_CLASS_TYPEINFO_GET&apos;
        EXPORTING
          clskey                              = classkey
*     VERSION                             = SEOC_VERSION_INACTIVE
*     STATE                               = &apos;1&apos;
*     WITH_DESCRIPTIONS                   = SEOX_TRUE
          resolve_eventhandler_typeinfo       = seox_true
          with_master_language                = seox_true
          with_enhancements                   = seox_true
*     READ_ACTIVE_ENHA                    = SEOX_FALSE
        IMPORTING
          class                               = _d-class
          attributes                          = _d-attributes
          methods                             = _d-methods
          events                              = _d-events
          types                               = _d-types
          PARAMETERS                          = _d-parameters
          exceps                              = _d-exceps
          implementings                       = _d-implementings
          inheritance                         = _d-inheritance
          redefinitions                       = _d-redefinitions
          impl_details                        = _d-impl_details
          friendships                         = _d-friendships
          typepusages                         = _d-typeusages
          clsdeferrds                         = _d-clsdeferrds
          intdeferrds                         = _d-intdeferrds
          explore_inheritance                 = _d-explore_inheritance
          explore_implementings               = _d-explore_implementings
          aliases                             = _d-aliases
          enhancement_methods                 = _d-enhancement_methods
          enhancement_attributes              = _d-enhancement_attributes
          enhancement_events                  = _d-enhancement_events
          enhancement_implementings           = _d-enhancement_implementings
        EXCEPTIONS
          not_existing                        = 1
          is_interface                        = 2
          model_only                          = 3
          OTHERS                              = 4
                .
      IF sy-subrc &lt;&gt; 0.
        o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_CLASS_TYPEINFO_GET&apos;
                                                    subrc = sy-subrc
                                                classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
        application_log-&gt;add_symsg( ).
        RAISE EXCEPTION o_mycx.
      ENDIF.

* Documentations
      docu_key-name = component-&gt;get_name( ).
      docu_key-other = &apos;*&apos;.
      obj_mask = docu_key.

      _d-documentation = zaplink_documentation=&gt;get( ids = zaplink_object_data=&gt;r_doc_ids-class
                                                  object = obj_mask ).

      CREATE OBJECT object.
      object-&gt;complete_data( CHANGING fm_data = _d ).
      _d-dynpros = get_dynpros( _d-includes-classpool ).    &quot; Issue 8
      _d-menupainter = get_menus( _d-includes-classpool ).  &quot; Issue 9
      _d-textspool = get_prog_textpool( _d-includes-classpool ). &quot; Issue 1
      object-&gt;from_data( _d ).

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXPORT_FROM_SAP_INTERFACE" VERSION="1" STATE="1" EDITORDER="3 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Export Interface from SAP System"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENT" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Component key"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="OBJECT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_INTERFACE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Class data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA obj_mask       TYPE doku_obj.
  DATA docu_key       TYPE zaplink_object_data=&gt;ts_doc_key.
  DATA classkey TYPE seoclskey.
  DATA _d       TYPE t_fm_data.

  TRY.

      CHECK component-&gt;get_type( ) = zaplink_object_data=&gt;object_types-interface.

      classkey-clsname = component-&gt;get_name( ).
      CALL FUNCTION &apos;SEO_INTERFACE_TYPEINFO_GET&apos;
        EXPORTING
          intkey                        = classkey
*     VERSION                       = SEOC_VERSION_INACTIVE
*     STATE                         = &apos;1&apos;
          with_master_language          = seox_true
          with_enhancements             = seox_true
*     READ_ACTIVE_ENHA              = SEOX_FALSE
        IMPORTING
          interface                     = _d-interface
          attributes                    = _d-attributes
          methods                       = _d-methods
          events                        = _d-events
          PARAMETERS                    = _d-parameters
          exceps                        = _d-exceps
          comprisings                   = _d-comprisings
          typepusages                   = _d-typeusages
          clsdeferrds                   = _d-clsdeferrds
          intdeferrds                   = _d-intdeferrds
          explore_comprisings           = _d-explore_comprisings
          aliases                       = _d-aliases
          types                         = _d-types
          enhancement_methods           = _d-enhancement_methods
          enhancement_attributes        = _d-enhancement_attributes
          enhancement_events            = _d-enhancement_events
          enhancement_comprisings       = _d-enhancement_comprisings
        EXCEPTIONS
          not_existing                  = 1
          is_class                      = 2
          model_only                    = 3
          OTHERS                        = 4.
*      IF sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*      ENDIF.

      CREATE OBJECT object.
      object-&gt;complete_data( CHANGING fm_data = _d ).
      object-&gt;from_data( _d ).

* Documentations
      docu_key-name = component-&gt;get_name( ).
      docu_key-other = &apos;*&apos;.
      obj_mask = docu_key.

      object-&gt;documentation = zaplink_documentation=&gt;get( ids = zaplink_object_data=&gt;r_doc_ids-interface
                                                       object = obj_mask ).

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IMPORT_TO_SAP_CLASS" VERSION="1" STATE="1" EDITORDER="1 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Import Class into SAP system"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENTS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Components"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_CLASS">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Class data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA _d               TYPE t_fm_data.
  DATA i_korrnr         TYPE trkorr.              &quot;#EC NEEDED for debug
  DATA _component       TYPE to_component.
  DATA _name            TYPE td_compname.

  TRY.

      _d = o_data-&gt;to_data( ).

      CALL FUNCTION &apos;SEO_BUFFER_INIT&apos;.
      CALL FUNCTION &apos;SEO_CLASS_CREATE_COMPLETE&apos;
       EXPORTING
*     corrnr                             = e_corrnr
*     devclass                           = &apos;$TMP&apos;                &quot;devclass
*     version                            = e_version
*     genflag                            = e_genflag
*     authority_check                    = e_authority_check
         overwrite                          = &apos;X&apos;                   &quot;overwrite
*   SUPPRESS_METHOD_GENERATION         = e_suppress_meth_gen
*   SUPPRESS_REFACTORING_SUPPORT       = e_suppress_refac_gen
         method_sources                     = _d-method_sources    &quot; Methods source
         locals_def                         = _d-locals_def        &quot; LOCAL_TYPES
         locals_imp                         = _d-locals_imp        &quot; LOCAL_IMP
         locals_mac                         = _d-locals_mac        &quot; MACROS
*   SUPPRESS_INDEX_UPDATE              = e_suppress_ind_update
       IMPORTING
         korrnr                             = i_korrnr
       TABLES
         class_descriptions                 = _d-class_desc
         component_descriptions             = _d-component_desc
         subcomponent_descriptions          = _d-subcomponent_desc
       CHANGING
         class                              = _d-class
         inheritance                        = _d-inheritance
         redefinitions                      = _d-redefinitions
         implementings                      = _d-implementings
         impl_details                       = _d-impl_details
         attributes                         = _d-attributes
         methods                            = _d-methods
         events                             = _d-events
         types                              = _d-types
*   TYPE_SOURCE                        = ch_type_source &quot;???
         PARAMETERS                         = _d-parameters
         exceps                             = _d-exceps
         aliases                            = _d-aliases
         typepusages                        = _d-typeusages
         clsdeferrds                        = _d-clsdeferrds
         intdeferrds                        = _d-intdeferrds
         friendships                        = _d-friendships
       EXCEPTIONS
         existing                           = 1
         is_interface                       = 2
         db_error                           = 3
         component_error                    = 4
         no_access                          = 5
         other                              = 6
         OTHERS                             = 7.
      CASE sy-subrc.
        WHEN 0.
** i guess if we made it this far, we will assume success
** successful install
        WHEN OTHERS.
          o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;SEO_CLASS_CREATE_COMPLETE&apos;
                                                      subrc = sy-subrc
                                                  classname = &apos;ZAPLINK_CX_CONNECTOR&apos; ).
          application_log-&gt;add_symsg( ).
          RAISE EXCEPTION o_mycx.
      ENDCASE.

* Exceptions texts
      IF NOT _d-exceptions_texts IS INITIAL.
*  zaplink_clas_data=&gt;update_concept( EXPORTING msg_col = application_log
*                                     CHANGING  fm_data = _d ).
      ENDIF.

      _d-includes = zaplink_object_data=&gt;get_includes( _d-class-clsname ).
      set_dynpros( program = _d-includes-classpool                            &quot; Issue 8
                   dynpros = _d-dynpros ).
      set_menus( program = _d-includes-classpool                              &quot; Issue 9
                   menus = _d-menupainter ).
      set_prog_textpool( program = _d-includes-classpool                      &quot; Issue 1
                        textpool = _d-textspool ).

      zaplink_documentation=&gt;set( _d-documentation ).

      CREATE OBJECT _component.
      _component-&gt;set_type( zaplink_object_data=&gt;object_types-class ).
      _name = _d-class-clsname.
      _component-&gt;set_name( _name ).
      CREATE OBJECT components.
      components-&gt;add( _component ).

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IMPORT_TO_SAP_INTERFACE" VERSION="1" STATE="1" EDITORDER="4 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Import Interface into SAP system"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMPONENTS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_LIST">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Components"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="O_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_INTERFACE">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Interface data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA _d           TYPE t_fm_data.
  DATA i_korrnr     TYPE trkorr.                  &quot;#EC NEEDED for debug
  DATA _component   TYPE to_component.
  DATA _name        TYPE td_compname.

  TRY.

      _d = o_data-&gt;to_data( ).

      CALL FUNCTION &apos;SEO_BUFFER_INIT&apos;.
      CALL FUNCTION &apos;SEO_INTERFACE_CREATE_COMPLETE&apos;
        EXPORTING
*     CORRNR                             =
*     devclass                           = &apos;$TMP&apos;
*     VERSION                            = SEOC_VERSION_INACTIVE
*     GENFLAG                            = &apos; &apos;
*     AUTHORITY_CHECK                    = SEOX_TRUE
          overwrite                          = seox_true
*     SUPPRESS_REFACTORING_SUPPORT       = SEOX_TRUE
        IMPORTING
          korrnr                             = i_korrnr
        TABLES
          class_descriptions                 = _d-class_desc
          component_descriptions             = _d-component_desc
          subcomponent_descriptions          = _d-subcomponent_desc
        CHANGING
          interface                          = _d-interface
          comprisings                        = _d-comprisings
          attributes                         = _d-attributes
          methods                            = _d-methods
          events                             = _d-events
          PARAMETERS                         = _d-parameters
          exceps                             = _d-exceps
          aliases                            = _d-aliases
          typepusages                        = _d-typeusages
          clsdeferrds                        = _d-clsdeferrds
          intdeferrds                        = _d-intdeferrds
          types                              = _d-types
        EXCEPTIONS
          existing                           = 1
          is_class                           = 2
          db_error                           = 3
          component_error                    = 4
          no_access                          = 5
          other                              = 6
          OTHERS                             = 7.
      CASE sy-subrc.
        WHEN &apos;0&apos;.
** i guess if we made it this far, we will assume success
** successful install
        WHEN OTHERS.
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING textid = zaplink_cx_connector=&gt;system_error.
      ENDCASE.

* Patch SAP do not create type alias.
      DATA  intkey TYPE seoclskey.
      DATA  type   TYPE vseotype.
      FIELD-SYMBOLS &lt;alias&gt; LIKE LINE OF _d-aliases.

      LOOP AT _d-aliases ASSIGNING &lt;alias&gt;
              WHERE cmptype = seoo_cmptype_type.
        MOVE-CORRESPONDING &lt;alias&gt; TO type.
        type-alias = seox_true.
        type-state = seoc_state_implemented.
        CALL FUNCTION &apos;SEO_TYPE_CREATE_F_DATA&apos;
          EXPORTING
            save   = seox_false
          CHANGING
            type   = type
          EXCEPTIONS
            OTHERS = 1.
        IF sy-subrc &lt;&gt; 0.
          CALL METHOD application_log-&gt;add_symsg
            EXPORTING
              id_msgty = &apos;W&apos;.
        ENDIF.
      ENDLOOP.
      MOVE-CORRESPONDING _d-interface TO intkey.
      CALL FUNCTION &apos;SEO_CLIF_SAVE_ALL&apos;
        EXPORTING
          cifkey                        = intkey
          suppress_refactoring_entries  = seox_true
          suppress_modification_support = seox_true
*    CHANGING
*      corrnr                        = corrnr
*      devclass                      = devclass
*      genflag                       = genflag
        EXCEPTIONS
          db_error                      = 1
          OTHERS                        = 2.
      IF sy-subrc &lt;&gt; 0.
        CALL METHOD application_log-&gt;add_symsg
          EXPORTING
            id_msgty = &apos;W&apos;.
      ENDIF.

      zaplink_documentation=&gt;set( o_data-&gt;documentation ).

      CREATE OBJECT _component.
      _component-&gt;set_type( zaplink_object_data=&gt;object_types-interface ).
      _name = _d-interface-clsname.
      _component-&gt;set_name( _name ).
      CREATE OBJECT components.
      components-&gt;add( _component ).

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
  </METHODS>
  <REDEFINITIONS>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~ANONYMIZE">
    <SOURCE>
  DATA _o_class       TYPE to_class.
  DATA _o_interface   TYPE to_interface.

  TRY.
      super-&gt;zaplink_cnx_ext_cleaner~anonymize( object ).
    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.

  CASE object-&gt;type.
    WHEN zaplink_object_data=&gt;object_types-class.
      _o_class ?= object-&gt;raw.
      _o_class-&gt;anonymize( ).
    WHEN zaplink_object_data=&gt;object_types-interface.
      _o_interface ?= object-&gt;raw.
      _o_interface-&gt;anonymize( ).
    WHEN OTHERS.
  ENDCASE.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~UNANONYMIZE">
    <SOURCE>
  DATA _o_class       TYPE to_class.
  DATA _o_interface   TYPE to_interface.

  TRY.
      super-&gt;zaplink_cnx_ext_cleaner~unanonymize( object ).
    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.

  CASE object-&gt;type.
    WHEN zaplink_object_data=&gt;object_types-class.
      _o_class ?= object-&gt;raw.
      _o_class-&gt;unanonymize( ).
    WHEN zaplink_object_data=&gt;object_types-interface.
      _o_interface ?= object-&gt;raw.
      _o_interface-&gt;unanonymize( ).
    WHEN OTHERS.
  ENDCASE.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~CREATE_NEW_RAW">
    <SOURCE>
  DATA o_clas TYPE to_class.
  DATA o_intf TYPE to_interface.

  CREATE OBJECT object.
  CASE type.
    WHEN zaplink_object_data=&gt;object_types-class.
      CREATE OBJECT o_clas.
      object-&gt;raw = o_clas.
*      create object object type TO_CLASS.
    WHEN zaplink_object_data=&gt;object_types-interface.
      CREATE OBJECT o_intf.
      object-&gt;raw = o_intf.
*      create object object type TO_CLASS.
    WHEN OTHERS.
      CLEAR object.
      mac_raise_type_not_supported &apos;ZAPLINK_OBJECT&apos; type.
  ENDCASE.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~DELETE_FROM_SAP">
    <SOURCE>
  DATA clskey TYPE seoclskey.
  DATA d_type TYPE td_comptype.

  TRY.
    d_type = component-&gt;get_type( ).
    CASE d_type.
      WHEN zaplink_object_data=&gt;object_types-class.
        clskey-clsname = component-&gt;get_name( ).
        CALL FUNCTION &apos;SEO_CLASS_DELETE_W_DEPS&apos;
          EXPORTING
            clskey       = clskey
          EXCEPTIONS
            not_existing = 1
            is_interface = 2
            not_deleted  = 3
            db_error     = 4
            OTHERS       = 5.
        IF sy-subrc &lt;&gt; 0.
          CASE sy-subrc.
            WHEN 1.
              RAISE EXCEPTION TYPE zaplink_cx_connector
                EXPORTING textid = zaplink_cx_connector=&gt;not_found.
            WHEN OTHERS.
              RAISE EXCEPTION TYPE zaplink_cx_connector
                EXPORTING textid = zaplink_cx_connector=&gt;system_error.
          ENDCASE.
        ENDIF.
      WHEN zaplink_object_data=&gt;object_types-interface.
        clskey-clsname = component-&gt;get_name( ).
* Not working
*      CALL FUNCTION &apos;SEO_INTERFACE_DELETE_W_DEPS&apos;
*        EXPORTING
*          intkey       = clskey
*          save         = seox_true
*        EXCEPTIONS
*          not_existing = 1
*          is_class     = 2
*          not_deleted  = 3
*          db_error     = 4
*          OTHERS       = 5.
        CALL FUNCTION &apos;SEO_INTERFACE_DELETE_COMPLETE&apos;
          EXPORTING
            intkey                     = clskey
*         GENFLAG                    = &apos; &apos;
            authority_check            = seox_true
            suppress_docu_delete       = seox_true
*         SUPPRESS_COMMIT            = SEOX_FALSE
*       CHANGING
*         CORRNR                     =
          EXCEPTIONS
            not_existing               = 1
            is_class                   = 2
            db_error                   = 3
            no_access                  = 4
            other                      = 5
            OTHERS                     = 6
                  .
        IF sy-subrc &lt;&gt; 0.
          CASE sy-subrc.
            WHEN 1.
              RAISE EXCEPTION TYPE zaplink_cx_connector
                EXPORTING textid = zaplink_cx_connector=&gt;not_found.
            WHEN OTHERS.
              RAISE EXCEPTION TYPE zaplink_cx_connector
                EXPORTING textid = zaplink_cx_connector=&gt;system_error.
          ENDCASE.
        ENDIF.
      WHEN OTHERS.
        mac_raise_type_not_supported &apos;ZAPLINK_OBJECT&apos; d_type.
    ENDCASE.

    mac_def_catch zaplink_cx_connector.
  ENDTRY.
  result = abap_true.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~DO_EXISTS">
    <SOURCE>
  DATA clskey TYPE seoclskey.
  DATA d_type TYPE td_comptype.

  TRY.
    d_type = component-&gt;get_type( ).
    CASE d_type.
      WHEN zaplink_object_data=&gt;object_types-class.
        clskey-clsname = component-&gt;get_name( ).

        CALL FUNCTION &apos;SEO_CLASS_EXISTENCE_CHECK&apos;
          EXPORTING
            clskey        = clskey
*        IMPORTING
*          not_active    = not_active
          EXCEPTIONS
            not_specified = 1
            not_existing  = 2
            is_interface  = 3
            no_text       = 4
            inconsistent  = 5
            OTHERS        = 6.

        IF sy-subrc = 0.
          exists = &apos;X&apos;.
        ENDIF.
      WHEN zaplink_object_data=&gt;object_types-interface.
        clskey-clsname = component-&gt;get_name( ).

        CALL FUNCTION &apos;SEO_INTERFACE_EXISTENCE_CHECK&apos;
          EXPORTING
            intkey              = clskey
*       IMPORTING
*         NOT_ACTIVE          =
         EXCEPTIONS
           not_specified       = 1
           not_existing        = 2
           is_class            = 3
           no_text             = 4
           inconsistent        = 5
           OTHERS              = 6.

        IF sy-subrc = 0.
          exists = &apos;X&apos;.
        ENDIF.
      WHEN OTHERS.
        mac_raise_type_not_supported &apos;ZAPLINK_OBJECT&apos; d_type.
    ENDCASE.

    mac_def_catch zaplink_cx_connector.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~IS_SUPPORTED_VERSION">
    <SOURCE>
  result = abap_false.
  if version = _ver OR version = &apos;1.0&apos;.   &quot; version 1.01 is downward compatible with version 1.0
    result = abap_true.
  endif.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~READ_FROM_SAP">
    <SOURCE>
  DATA o_clas TYPE to_class.
  DATA o_intf TYPE to_interface.
  DATA d_type TYPE td_comptype.

  TRY.

    CREATE OBJECT object.
    object-&gt;set_component( component ).
    d_type = component-&gt;get_type( ).
    CASE d_type.
      WHEN zaplink_object_data=&gt;object_types-class.
        TRY.
            o_clas = export_from_sap_class( component ).
          CATCH zaplink_cx_connector INTO o_mycx.
            IF NOT o_mycx-&gt;messages IS BOUND.
              o_mycx-&gt;messages = application_log.
              o_mycx-&gt;update( ).
            ENDIF.
            RAISE EXCEPTION o_mycx.
        ENDTRY.
        CLEAR o_clas-&gt;a0_maindata-clsname.
        object-&gt;raw = o_clas.
      WHEN zaplink_object_data=&gt;object_types-interface.
        TRY.
            o_intf = export_from_sap_interface( component ).
          CATCH zaplink_cx_connector INTO o_mycx.
            IF NOT o_mycx-&gt;messages IS BOUND.
              o_mycx-&gt;messages = application_log.
              o_mycx-&gt;update( ).
            ENDIF.
            RAISE EXCEPTION o_mycx.
        ENDTRY.
        CLEAR o_intf-&gt;a0_maindata-clsname.
        object-&gt;raw = o_intf.
      WHEN OTHERS.
        CLEAR object.
        mac_raise_type_not_supported &apos;ZAPLINK_OBJECT&apos; d_type.
    ENDCASE.

    mac_def_catch zaplink_cx_connector.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~WRITE_TO_SAP">
    <SOURCE>
  DATA _o_class       TYPE to_class.
  DATA _o_interface   TYPE to_interface.

  TRY.
    CASE object-&gt;type.
      WHEN zaplink_object_data=&gt;object_types-class.
        _o_class ?= object-&gt;raw.
        _o_class-&gt;a0_maindata-clsname = object-&gt;name.
        TRY.
            components = import_to_sap_class( _o_class ).
          CATCH zaplink_cx_connector INTO o_mycx.
            IF NOT o_mycx-&gt;messages IS BOUND.
              o_mycx-&gt;messages = application_log.
              o_mycx-&gt;update( ).
            ENDIF.
            RAISE EXCEPTION o_mycx.
        ENDTRY.
      WHEN zaplink_object_data=&gt;object_types-interface.
        _o_interface ?= object-&gt;raw.
        _o_interface-&gt;a0_maindata-clsname = object-&gt;name.
        TRY.
            components = import_to_sap_interface( _o_interface ).
          CATCH zaplink_cx_connector INTO o_mycx.
            IF NOT o_mycx-&gt;messages IS BOUND.
              o_mycx-&gt;messages = application_log.
              o_mycx-&gt;update( ).
            ENDIF.
            RAISE EXCEPTION o_mycx.
        ENDTRY.
      WHEN OTHERS.
        mac_raise_type_not_supported &apos;ZAPLINK_OBJECT&apos; object-&gt;type.
    ENDCASE.

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
  </REDEFINITIONS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="SEOF" VERSION="1" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOK" VERSION="1" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOP" VERSION="1" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOR" VERSION="1" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOS" VERSION="1" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOT" VERSION="1" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOX" VERSION="1" EXPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TO_CLASS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="3" TYPE="ZAPLINK_CLAS_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Class data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_INTERFACE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZAPLINK_INTF_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Interface data"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_BAPI_DATA" VERSION="1" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="29 " SRCCOLUMN2="20 " TYPESRC_LENG="1312 ">
    BEGIN OF ts_bapi_data,
    class                       TYPE  vseoclass,
    attributes                  TYPE  seoo_attributes_r,
    methods                     TYPE  seoo_methods_r,
    events                      TYPE  seoo_events_r,
    types                       TYPE  seoo_types_r,
    parameters                  TYPE  seos_parameters_r,
    exceps                      TYPE  seos_exceptions_r,
    implementings               TYPE  seor_implementings_r,
    inheritance                 TYPE  vseoextend,
    redefinitions               TYPE  seor_redefinitions_r,
    impl_details                TYPE  seor_redefinitions_r,
    friendships                 TYPE  seof_friendships_r,
    typepusages                 TYPE  seot_typepusages_r,
    clsdeferrds                 TYPE  seot_clsdeferrds_r,
    intdeferrds                 TYPE  seot_intdeferrds_r,
    explore_inheritance         TYPE  seok_cls_typeinfos,
    explore_implementings       TYPE  seok_int_typeinfos,
    aliases                     TYPE  seoo_aliases_r,
    enhancement_methods         TYPE  enhmeth_tabheader,
    enhancement_attributes      TYPE  enhclasstabattrib,
    enhancement_events          TYPE  enhclasstabevent,
    enhancement_implementings   TYPE enhclasstabimplementing,
  END OF ts_bapi_data

    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="All Data for BAPI call of class creation"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_CLAS_ATTR" VERSION="1" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="31 " SRCCOLUMN1="4 " SRCROW2="34 " SRCCOLUMN2="22 " TYPESRC_LENG="102 ">
    BEGIN OF ts_clas_attr.
  INCLUDE TYPE ts_base_attributs AS base.
  TYPES:
    END OF ts_clas_attr

    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Root attributs for CLAS"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="T_FM_DATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="ZAPLINK_OBJECT_DATA=&gt;T_FM_DATA"/>
  </TYPES>
 </RAW>
</ZL_OBJECT>
