<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="D6D8A5106F6301D84EF716A5FF69C8EC" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_FUNCTION_GROUP" TYPE="CLAS" VERSION="1.01">
 <DEPENDENCIES>
  <ITEM TYPE="CLAS" NAME="ZAPLINK_CONNECTOR_"/>
 </DEPENDENCIES>
 <DIRECTORY DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" UUID="BEA08F4B0E2C2006E1000000AC120173" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X" MSG_ID="ZAPLINK_FUGR">
   <INHERITANCE REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" STATE="1"/>
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="Data for Class"/>
   </TEXTS>
  </A0_MAINDATA>
  <ATTRIBUTS>
   <ITEM CMPNAME="BALLOG_SUBOBJECT" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;CNX_FUNCTION_GROUP&apos;" TYPTYPE="1" TYPE="BALSUBOBJ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Application Log: Subobject"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="C_MAINPROG_PREFIX" VERSION="1" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;SAPL&apos;" TYPTYPE="1" TYPE="TRDIR-NAME">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Function group Main program prefix"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="ST_FUNCTION_GROUP" VERSION="1" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;FUGR&apos;" TYPTYPE="1" TYPE="TD_COMPTYPE">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Transport category : ABAP Object"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_UUID" VERSION="1" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;F1838F4B202C2806E1000000AC120173&apos;" TYPTYPE="1" TYPE="TD_CONNUUID">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="UUID for connector Program"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_VER" VERSION="1" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;1.0&apos;" TYPTYPE="1" TYPE="TD_CONNVER">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Connector Version"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <DEFERRED>
   <CLASSES>
    <ITEM TYPEGROUP="ZAPLINK_FUGR_DATA" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
   </CLASSES>
  </DEFERRED>
  <FRIENDS>
   <ITEM REFCLSNAME="ZAPLINK_FUGR_DATA" VERSION="1" STATE="1"/>
  </FRIENDS>
  <LOCAL>
   <TYPES>
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* IMPLEMENTATION OR PRIVATE METHOD&apos;S SIGNATURE</TYPES>
   <IMPLEMENTATIONS>
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* LOCAL HELPER CLASSES</IMPLEMENTATIONS>
   <MACROS>
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE ZAPLINK_MACROS.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDTYPE="2">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>
  DATA type LIKE LINE OF supported_types.

  CALL METHOD super-&gt;constructor.
  mac_create_log application_log ballog_subobject space.
  type-type = st_function_group. INSERT type INTO TABLE supported_types.

  uuid = _uuid.
  version = _ver.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_ALL_INCLUDES" VERSION="1" STATE="1" EDITORDER="1 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="In subtitution to MF &apos;RS_GET_ALL_INCLUDES&apos;"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NAME" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="RS38L-AREA">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Function group, to which the function module belongs"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULTS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TT_INCLUDES"/>
    </PARAMETERS>
    <SOURCE>
  DATA: _result           LIKE LINE OF results.
  DATA d_include          TYPE rs38l-include.
  DATA d_is_hidden        TYPE abap_bool.
  DATA d_is_extern        TYPE abap_bool.
  DATA d_not_funct        TYPE abap_bool.
  DATA d_suffix           TYPE rs38l-suffix.
* Code from FM &apos;RS_GET_ALL_INCLUDES&apos;
  DATA: program           TYPE trdir-name.
  DATA: _fugr_name        TYPE rs38l-area.
  DATA: _is_reserved_name TYPE c.
  DATA: includes          TYPE STANDARD TABLE OF rseuinc.
  FIELD-SYMBOLS:
    &lt;wa&gt; LIKE LINE OF includes.

  program = get_mainprogram( name ).
* Code from FM &apos;RS_GET_ALL_INCLUDES&apos;
  SELECT * FROM d010inc
           APPENDING CORRESPONDING FIELDS OF TABLE includes
*           appending table includes
           WHERE master = program.
  CALL FUNCTION &apos;RS_WORKING_AREA_ACTIVE_CHECK&apos;
    EXCEPTIONS
      nok = 1.
  IF sy-subrc = 0.
    SELECT * FROM rseuinc
             APPENDING CORRESPONDING FIELDS OF TABLE includes
*             appending table includes
             WHERE master = program.
  ENDIF.
  SORT includes BY include.
  DELETE ADJACENT DUPLICATES FROM includes COMPARING include.
  LOOP AT includes ASSIGNING &lt;wa&gt;.
* change from code from FM &apos;RS_GET_ALL_INCLUDES&apos;
*    CALL FUNCTION &apos;RS_PROGNAME_SPLIT&apos;
    d_include = &lt;wa&gt;-include.
    CALL FUNCTION &apos;FUNCTION_INCLUDE_SPLIT&apos;
*     EXPORTING
*       PROGRAM                            =
*       SUPPRESS_SELECT                    = &apos;X&apos;
*       COMPLETE_AREA                      = &apos; &apos;
      IMPORTING
*       NAMESPACE                          =
*       FUNCTION_NOT_EXISTS                =
        group                              = _fugr_name
*       FUNCNAME                           =
*       INCLUDE_NUMBER                     =
        no_function_include                = d_is_extern
        no_function_module                 = d_not_funct
        suffix                             = d_suffix
        reserved_name                      = _is_reserved_name
*       TOO_MANY_DELIMITERS                =
*       RESERVED_FOR_EXITS                 =
        hidden_name                        = d_is_hidden
      CHANGING
        include                            = d_include
      EXCEPTIONS
        include_not_exists                 = 1
        group_not_exists                   = 2
        no_selections                      = 3
        no_function_include                = 4
        no_function_pool                   = 5
        delimiter_wrong_position           = 6
        no_customer_function_group         = 7
        no_customer_function_include       = 8
        reserved_name_customer             = 9
        namespace_too_long                 = 10
        area_length_error                  = 11
        OTHERS                             = 12.
    IF sy-subrc = 0 AND _fugr_name = name AND d_is_extern = abap_false AND d_not_funct = abap_true AND d_is_hidden = abap_false
                    AND ( d_suffix = &apos;TOP&apos; OR _is_reserved_name = abap_false ).
      _result-name = &lt;wa&gt;-include.
      _result-source = get_prog_rawsource( _result-name ).
      APPEND _result TO results.
    ENDIF.
  ENDLOOP.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_MAINPROGRAM" VERSION="1" STATE="1" EDITORDER="2 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get main program from Area"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NAME" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="RS38L-AREA">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Function group, to which the function module belongs"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TRDIR-NAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ABAP Program Name"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>
  DATA s_rs38l TYPE rs38l.
* From LSFUNCTION_BUILDERI01 : module okcode_105 input.
  CALL FUNCTION &apos;FUNCTION_INCLUDE_SPLIT&apos;
    EXPORTING
      complete_area = name
    IMPORTING
      namespace     = s_rs38l-namespace
      group         = s_rs38l-str_area
    EXCEPTIONS
      OTHERS        = 6.
  CONCATENATE s_rs38l-namespace c_mainprog_prefix s_rs38l-str_area INTO result.
</SOURCE>
   </ITEM>
  </METHODS>
  <REDEFINITIONS>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~ANONYMIZE">
    <SOURCE>
*  DATA o_prog TYPE to_program.
*
*  TRY.
*      super-&gt;zaplink_cnx_ext_cleaner~anonymize( object ).
*    CATCH zaplink_cx_connector INTO o_mycx.
*      RAISE EXCEPTION o_mycx.
*  ENDTRY.
*
*  o_prog ?= object-&gt;raw.
*  clear:
*    o_prog-&gt;A0_MAINDATA-CNAM,
*    o_prog-&gt;A0_MAINDATA-CDAT,
*    o_prog-&gt;A0_MAINDATA-UNAM,
*    o_prog-&gt;A0_MAINDATA-UDAT,
*    o_prog-&gt;A0_MAINDATA-SDATE,
*    o_prog-&gt;A0_MAINDATA-STIME,
*    o_prog-&gt;A0_MAINDATA-IDATE,
*    o_prog-&gt;A0_MAINDATA-ITIME.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~UNANONYMIZE">
    <SOURCE>
*  DATA o_prog TYPE to_program.
*
*  TRY.
*      super-&gt;zaplink_cnx_ext_cleaner~unanonymize( object ).
*    CATCH zaplink_cx_connector INTO o_mycx.
*      RAISE EXCEPTION o_mycx.
*  ENDTRY.
*
*  o_prog ?= object-&gt;raw.
*  o_prog-&gt;A0_MAINDATA-CNAM = sy-uname.
**    o_prog-&gt;A0_MAINDATA-CDAT,
**    o_prog-&gt;A0_MAINDATA-UNAM,
**    o_prog-&gt;A0_MAINDATA-UDAT,
**    o_prog-&gt;A0_MAINDATA-SDATE,
**    o_prog-&gt;A0_MAINDATA-STIME,
**    o_prog-&gt;A0_MAINDATA-IDATE,
**    o_prog-&gt;A0_MAINDATA-ITIME.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~CREATE_NEW_RAW">
    <SOURCE>
  DATA o_group TYPE to_group.

  CREATE OBJECT object.
  CASE type.
    WHEN st_function_group.
      CREATE OBJECT o_group.
      object-&gt;raw = o_group.
    WHEN OTHERS.
      CLEAR object.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
      RAISE EXCEPTION TYPE zaplink_cx_connector
        EXPORTING
          textid = zaplink_cx_connector=&gt;type_not_supported
          type   = type
          connclass = &apos;ZAPLINK_PROGRAM&apos;.
  ENDCASE.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~DELETE_FROM_SAP">
    <SOURCE>
  DATA pool  TYPE rs38l-area.
  DATA type  TYPE td_comptype.

  TRY.
      type = component-&gt;get_type( ).
      CASE type.
        WHEN st_function_group.
          pool = component-&gt;get_name( ).
          CALL FUNCTION &apos;FUNCTION_POOL_DELETE&apos;
            EXPORTING
              pool              = pool
              skip_progress_ind = &apos;X&apos;
            EXCEPTIONS
              functions_exists  = 1
              not_found         = 0
              OTHERS            = 3.
          IF sy-subrc &lt;&gt; 0.
            o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;FUNCTION_POOL_DELETE&apos;
                                                        subrc = sy-subrc
                                                    classname = &apos;ZAPLINK_CX_CONNECTOR&apos;
                                                    textid = zaplink_cx=&gt;system_error ).
            RAISE EXCEPTION o_mycx.
          ENDIF.
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = type
              connclass = &apos;ZAPLINK_PROGRAM&apos;.
      ENDCASE.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.

  result = abap_true.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~DO_EXISTS">
    <SOURCE>
  DATA _name TYPE tlibg-area.
  DATA type  TYPE td_comptype.

  exists = me-&gt;exists-not_exists.

  TRY.
      type = component-&gt;get_type( ).
      CASE type.
        WHEN st_function_group.
          _name = component-&gt;get_name( ).
          CALL FUNCTION &apos;RS_FUNCTION_POOL_EXISTS&apos;
            EXPORTING
              function_pool   = _name
            EXCEPTIONS
              pool_not_exists = 1
              OTHERS          = 2.
          IF sy-subrc = 0.    exists = me-&gt;exists-exists.   ENDIF.
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = type
              connclass = &apos;ZAPLINK_MESSAGE&apos;.
      ENDCASE.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~IS_SUPPORTED_VERSION">
    <SOURCE>
  result = abap_false.
  if version = _ver.
    result = abap_true.
  endif.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~READ_FROM_SAP">
    <SOURCE>
  DATA o_data     TYPE to_group.
  DATA s_fm_data  TYPE ts_fm_data.
  DATA d_name TYPE td_compname.
  DATA type   TYPE td_comptype.
  DATA d_mainprog TYPE td_progname.
  DATA d_soft_comp TYPE tdevc-dlvunit.
  DATA t_functions TYPE tt_rs38l_incl.
  DATA s_func LIKE LINE OF s_fm_data-functions.
  DATA t_doc TYPE STANDARD TABLE OF rsfdo WITH DEFAULT KEY.
  DATA t_src TYPE STANDARD TABLE OF rssource WITH DEFAULT KEY.
  DATA t_tmp_doc TYPE tt_docs.
  DATA d_doc TYPE doku_obj.
  DATA s_doc_param type zaplink_fugr_data=&gt;ts_doc_param.
*    BEGIN OF s_doc_param,
*      func   TYPE rs38l_fnam,
*      param TYPE rs38l_par_,
*    END OF s_doc_param.
  FIELD-SYMBOLS:
    &lt;f&gt; LIKE LINE OF t_functions.

  TRY.
      type = component-&gt;get_type( ).
      CREATE OBJECT object.
      object-&gt;set_component( component ).
      CASE type.
        WHEN st_function_group.
          s_fm_data-header-area = d_name = object-&gt;name.
          CALL FUNCTION &apos;RS_FUNCTION_POOL_CONTENTS&apos;
            EXPORTING
              function_pool           = s_fm_data-header-area
            TABLES
              functab                 = t_functions
            EXCEPTIONS
              function_pool_not_found = 1
              OTHERS                  = 2.
          IF sy-subrc &lt;&gt; 0.
            mac_add_mf_and_raise &apos;RS_FUNCTION_POOL_CONTENTS&apos; sy-subrc.
          ENDIF.

          d_doc = d_mainprog = get_mainprogram( s_fm_data-header-area ).
          s_fm_data-docs = zaplink_documentation=&gt;get( ids = zaplink_fugr_data=&gt;r_doc_ids-group
                                                    object = d_doc  ).

          SELECT * INTO TABLE s_fm_data-texts FROM tlibt WHERE area = s_fm_data-header-area.
          SELECT * INTO TABLE s_fm_data-function_texts FROM tftit FOR ALL ENTRIES IN t_functions WHERE funcname = t_functions-funcname.
          SELECT * INTO TABLE s_fm_data-param_texts FROM funct FOR ALL ENTRIES IN t_functions WHERE funcname = t_functions-funcname.
          LOOP AT t_functions ASSIGNING &lt;f&gt;.
            CLEAR s_func.   s_doc_param-func = s_func-header-name = &lt;f&gt;-funcname.   s_func-source = get_prog_rawsource( &lt;f&gt;-include ).
            s_doc_param-param = &apos;*&apos;.    d_doc = s_doc_param.
            t_tmp_doc = zaplink_documentation=&gt;get( ids = zaplink_fugr_data=&gt;r_doc_ids-function
                                                 object =  d_doc ).
            APPEND LINES OF t_tmp_doc TO s_fm_data-docs.
            CALL FUNCTION &apos;RPY_FUNCTIONMODULE_READ&apos;
              EXPORTING
                functionname             = s_func-header-name
              IMPORTING
                global_flag              = s_func-header-global
                remote_call              = s_func-header-remote
                update_task              = s_func-header-utask
*               SHORT_TEXT               =
*               FUNCTION_POOL            =
              TABLES
                import_parameter         = s_func-import_p
                changing_parameter       = s_func-changing_p
                export_parameter         = s_func-export_p
                tables_parameter         = s_func-tables
                exception_list           = s_func-exceptions
                documentation            = t_doc
                SOURCE                   = t_src
              EXCEPTIONS
                error_message            = 1
                function_not_found       = 2
                invalid_name             = 3
                OTHERS                   = 4.
            IF sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
            ENDIF.
            INSERT s_func INTO TABLE s_fm_data-functions.
          ENDLOOP.

          SELECT SINGLE dlvunit INTO d_soft_comp
            FROM v_tralan
            WHERE pgmid = &apos;R3TR&apos;
              AND object = &apos;FUGR&apos;
              AND obj_name = s_fm_data-header-area.

          s_fm_data-includes = get_all_includes( s_fm_data-header-area ).

*          s_fm_data-includes = remove_unwanted_includes( includes = s_fm_data-includes
*                                                        functions = t_functions
*                                                        soft_comp = d_soft_comp ).

* Texts Pool
          s_fm_data-textspool = get_prog_textpool( d_mainprog ).

* Dynpro
          s_fm_data-dynpros = get_dynpros( d_mainprog ).

* Menu Painter
          s_fm_data-menupainter = get_menus( d_mainprog ).
** Documentation
**      CONCATENATE _name &apos;*&apos; INTO _obj. &quot; Issue:7
*          s_obj-prog = _name.
*          s_obj-wildcard = &apos;*&apos;.
*          _obj = s_obj.
**Issue:7
*          o_data-&gt;documentation = zaplink_documentation=&gt;get( ids = r_doc_id
*                                                          object = _obj ).
          CREATE OBJECT o_data.
          o_data-&gt;from_data( s_fm_data ).
          CLEAR o_data-&gt;a0_maindata-area.
          object-&gt;raw = o_data.
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = type
              connclass = &apos;ZAPLINK_PROGRAM&apos;.
      ENDCASE.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~WRITE_TO_SAP">
    <SOURCE>
  DATA o_data      TYPE to_group.
  DATA s_fm_data   TYPE ts_fm_data.
  DATA _comp       TYPE to_component.
  DATA d_pname     TYPE tfdir-pname.
  DATA d_group     TYPE rs38l-area.
  DATA _name       TYPE td_compname.
  DATA d_mainprog  TYPE td_progname.
  DATA t_functions TYPE tt_rs38l_incl.
  DATA d_msg       TYPE string.
  DATA d_answer    TYPE c.
  DATA t_doc       TYPE STANDARD TABLE OF rsfdo WITH DEFAULT KEY.
  DATA t_src       TYPE STANDARD TABLE OF rssource WITH DEFAULT KEY.
  DATA t_params    TYPE STANDARD TABLE OF spar WITH DEFAULT KEY.
  DATA s_param     LIKE LINE OF t_params.
  FIELD-SYMBOLS:
    &lt;fi&gt; LIKE LINE OF t_functions,
    &lt;f&gt;  LIKE LINE OF s_fm_data-functions.

  TRY.

      CASE object-&gt;type.
        WHEN st_function_group.
          o_data ?= object-&gt;raw.
          o_data-&gt;a0_maindata-area = object-&gt;name.
          s_fm_data = o_data-&gt;to_data( ).
          d_mainprog = get_mainprogram( s_fm_data-header-area ).

          CALL FUNCTION &apos;RS_FUNCTION_POOL_DELETE&apos;
            EXPORTING
              area                         = s_fm_data-header-area
*             CORRNUM                      = &apos; &apos;
*             TEXT                         = &apos; &apos;
*             UNAME                        = &apos; &apos;
*             WITH_KORR                    = &apos;X&apos;
*             WB_FB_MANAGER                =
              suppress_popups              = abap_true
              skip_progress_ind            = abap_true
*           IMPORTING
*             E_CORRNUM                    =
            EXCEPTIONS
              canceled_in_corr             = 1
              enqueue_system_failure       = 2
              function_exist               = 3
              not_executed                 = 4
              no_modify_permission         = 5
              no_show_permission           = 6
              permission_failure           = 7
              pool_not_exist               = 0
              cancelled                    = 9
              OTHERS                       = 10.
          IF sy-subrc &lt;&gt; 0.
            mac_add_mf_and_raise &apos;RS_FUNCTION_POOL_DELETE&apos; sy-subrc.
          ENDIF.
          IF sy-batch = abap_false.   &quot;only delete in forground
            LOOP AT s_fm_data-functions ASSIGNING &lt;f&gt;.
* FROM  FUNCTION &apos;RPY_FUNCTIONMODULE_READ&apos;
              SELECT SINGLE pname INTO d_pname FROM tfdir WHERE funcname = &lt;f&gt;-header-name.
              IF sy-subrc &lt;&gt; 0.   CONTINUE.   ENDIF.

              CALL FUNCTION &apos;FUNCTION_INCLUDE_SPLIT&apos;
                EXPORTING
                  program                            = d_pname
*               SUPPRESS_SELECT                    = &apos;X&apos;
*               COMPLETE_AREA                      = &apos; &apos;
                IMPORTING
*               NAMESPACE                          =
*               FUNCTION_NOT_EXISTS                =
                  group                              = d_group
*               FUNCNAME                           =
*               INCLUDE_NUMBER                     =
*               NO_FUNCTION_INCLUDE                =
*               NO_FUNCTION_MODULE                 =
*               SUFFIX                             =
*               RESERVED_NAME                      =
*               TOO_MANY_DELIMITERS                =
*               RESERVED_FOR_EXITS                 =
*               HIDDEN_NAME                        =
*              CHANGING
*                INCLUDE                            = d_pname
                EXCEPTIONS
                  include_not_exists                 = 1
                  group_not_exists                   = 2
                  no_selections                      = 3
                  no_function_include                = 4
                  no_function_pool                   = 5
                  delimiter_wrong_position           = 6
                  no_customer_function_group         = 7
                  no_customer_function_include       = 8
                  reserved_name_customer             = 9
                  namespace_too_long                 = 10
                  area_length_error                  = 11
                  OTHERS                             = 12.
              IF sy-subrc &lt;&gt; 0.
                CONTINUE.
              ENDIF.

* The function &amp;1 already exist (&amp;2), do you confirm deletion ?
              MESSAGE i000 WITH d_pname d_group INTO d_msg.
              REFRESH t_params.
              s_param-param = &apos;FUNCTION&apos;.   s_param-value = &lt;f&gt;-header-name.          APPEND s_param TO t_params.
              s_param-param = &apos;GROUP&apos;.      s_param-value = d_group.                  APPEND s_param TO t_params.
              s_param-param = &apos;CURRENT_G&apos;.  s_param-value = s_fm_data-header-area.    APPEND s_param TO t_params.
              CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
                EXPORTING
                  titlebar              = &apos;Confirm module function deletion&apos;(d00)
                  diagnose_object       = &apos;ZAPLINK_FUNCTION_GROUP-CONF&apos;
                  text_question         = d_msg
                  text_button_1         = &apos;Yes&apos;(yes)
                  icon_button_1         = &apos;ICON_DELETE&apos;
                  text_button_2         = &apos;No&apos;(no_)
                  icon_button_2         = &apos;ICON_SKIP&apos;
                  default_button        = &apos;3&apos;
                  display_cancel_button = &apos;X&apos;
                  userdefined_f1_help   = &apos;ZAPLINK_FUNCTION_GROUP-CONFH&apos;
                  start_column          = 10
                  start_row             = 4
                  popup_type            = &apos;ICON_MESSAGE_WARNING&apos;
                  iv_quickinfo_button_1 = &apos;Function is deleted. Function group will be created with this function.&apos;(hye)
                  iv_quickinfo_button_2 = &apos;Function is not deleted and process to next existing function. Function group will be created without this function.&apos;(hno)
                IMPORTING
                  answer                = d_answer
                TABLES
                  parameter             = t_params
                EXCEPTIONS
                  text_not_found        = 1
                  OTHERS                = 2.
              IF sy-subrc &lt;&gt; 0.
                mac_add_mf_and_raise &apos;POPUP_TO_CONFIRM&apos; sy-subrc.
              ELSEIF d_answer = &apos;N&apos; OR d_answer = &apos;2&apos;.
                CONTINUE.
              ELSEIF d_answer = &apos;A&apos;.    &quot; abend
                ROLLBACK WORK.
                mac_add_mf_and_raise &apos;RS_FUNCTION_POOL_INSERT&apos; 1.
              ENDIF.

              CALL FUNCTION &apos;RS_FUNCTION_DELETE&apos;
                EXPORTING
                  funcname                 = &lt;f&gt;-header-name
                  suppress_popups          = abap_true
*               SUPPRESS_CHECKS          = &apos; &apos;
*               SUPPRESS_DELE_ENHA       = &apos; &apos;
*               TRREQUEST                =
                EXCEPTIONS
                  cancelled                = 1
                  function_released        = 2
                  OTHERS                   = 3.
              IF sy-subrc &lt;&gt; 0.
                mac_add_mf_and_raise &apos;RS_FUNCTION_DELETE&apos; sy-subrc.
              ENDIF.
            ENDLOOP.
          ENDIF.

          CALL FUNCTION &apos;RS_FUNCTION_POOL_INSERT&apos;
            EXPORTING
              function_pool                 = s_fm_data-header-area
              short_text                    = space
*             RESPONSIBLE                   = SY-UNAME
*             NAMESPACE                     = &apos; &apos;
*             DEVCLASS                      =
*             CORRNUM                       =
*             SUPPRESS_LANGUAGE_CHECK       = &apos;X&apos;
*             AUTHORITY_CHECK               = &apos;X&apos;
*             SUPPRESS_CORR_CHECK           = &apos;X&apos;
*             UNICODE_CHECKS                = &apos;X&apos;
*           IMPORTING
*             CORRNUM                       =
            EXCEPTIONS
              name_already_exists           = 1
              name_not_correct              = 2
              function_already_exists       = 3
              invalid_function_pool         = 4
              invalid_name                  = 5
              too_many_functions            = 6
              no_modify_permission          = 7
              no_show_permission            = 8
              enqueue_system_failure        = 9
              canceled_in_corr              = 10
              undefined_error               = 11
              OTHERS                        = 12.
          IF sy-subrc &lt;&gt; 0.
            ROLLBACK WORK.
            mac_add_mf_and_raise &apos;RS_FUNCTION_POOL_INSERT&apos; sy-subrc.
          ENDIF.

          LOOP AT s_fm_data-functions ASSIGNING &lt;f&gt;.
            DELETE FROM tftit WHERE funcname = &lt;f&gt;-header-name.
            DELETE FROM funct WHERE funcname = &lt;f&gt;-header-name.
            CALL FUNCTION &apos;RPY_FUNCTIONMODULE_INSERT&apos;
              EXPORTING
                funcname                      = &lt;f&gt;-header-name
                function_pool                 = s_fm_data-header-area
                interface_global              = &lt;f&gt;-header-global
                remote_call                   = &lt;f&gt;-header-remote
                short_text                    = space
                suppress_corr_check           = abap_false
                update_task                   = &lt;f&gt;-header-utask
*               CORRNUM                       = &apos; &apos;
*               NAMESPACE                     = &apos; &apos;
*               NEW_SOURCE                    =
*             IMPORTING
*               FUNCTION_INCLUDE              =
              TABLES
                import_parameter              = &lt;f&gt;-import_p
                export_parameter              = &lt;f&gt;-export_p
                tables_parameter              = &lt;f&gt;-tables
                changing_parameter            = &lt;f&gt;-changing_p
                exception_list                = &lt;f&gt;-exceptions
                parameter_docu                = t_doc
                SOURCE                        = t_src
              EXCEPTIONS
                double_task                   = 1
                error_message                 = 2
                function_already_exists       = 3
                invalid_function_pool         = 4
                invalid_name                  = 5
                too_many_functions            = 6
                no_modify_permission          = 7
                no_show_permission            = 8
                enqueue_system_failure        = 9
                canceled_in_corr              = 10
                OTHERS                        = 11.
            IF sy-subrc &lt;&gt; 0.
              ROLLBACK WORK.
              mac_add_mf_and_raise &apos;RPY_FUNCTIONMODULE_INSERT&apos; sy-subrc.
            ENDIF.
          ENDLOOP.

          CALL FUNCTION &apos;RS_FUNCTION_POOL_CONTENTS&apos;
            EXPORTING
              function_pool           = s_fm_data-header-area
            TABLES
              functab                 = t_functions
            EXCEPTIONS
              function_pool_not_found = 1
              OTHERS                  = 2.
          IF sy-subrc &lt;&gt; 0.
            ROLLBACK WORK.
            mac_add_mf_and_raise &apos;RS_FUNCTION_POOL_CONTENTS&apos; sy-subrc.
          ENDIF.

          LOOP AT s_fm_data-functions ASSIGNING &lt;f&gt;.
            READ TABLE t_functions ASSIGNING &lt;fi&gt;
                 WITH KEY funcname = &lt;f&gt;-header-name.
            IF sy-subrc &lt;&gt; 0.
              ROLLBACK WORK.
              mac_add_mf_and_raise &apos;RS_FUNCTIONMODULE_INSERT&apos; 12.
              CONTINUE.
            ENDIF.
            set_prog_rawsource( program = &lt;fi&gt;-include
                                    raw = &lt;f&gt;-source ).
          ENDLOOP.

* Text Pool
          set_prog_textpool( program = d_mainprog
                            textpool = s_fm_data-textspool ).
* Dynpro
          set_dynpros( program = d_mainprog
                       dynpros = s_fm_data-dynpros ).

* Menu Painter
          set_menus( program = d_mainprog
                       menus = s_fm_data-menupainter ).

*Texts
          DELETE FROM tlibt WHERE area = s_fm_data-header-area.
          MODIFY tlibt FROM TABLE s_fm_data-texts.

          MODIFY tftit FROM TABLE s_fm_data-function_texts.
          MODIFY funct FROM TABLE s_fm_data-param_texts.

** Documentation
*          zaplink_documentation=&gt;set( t_docs = o_data-&gt;documentation ).

*      COMMIT WORK AND WAIT. &quot; why ?

          CREATE OBJECT _comp.
          _comp-&gt;set_type( st_function_group ).
          _name = o_data-&gt;a0_maindata-area.
          _comp-&gt;set_name( _name ).
          CREATE OBJECT components.
          components-&gt;add( _comp ).
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = object-&gt;type
              connclass = &apos;ZAPLINK_PROGRAM&apos;.
      ENDCASE.

    CATCH zaplink_cx_connector INTO o_mycx.
      ROLLBACK WORK.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      ROLLBACK WORK.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
  </REDEFINITIONS>
  <TEXTSPOOL>
   <ITEM ID="I" KEY="D00">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Confirm module function deletion" LENGTH="50 "/>
    </TEXTS>
   </ITEM>
   <ITEM ID="I" KEY="HNO">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Function is not deleted and process to next existing function. Function group will be created without this function." LENGTH="132 "/>
    </TEXTS>
   </ITEM>
   <ITEM ID="I" KEY="HYE">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Function is deleted. Function group will be created with this function." LENGTH="132 "/>
    </TEXTS>
   </ITEM>
   <ITEM ID="I" KEY="NO_">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="No" LENGTH="15 "/>
    </TEXTS>
   </ITEM>
   <ITEM ID="I" KEY="YES">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Yes" LENGTH="15 "/>
    </TEXTS>
   </ITEM>
  </TEXTSPOOL>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" VERSION="1" IMPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TD_INCLUDENAME" VERSION="1" STATE="1" EDITORDER="4 " TYPTYPE="1" TYPE="ZAPLINK_FUGR_DATA=&gt;TD_INCLUDENAME"/>
   <ITEM CMPNAME="TO_GROUP" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_FUGR_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Data for Function group"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_FM_DATA" VERSION="1" STATE="1" EDITORDER="5 " TYPTYPE="1" TYPE="ZAPLINK_FUGR_DATA=&gt;TS_FM_DATA"/>
   <ITEM CMPNAME="TS_PROG_ATTR" VERSION="1" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="9 " SRCCOLUMN2="22 " TYPESRC_LENG="102 ">
    BEGIN OF ts_prog_attr.
  INCLUDE TYPE ts_base_attributs AS base.
  TYPES:
    END OF ts_prog_attr

    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Program Attributs"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_SOURCE" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="5 " TYPTYPE="1" TYPE="STRING">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ABAP Source code"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_TEXT" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="14 " SRCCOLUMN1="4 " SRCROW2="18 " SRCCOLUMN2="17 " TYPESRC_LENG="128 ">begin of ts_text,
      langu   type SPRAS,
      ENTRY	  type TEXTPOOLTX,
      LENGTH  type TEXTPOOLLN,
    end of ts_text</ITEM>
   <ITEM CMPNAME="TS_TEXTPOOL" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="22 " SRCCOLUMN1="4 " SRCROW2="26 " SRCCOLUMN2="21 " TYPESRC_LENG="136 ">begin of ts_textpool,
      ID    type  TEXTPOOLID,
      KEY	  type  TEXTPOOLKY,
      texts type  tt_texts,
    end of ts_textpool</ITEM>
   <ITEM CMPNAME="TT_INCLUDES" VERSION="1" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="ZAPLINK_FUGR_DATA=&gt;TT_RAWINCLUDES"/>
   <ITEM CMPNAME="TT_RS38L_INCL" VERSION="1" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="13 " SRCCOLUMN1="4 " SRCROW2="13 " SRCCOLUMN2="67 " TYPESRC_LENG="66 ">
    TT_RS38L_INCL type STANDARD TABLE OF rs38l_incl with DEFAULT KEY

    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="standard table of rs38l_incl"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_TEXTPOOLS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="28 " SRCCOLUMN1="4 " SRCROW2="28 " SRCCOLUMN2="71 " TYPESRC_LENG="68 ">
    TT_TEXTPOOLs type SORTED TABLE OF ts_textpool WITH UNIQUE key ID KEY
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Table of textppool"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_TEXTS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="20 " SRCCOLUMN1="4 " SRCROW2="20 " SRCCOLUMN2="62 " TYPESRC_LENG="59 ">tt_texts type SORTED TABLE OF ts_text WITH UNIQUE KEY langu</ITEM>
   <ITEM CMPNAME="T_RAW" VERSION="1" EXPOSURE="2" STATE="1" TYPTYPE="1" TYPE="RSWSOURCET">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ABAP Source"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
